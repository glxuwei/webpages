<!DOCTYPE html>
<!-- saved from url=(0354)http://hcysun.me/2016/03/25/%E5%9F%BA%E4%BA%8Ewebpack%E5%92%8Cvue.js%E6%90%AD%E5%BB%BA%E7%9A%84H5%E7%AB%AF%E6%A1%86%E6%9E%B6(%E5%85%B6%E5%AE%9E%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8EHybrid%E5%BC%80%E5%8F%91H5%E7%AB%AF%E6%A1%86%E6%9E%B6%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BE%9D%E7%84%B6%E8%83%BD%E5%A4%9F%E4%BD%9C%E4%B8%BA%E7%BA%AFweb%E7%AB%AF%E4%BD%BF%E7%94%A8)/ -->
<html class=""><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/cm.js" charset="utf-8"></script><script src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/id.php" charset="utf-8"></script>
  
  
  <title>基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) | HcySunYang's Blog</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description" content="人类的发展得益于对追求不断的提升，在能活着的基础上是否要活得潇洒一点，技术的发展亦如是。在公司作为一个最最最最最最最底层的搬砖码农，经历了两个版本的铸(zhe)炼(mo)之后，我痛下决心今后一定要：…………..一定要和产品惺(shi)惺(bu)相(liang)惜(li)。">
<meta property="og:type" content="article">
<meta property="og:title" content="基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用)">
<meta property="og:url" content="hcysun.me/2016/03/25/基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用)/index.html">
<meta property="og:site_name" content="HcySunYang&#39;s Blog">
<meta property="og:description" content="人类的发展得益于对追求不断的提升，在能活着的基础上是否要活得潇洒一点，技术的发展亦如是。在公司作为一个最最最最最最最底层的搬砖码农，经历了两个版本的铸(zhe)炼(mo)之后，我痛下决心今后一定要：…………..一定要和产品惺(shi)惺(bu)相(liang)惜(li)。">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325b.jpg">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325c.jpg">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325d.jpg">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325e.jpg">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325f.jpg">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325g.jpg">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325h.jpg">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325i.jpg">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325m.jpg">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325n.jpg">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325l.jpg">
<meta property="og:image" content="http://7xlolm.com1.z0.glb.clouddn.com/20160325u.jpg">
<meta property="og:updated_time" content="2016-06-06T03:38:56.000Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用)">
<meta name="twitter:description" content="人类的发展得益于对追求不断的提升，在能活着的基础上是否要活得潇洒一点，技术的发展亦如是。在公司作为一个最最最最最最最底层的搬砖码农，经历了两个版本的铸(zhe)炼(mo)之后，我痛下决心今后一定要：…………..一定要和产品惺(shi)惺(bu)相(liang)惜(li)。">
  
    <link rel="alternative" href="http://hcysun.me/atom.xml" title="HcySunYang&#39;s Blog" type="application/atom+xml">
  
  
    <link rel="icon" href="http://7xlolm.com1.z0.glb.clouddn.com/hcy.jpg">
  
  <link rel="stylesheet" href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/style.css" type="text/css">
<script type="text/javascript" async="" src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/embed.js" charset="UTF-8"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="/js/pc.js" src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/pc.js"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="/fancybox/jquery.fancybox.js" src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/jquery.fancybox.js"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="/js/jquery.lazyload.js" src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/jquery.lazyload.js"></script><style type="text/css">.fancybox-margin{margin-right:10px;}</style><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
<body><div id="MathJax_Message" style="display: none;"></div><link href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/jiathis_share.css" rel="stylesheet" type="text/css"><iframe frameborder="0" style="position: absolute; display: none; opacity: 0;" src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/saved_resource.html"></iframe><div class="jiathis_style" style="position: absolute; z-index: 1000000000; display: none; top: 50%; left: 50%; overflow: auto;"></div><div class="jiathis_style" style="position: absolute; z-index: 1000000000; display: none; overflow: auto;"></div><iframe frameborder="0" src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/jiathis_utility.html" style="display: none;"></iframe>
  <div id="container">
    <div class="left-col">
    <div class="overlay"></div>
<div class="intrude-less">
	<header id="header" class="inner">
		<a href="http://hcysun.me/" class="profilepic">
			
			<img lazy-src="http://7xlolm.com1.z0.glb.clouddn.com/98BBE3237FAA73D6B50A386F4EB34AD7.png" class="js-avatar show" src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/98BBE3237FAA73D6B50A386F4EB34AD7.png">
			
		</a>

		<hgroup>
		  <h1 class="header-author"><a href="http://hcysun.me/">HcySunYang</a></h1>
		</hgroup>

		
		<p class="header-subtitle">Blogs and life</p>
		

		
			<div class="switch-btn">
				<div class="icon">
					<div class="icon-ctn">
						<div class="icon-wrap icon-house" data-idx="0">
							<div class="birdhouse"></div>
							<div class="birdhouse_holes"></div>
						</div>
						<div class="icon-wrap icon-ribbon hide" data-idx="1">
							<div class="ribbon"></div>
						</div>
						
						<div class="icon-wrap icon-link hide" data-idx="2">
							<div class="loopback_l"></div>
							<div class="loopback_r"></div>
						</div>
						
						
						<div class="icon-wrap icon-me hide" data-idx="3">
							<div class="user"></div>
							<div class="shoulder"></div>
						</div>
						
					</div>
					
				</div>
				<div class="tips-box hide">
					<div class="tips-arrow"></div>
					<ul class="tips-inner">
						<li>菜单</li>
						<li>标签</li>
						
						<li>友情链接</li>
						
						
						<li>关于我</li>
						
					</ul>
				</div>
			</div>
		

		<div class="switch-area">
			<div class="switch-wrap">
				<section class="switch-part switch-part1">
					<nav class="header-menu">
						<ul>
						
							<li><a href="http://hcysun.me/">Home</a></li>
				        
							<li><a href="http://hcysun.me/archives">Archives</a></li>
				        
							<li><a href="http://hcysun.me/categories/WebFrontEnd">WebFrontEnd</a></li>
				        
							<li><a href="http://hcysun.me/tags/notes">notes</a></li>
				        
							<li><a href="http://hcysun.me/instagram">photos</a></li>
				        
						</ul>
					</nav>
					<nav class="header-nav">
						<div class="social">
							
								<a class="github" target="_blank" href="http://github.com/hcysunyang" title="github">github</a>
					        
								<a class="rss" target="_blank" href="http://hcysun.me/atom.xml" title="rss">rss</a>
					        
								<a class="zhihu" target="_blank" href="http://www.zhihu.com/people/huo-chun-yang-77" title="zhihu">zhihu</a>
					        
						</div>
					</nav>
				</section>
				
				
				<section class="switch-part switch-part2">
					<div class="widget tagcloud" id="js-tagcloud">
						<a href="http://hcysun.me/tags/MVVM/" style="font-size: 12px;" class="color5">MVVM</a> <a href="http://hcysun.me/tags/Ubuntu/" style="font-size: 12px;" class="color2">Ubuntu</a> <a href="http://hcysun.me/tags/Worker/" style="font-size: 12px;" class="color2">Worker</a> <a href="http://hcysun.me/tags/brew/" style="font-size: 12px;" class="color5">brew</a> <a href="http://hcysun.me/tags/css/" style="font-size: 12px;" class="color4">css</a> <a href="http://hcysun.me/tags/express/" style="font-size: 12px;" class="color3">express</a> <a href="http://hcysun.me/tags/git/" style="font-size: 12px;" class="color4">git</a> <a href="http://hcysun.me/tags/gulp/" style="font-size: 12px;" class="color5">gulp</a> <a href="http://hcysun.me/tags/hexo/" style="font-size: 12px;" class="color5">hexo</a> <a href="http://hcysun.me/tags/html/" style="font-size: 12px;" class="color5">html</a> <a href="http://hcysun.me/tags/jquery/" style="font-size: 12px;" class="color2">jquery</a> <a href="http://hcysun.me/tags/js/" style="font-size: 12px;" class="color3">js</a> <a href="http://hcysun.me/tags/kerkee/" style="font-size: 12px;" class="color2">kerkee</a> <a href="http://hcysun.me/tags/mongodb/" style="font-size: 12px;" class="color3">mongodb</a> <a href="http://hcysun.me/tags/node/" style="font-size: 12px;" class="color5">node</a> <a href="http://hcysun.me/tags/nodejs/" style="font-size: 12px;" class="color2">nodejs</a> <a href="http://hcysun.me/tags/notes/" style="font-size: 12px;" class="color1">notes</a> <a href="http://hcysun.me/tags/npm/" style="font-size: 12px;" class="color4">npm</a> <a href="http://hcysun.me/tags/observe/" style="font-size: 12px;" class="color3">observe</a> <a href="http://hcysun.me/tags/php/" style="font-size: 12px;" class="color4">php</a> <a href="http://hcysun.me/tags/pycurl/" style="font-size: 12px;" class="color2">pycurl</a> <a href="http://hcysun.me/tags/python/" style="font-size: 12px;" class="color2">python</a> <a href="http://hcysun.me/tags/requirejs/" style="font-size: 12px;" class="color5">requirejs</a> <a href="http://hcysun.me/tags/rjs/" style="font-size: 12px;" class="color4">rjs</a> <a href="http://hcysun.me/tags/vue/" style="font-size: 12px;" class="color4">vue</a> <a href="http://hcysun.me/tags/webpack/" style="font-size: 12px;" class="color3">webpack</a> <a href="http://hcysun.me/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/" style="font-size: 12px;" class="color1">命令行工具</a> <a href="http://hcysun.me/tags/%E6%8F%92%E4%BB%B6/" style="font-size: 12px;" class="color3">插件</a> <a href="http://hcysun.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/" style="font-size: 12px;" class="color4">数据库</a> <a href="http://hcysun.me/tags/%E6%9E%84%E5%BB%BA/" style="font-size: 12px;" class="color3">构建</a> <a href="http://hcysun.me/tags/%E6%9E%B6%E6%9E%84/" style="font-size: 12px;" class="color3">架构</a> <a href="http://hcysun.me/tags/%E6%A1%86%E6%9E%B6/" style="font-size: 12px;" class="color3">框架</a> <a href="http://hcysun.me/tags/%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2/" style="font-size: 12px;" class="color5">移动页面</a> <a href="http://hcysun.me/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/" style="font-size: 12px;" class="color4">自动化</a> <a href="http://hcysun.me/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/" style="font-size: 12px;" class="color5">表单验证</a> <a href="http://hcysun.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" style="font-size: 12px;" class="color5">设计模式</a>
					</div>
				</section>
				
				
				
				<section class="switch-part switch-part3">
					<div id="js-friends">
					
			          <a target="_blank" class="main-nav-link switch-friends-link" href="https://xuri.me/">Ri Xu Online</a>
			        
			        </div>
				</section>
				

				
				
				<section class="switch-part switch-part4">
				
					<div id="js-aboutme">一个想买超跑但目前开着拖拉机的前端码农。</div>
				</section>
				
			</div>
		</div>
	</header>				
</div>
    </div>
    <div class="mid-col">
      <nav id="mobile-nav">
  	<div class="overlay">
  		<div class="slider-trigger"></div>
  		<h1 class="header-author js-mobile-header hide">HcySunYang</h1>
  	</div>
	<div class="intrude-less">
		<header id="header" class="inner">
			<div class="profilepic">
				<img lazy-src="http://7xlolm.com1.z0.glb.clouddn.com/98BBE3237FAA73D6B50A386F4EB34AD7.png" class="js-avatar show" src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/98BBE3237FAA73D6B50A386F4EB34AD7.png">
			</div>
			<hgroup>
			  <h1 class="header-author">HcySunYang</h1>
			</hgroup>
			
			<p class="header-subtitle">Blogs and life</p>
			
			<nav class="header-menu">
				<ul>
				
					<li><a href="http://hcysun.me/">Home</a></li>
		        
					<li><a href="http://hcysun.me/archives">Archives</a></li>
		        
					<li><a href="http://hcysun.me/categories/WebFrontEnd">WebFrontEnd</a></li>
		        
					<li><a href="http://hcysun.me/tags/notes">notes</a></li>
		        
					<li><a href="http://hcysun.me/instagram">photos</a></li>
		        
		        <div class="clearfix"></div>
				</ul>
			</nav>
			<nav class="header-nav">
				<div class="social">
					
						<a class="github" target="_blank" href="http://github.com/hcysunyang" title="github">github</a>
			        
						<a class="rss" target="_blank" href="http://hcysun.me/atom.xml" title="rss">rss</a>
			        
						<a class="zhihu" target="_blank" href="http://www.zhihu.com/people/huo-chun-yang-77" title="zhihu">zhihu</a>
			        
				</div>
			</nav>
		</header>				
	</div>
</nav>
      <div class="body-wrap"><article id="post-基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用)" class="article article-type-post" itemscope="" itemprop="blogPost">
  
    <div class="article-meta">
      <a href="http://hcysun.me/2016/03/25/%E5%9F%BA%E4%BA%8Ewebpack%E5%92%8Cvue.js%E6%90%AD%E5%BB%BA%E7%9A%84H5%E7%AB%AF%E6%A1%86%E6%9E%B6(%E5%85%B6%E5%AE%9E%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8EHybrid%E5%BC%80%E5%8F%91H5%E7%AB%AF%E6%A1%86%E6%9E%B6%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BE%9D%E7%84%B6%E8%83%BD%E5%A4%9F%E4%BD%9C%E4%B8%BA%E7%BA%AFweb%E7%AB%AF%E4%BD%BF%E7%94%A8)/" class="article-date" target="_blank">
  	<time datetime="2016-03-25T07:17:33.000Z" itemprop="datePublished">2016-03-25</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy">
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用)
    </h1>
  

      </header>
      
      <div class="article-info article-info-post">
        
	<div class="article-tag tagcloud">
		<ul class="article-tag-list"><li class="article-tag-list-item"><a class="color4" href="http://hcysun.me/tags/vue/" target="_blank" style="font-size: 12px;">vue</a></li><li class="article-tag-list-item"><a class="color3" href="http://hcysun.me/tags/webpack/" target="_blank" style="font-size: 12px;">webpack</a></li><li class="article-tag-list-item"><a class="color3" href="http://hcysun.me/tags/%E6%9E%B6%E6%9E%84/" target="_blank" style="font-size: 12px;">架构</a></li><li class="article-tag-list-item"><a class="color3" href="http://hcysun.me/tags/%E6%A1%86%E6%9E%B6/" target="_blank" style="font-size: 12px;">框架</a></li></ul>
	</div>

        
	<div class="article-category tagcloud">
	<a class="color2" href="http://hcysun.me/categories/WebFrontEnd/" target="_blank" style="font-size: 12px;">WebFrontEnd</a>
	</div>


        <div class="clearfix"></div>
      </div>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <p>人类的发展得益于对追求不断的提升，在能活着的基础上是否要活得潇洒一点，技术的发展亦如是。在公司作为一个最最最最最最最底层的搬砖码农，经历了两个版本的铸(zhe)炼(mo)之后，我痛下决心今后一定要：…………..一定要和产品惺(shi)惺(bu)相(liang)惜(li)。</p>
<a id="more"></a>
<h1 id="开始之前">开始之前</h1><p>本文包含以下技术，文中尽量给与详细的描述，并且附上参考链接，读者可以深入学习：</p>
<p>1、<a href="http://webpack.github.io/" target="_blank" rel="external">webpack</a><br>2、<a href="http://cn.vuejs.org/" target="_blank" rel="external">Vue.js</a><br>3、<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a><br>4、nodejs —- 这个就不给连接了，因为上面的连接都是在你实践的过程中要去不断访问的<br>5、<a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="external">ES6语法</a></p>
<p>另外，这套教程的代码都在我的github上，读者可以对照着代码来看，不过还是希望大家自己亲手搭建，体验这个过程，git地址：</p>
<p><a href="https://github.com/HcySunYang/h5_frame" target="_blank" rel="external">git地址</a></p>
<h1 id="前言">前言</h1><p>在对着产品高举中指怒发心中之愤后，真正能够解决问题的是自身上的改变，有句话说的好：你虽然改变不了全世界，但是你有机会改变你自己。秉承着“不听老人言，吃亏在眼前”的优良作风，我还是决定玩火自焚。</p>
<h3 id="问题所在">问题所在</h3><p>之前的项目总结为以下内容：</p>
<blockquote>
<p>1、AMD模块规范开发，使用requirejs实现，使用rjs打包，最终导致的结果是，输出的项目臃肿，肿的就像一坨狗不理……不忍直视<br>2、使用gulp进行打包，这一点貌似没有可吐槽的地方，毕竟都是被grunt折磨过来的……<br>3、数据的渲染使用模板引擎，这就意味着你要手动管理DOM，这样，你的业务代码参杂着你的数据处理、DOM管理，满屏幕的毛线……<br>4、模块化不足，虽然使用require进行了模块管理，但是大部分业务逻辑还是充斥在一个文件里，这与最近流行的组件化概念冰火不容，拒绝落后……<br>5、诸如 扩展性 、 维护性 我想早已不言而喻，不需赘述，再述就真TM是累赘了。</p>
</blockquote>
<p>新框架要解决的问题：</p>
<blockquote>
<p>1、要使构建输出的项目像你邻家小妹妹一样、瘦的皮包骨。（也许是营养不良）<br>2、要实现真正的模块化、组件化的开发方式，真正去解决维护难、扩展难的问题。（从此不怕产品汪）<br>3、业务逻辑专注数据处理，手动管理DOM的年代就像……像什么呢？（毕竟成人用品也越来越自动化了）<br>4、等等…….（其实好处无需赘述，来，往下看）</p>
</blockquote>
<p>为了达成以上目标，我们探讨一下解决方案：</p>
<p><em><b>1、老项目的构建输出为什么臃肿？</b></em></p>
<p>答：因为使用的是require的rjs进行构建打包的，了解rjs的都知道，它会把项目所有依赖都打包在一个文件里，如果项目中有很多页面依赖这个模块，那么rjs并不会把这个模块提取出来作为公共模块，所以就会有很多复制性的内容，所以项目自然臃肿。</p>
<p><em>解决方案：</em>使用webpack配合相应的loader，来完成模块加载和构建的工作。</p>
<p><em><b>2、老项目为什么模块化的不足？</b></em></p>
<p>答：老项目的模块化，仅仅体现在js层面，解决了模块引用的问题，但在开发方式上，依然可以看做是过程式的，这样的结果就导致了项目的难扩展和难维护，让开发人员在与产品汪的对峙中，并不从容。</p>
<p><em>解决方案：</em>Vue.js能够很好的解决组件化的问题，配合 Vue.js 官方提供的 <em>vue-loader</em> 能够很好的结合webpack做组件化的开发架构。</p>
<p><em><b>3、如何避免手动管理DOM？</b></em></p>
<p>答：如果你在做数据展示这一块的开发工作，相信你一定体会颇深，发送http请求到服务端，拿到返回的数据后手动渲染DOM至页面，这是最原始的开发方式，无非再加一个模板引擎之类的，但最终还是避免不了手动渲染，如果页面逻辑复杂，比如给你来一个翻页的功能，再来一个筛选项，估计你会觉得世界并不那么美好。</p>
<p><em>解决方案：</em>MVVM模式能够很好的解决这个问题，而Vue.js的核心也是MVVM。</p>
<h1 id="webpack">webpack</h1><p>你肯定听说过webpack，如果直接对你描述什么是webpack你可能感受不到他的好处，那么在这之前，我相信你肯定使用过gulp或者grunt，如果你没使用过也可以，至少你要听说过并且知道gulp和grunt是干什么的，假如这个你还不清楚，那么你并不是一个合格的前端开发人员，这篇文章也不适合你，你可以从基础的地方慢慢学起。</p>
<p>gulp和grunt对于每一个前端开发人员应该是不陌生的，它们为前端提供了自动化构建的能力，并且有自己的生态圈，有很多插件，使得我们告别刀耕火种的时代，但是它们并没有解决模块加载的问题，比如我们之前的项目是使用gulp构建的，但是模块化得工作还是要靠require和rjs来完成，而gulp除了完成一些其他任务之外，就变成了帮助我们免除手动执行命令的工具了，别无它用。</p>
<p>而webpack就不同了，webpack的哲学是一切皆是模块，无论是js/css/sass/img/coffeejs/ttf….等等，webpack可以使用自定义的loader去把一切资源当做模块加载，这样就解决了模块依赖的问题，同时，利用插件还可以对项目进行优化，由于模块的加载和项目的构建优化都是通过webpack一个”人“来解决的，所以模块的加载和项目的构建优化并不是无机分离的，而是有机的结合在一起的，是一个组合的过程，这使得webpack在这方面能够完成的更出色，这也是webpack的优势所在。</p>
<p>如果你看不懂上面的描述，没关系，你只需要知道一下几点：</p>
<p>1、过去使用require和rjs等进行模块加载的方式，可以替换为webpack提供的指定loader去完成，你也可以自己开发加载特定资源的loader。<br>2、过去使用gulp和grunt完成项目构建优化的方式，可以替换成webpack提供的插件和特定的配置去完成。<br>3、由于模块的加载和项目的构建优化有机的结合，所以webpack能够更好的完成这项工作<br>4、并不是说有了webpack就淘汰的gulp等，有些特定的任务，还是要使用gulp去自定义完成的。但是不保证webpack的未来发展趋势会怎么样。</p>
<p>最后，给大家分享一个官方的教程，这个教程的最开始有坑的地方，如果读者遇到了坑，可以在这里给我留言，我会为大家解答，不过总体来讲，这个教程适合入门，唯一不足的就是教程是英文的，英文的也不用怕，本人的英语没过四级，但是现在依然能够看得懂英文技术文章。教程链接：<a href="http://blog.madewithlove.be/post/webpack-your-bags/" target="_blank" rel="external">http://blog.madewithlove.be/post/webpack-your-bags/</a></p>
<h1 id="Vue-js">Vue.js</h1><p><a href="http://cn.vuejs.org/" target="_blank" rel="external">Vue.js</a>是一个MVVM模式的框架，如果读者有angular经验，一定能够很快入门Vue的，那么问题来了，为什么使用Vue而不用angular，<br>首先，Vue的体积小，轻量在移动端开发始终是一个不可忽略的话题，其次，Vue在实现上与angular有本质的区别，读者可以通过下面两个链接来了解：</p>
<p>1、<a href="http://cn.vuejs.org/guide/reactivity.html" target="_blank" rel="external">Vue的变化追踪和计算属性的区别等</a></p>
<p>2、<a href="http://cn.vuejs.org/guide/comparison.html" target="_blank" rel="external">Vue 与 angular 及 react 等框架的对比</a></p>
<p>3、第三点就是Vue提供了webpack的loader —-&gt; [vue-loader]，使用它可以让项目的组件化思想更加清晰</p>
<p>综上所述，这就是选用Vue的原因</p>
<h1 id="npm_和_nodejs">npm 和 nodejs</h1><p>npm 的全称是 <em>nodejs包管理</em>，现在越来越多的项目(包)都可以通过npm来安装管理，nodejs是js运行在服务器端的平台，它使得js的能力进一步提高，我们还要使用nodejs配合 webpack 来完成热加载的功能。所以读者最好有nodejs的开发经验，如果有express的经验更好。</p>
<h1 id="让我们一步一步从零搭建这个项目">让我们一步一步从零搭建这个项目</h1><p>首先新建一个目录，名为 myProject ，这是我们的项目目录。然后执行一些基本的步骤，比如 npm init 命令，在我们的项目中生成 package.json 文件，这几乎是必选的，因为我们的项目要有很多依赖，都是通过npm来管理的，而npm对于我们项目的管理，则是通过package.json文件：</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></tbody></table></figure>
<p>执行npm init之后，会提示你填写一些项目的信息，一直回车默认就好了，或者直接执行 npm init -y 直接跳过询问步骤<br>然后我们新建一个叫做 app 的目录，这个是我们页面模块的目录，再在app目录下建立一个index目录，假设这个是首页模块的目录，然后再在index目录下建立一个 index.html 文件和 index.js 文件，分别是首页入口html文件和主js文件，然后再在index目录下建立一个components目录，这个目录用作存放首页组件模块的目录，因为我们最终要实现组件化开发。这样，当你完成上面的步骤后，你的项目看上去应该是这样的：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325b.jpg" title="项目结构" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325b.jpg" title="项目结构"></a></p>
<p>接下来通过npm安装项目依赖项：</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install\
  webpack webpack-dev-server\
  vue-loader vue-html-loader css-loader vue-style-loader vue-hot-reload-api\
  babel-loader babel-core babel-plugin-transform-runtime babel-preset-es2015\
  babel-runtime@5\
  --save-dev

npm install vue --save</span><br></pre></td></tr></tbody></table></figure>
<p>这个时候，你的package.json文件看起来应该是这样的：</p>
<figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: {</span><br><span class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.3.17"</span>,</span><br><span class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^6.2.0"</span>,</span><br><span class="line">    <span class="string">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.3.13"</span>,</span><br><span class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.3.13"</span>,</span><br><span class="line">    <span class="string">"babel-runtime"</span>: <span class="string">"^5.8.34"</span>,</span><br><span class="line">    <span class="string">"css-loader"</span>: <span class="string">"^0.23.0"</span>,</span><br><span class="line">    <span class="string">"vue-hot-reload-api"</span>: <span class="string">"^1.2.2"</span>,</span><br><span class="line">    <span class="string">"vue-html-loader"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"vue-style-loader"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"vue-loader"</span>: <span class="string">"^7.2.0"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.12.9"</span>,</span><br><span class="line">    <span class="string">"webpack-dev-server"</span>: <span class="string">"^1.14.0"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="string">"dependencies"</span>: {</span><br><span class="line">    <span class="string">"vue"</span>: <span class="string">"^1.0.13"</span></span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>
<p>我们安装了 babel 一系列包，用来解析ES6语法，因为我们使用ES6来开发项目，如果你不了解ES6语法，建议你看一看<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">阮老师的教程</a>，然后我们安装了一些loader包，比如css-loader/vue-loader等等，因为webpack是使用这些指定的loader去加载指定的文件的。</p>
<p>另外我们还使用 npm install vue –save 命令安装了 vue ，这个就是我们要在项目中使用的vue.js，我们可以直接像开发nodejs应用一样，直接require(‘vue’);即可，而不需要通过script标签引入，这一点在开发中很爽。</p>
<p>安装完了依赖，编辑以下文件并保存到相应位置：</p>
<p>1、index.html文件：</p>
<figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"zh"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, height=device-height, initial-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- vue的组件以自定义标签的形式使用 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">favlist</span>&gt;</span><span class="tag">&lt;/<span class="title">favlist</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>2、index.js文件：</p>
<figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'Vue'</span></span><br><span class="line"><span class="keyword">import</span> Favlist <span class="keyword">from</span> <span class="string">'./components/Favlist'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">	el: <span class="string">'body'</span>,</span><br><span class="line">	components: { Favlist }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<p>3、在components目录下新建一个 Favlist.vue 文件，作为我们的第一个组件：</p>
<figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-for</span>=<span class="value">"n in 10"</span>&gt;</span>div<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">        data () {</span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">                msg: <span class="string">'Hello World!'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">    <span class="tag">html</span><span class="rules">{</span><br><span class="line">        <span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;</span><br><span class="line">    }</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>要看懂上面的代码，你需要了解vue.js，假如你看不懂也没关系，我们首先在index.html中使用了自定义标签（即组件），然后在index.js中引入了Vue和我们的Favlist.vue组件，Favlist.vue文件中，我们使用了基本的vue组件语法，最后，我们希望它运行起来，这个时候，我们就需要webpack了。</p>
<p>在项目目录下新建 build 目录，用来存放我们的构建相关的代码文件等，然后在build目录下新建 webpack.config.js 这是我们的webpack配置文件，webpack需要通过读取你的配置，进行相应的操作，类似于gulpfile.js或者gruntfile.js等。</p>
<p>webpack.config.js</p>
<figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodejs 中的path模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="module"><span class="keyword">module</span>.exports = </span>{</span><br><span class="line">    <span class="comment">// 入口文件，path.resolve()方法，可以结合我们给定的两个参数最后生成绝对路径，最终指向的就是我们的index.js文件</span></span><br><span class="line">    entry: path.resolve(__dirname, <span class="string">'../app/index/index.js'</span>),</span><br><span class="line">    <span class="comment">// 输出配置</span></span><br><span class="line">    output: {</span><br><span class="line">        <span class="comment">// 输出路径是 myProject/output/static</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'../output/static'</span>),</span><br><span class="line">        publicPath: <span class="string">'static/'</span>,</span><br><span class="line">        filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'[id].[chunkhash].js'</span></span><br><span class="line">    },</span><br><span class="line">    <span class="module"><span class="keyword">module</span>: </span>{</span><br><span class="line">        </span><br><span class="line">        loaders: [</span><br><span class="line">            <span class="comment">// 使用vue-loader 加载 .vue 结尾的文件</span></span><br><span class="line">            {</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>, </span><br><span class="line">                loader: <span class="string">'vue'</span>   </span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>上例中，相信你已经看懂了我的配置，入口文件是index.js文件，配置了相应输出，然后使用 vue-loader 去加载 .vue 结尾的文件，接下来我们就可以构建项目了，我们可以在命令行中执行：</p>
<figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --<span class="attribute">display</span>-modules --<span class="attribute">display</span>-chunks --config build/webpack<span class="class">.config</span><span class="class">.js</span></span><br></pre></td></tr></tbody></table></figure>
<p>通过webpack命令，并且通过 –config 选项指定了我们配置文件的位置是 ‘build/webpack.config.js’，并通过 –display-modules 和 –display-chunks 选项显示相应的信息。如果你执行上面的命令，可能得到下图的错误：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325c.jpg" title="报错" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325c.jpg" title="报错"></a></p>
<p>错误提示我们应该选择合适的loader去加载这个 ‘./app/index/index.js’ 这个文件，并且说不期望index.js文件中的标识符（Unexpected token），这是因为我们使用了ES6的语法 import 语句，所以我们要使用 babel-loader 去加载我们的js文件，在配置文件中添加一个loaders项目，如下：</p>
<figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodejs 中的path模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="module"><span class="keyword">module</span>.exports = </span>{</span><br><span class="line">    <span class="comment">// 入口文件，path.resolve()方法，可以结合我们给定的两个参数最后生成绝对路径，最终指向的就是我们的index.js文件</span></span><br><span class="line">    entry: path.resolve(__dirname, <span class="string">'../app/index/index.js'</span>),</span><br><span class="line">    <span class="comment">// 输出配置</span></span><br><span class="line">    output: {</span><br><span class="line">        <span class="comment">// 输出路径是 myProject/output/static</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'../output/static'</span>),</span><br><span class="line">        publicPath: <span class="string">'static/'</span>,</span><br><span class="line">        filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'[id].[chunkhash].js'</span></span><br><span class="line">    },</span><br><span class="line">    <span class="module"><span class="keyword">module</span>: </span>{</span><br><span class="line">        </span><br><span class="line">        loaders: [</span><br><span class="line">            <span class="comment">// 使用vue-loader 加载 .vue 结尾的文件</span></span><br><span class="line">            {</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>, </span><br><span class="line">                loader: <span class="string">'vue'</span>   </span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                loader: <span class="string">'babel?presets=es2015'</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>现在再运行构建命令 ： ‘webpack –display-modules –display-chunks –config build/webpack.config.js’</p>
<p>sorry，不出意外，你应该得到如下错误：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325d.jpg" title="错误" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325d.jpg" title="错误"></a></p>
<p>它说没有发现 ‘./components/Favlist’ 模块，而我们明明有 ./components/Favlist.vue 文件，为什么它没发现呢？它瞎了？其实是这样的，当webpack试图去加载模块的时候，它默认是查找以 .js 结尾的文件的，它并不知道 .vue 结尾的文件是什么鬼玩意儿，所以我们要在配置文件中告诉webpack，遇到 .vue 结尾的也要去加载，添加 resolve 配置项，如下：</p>
<figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodejs 中的path模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="module"><span class="keyword">module</span>.exports = </span>{</span><br><span class="line">    <span class="comment">// 入口文件，path.resolve()方法，可以结合我们给定的两个参数最后生成绝对路径，最终指向的就是我们的index.js文件</span></span><br><span class="line">    entry: path.resolve(__dirname, <span class="string">'../app/index/index.js'</span>),</span><br><span class="line">    <span class="comment">// 输出配置</span></span><br><span class="line">    output: {</span><br><span class="line">        <span class="comment">// 输出路径是 myProject/output/static</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'../output/static'</span>),</span><br><span class="line">        publicPath: <span class="string">'static/'</span>,</span><br><span class="line">        filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'[id].[chunkhash].js'</span></span><br><span class="line">    },</span><br><span class="line">    resolve: {</span><br><span class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>]</span><br><span class="line">    },</span><br><span class="line">    <span class="module"><span class="keyword">module</span>: </span>{</span><br><span class="line">        </span><br><span class="line">        loaders: [</span><br><span class="line">            <span class="comment">// 使用vue-loader 加载 .vue 结尾的文件</span></span><br><span class="line">            {</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>, </span><br><span class="line">                loader: <span class="string">'vue'</span>   </span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                loader: <span class="string">'babel?presets=es2015'</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这样，当我们去加载 ‘./components/Favlist’ 这样的模块时，webpack首先会查找 ./components/Favlist.js 如果没有发现Favlist.js文件就会继续查找 Favlist.vue 文件，现在再次运行构建命令，我们成功了，这时我们会在我们的输出目录中看到一个js文件：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325e.jpg" title="输出" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325e.jpg" title="输出"></a></p>
<p>之所以会这样输出，是因为我们的 webpack.config.js 文件中的输出配置中指定了相应的输出信息，这个时候，我们修改 index.html ，将输出的js文件引入：</p>
<figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"zh"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, height=device-height, initial-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- vue的组件以自定义标签的形式使用 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">favlist</span>&gt;</span><span class="tag">&lt;/<span class="title">favlist</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../../output/static/main.ce853b65bcffc3b16328.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>然后用浏览器打开这个页面，你可以看到你写的代码正确的执行了。</p>
<p>那么问题来了，难道我们每次都要手动的引入输出的js文件吗？因为每次构建输出的js文件都带有 hash 值，如 main.ce853b65bcffc3b16328.js，就不能更智能一点吗？每次都自动写入？怎么会不可能，否则这东西还能火吗，要实现这个功能，我们就要使用webpack的插件了，<a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="external">html-webpack-plugin</a>插件，这个插件可以创建html文件，并自动将依赖写入html文件中。</p>
<p>首先安装 html-webpack-plugin 插件：</p>
<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> html-webpack-<span class="keyword">plugin</span> <span class="comment">--save-dev</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>然后在修改配置项：</p>
<figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodejs 中的path模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="module"><span class="keyword">module</span>.exports = </span>{</span><br><span class="line">    <span class="comment">// 入口文件，path.resolve()方法，可以结合我们给定的两个参数最后生成绝对路径，最终指向的就是我们的index.js文件</span></span><br><span class="line">    entry: path.resolve(__dirname, <span class="string">'../app/index/index.js'</span>),</span><br><span class="line">    <span class="comment">// 输出配置</span></span><br><span class="line">    output: {</span><br><span class="line">        <span class="comment">// 输出路径是 myProject/output/static</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'../output/static'</span>),</span><br><span class="line">        publicPath: <span class="string">'static/'</span>,</span><br><span class="line">        filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'[id].[chunkhash].js'</span></span><br><span class="line">    },</span><br><span class="line">    resolve: {</span><br><span class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>]</span><br><span class="line">    },</span><br><span class="line">    <span class="module"><span class="keyword">module</span>: </span>{</span><br><span class="line">        </span><br><span class="line">        loaders: [</span><br><span class="line">            <span class="comment">// 使用vue-loader 加载 .vue 结尾的文件</span></span><br><span class="line">            {</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>, </span><br><span class="line">                loader: <span class="string">'vue'</span>   </span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                loader: <span class="string">'babel?presets=es2015'</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">            filename: <span class="string">'../index.html'</span>,</span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'../app/index/index.html'</span>),</span><br><span class="line">            inject: <span class="literal">true</span></span><br><span class="line">        })</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>然后再次执行构建命令，成功之后，看你的输出目录，多出来一个index.html文件，双击它，代码正确执行，你可以打开这个文件查看一下，webpack自动帮我们引入了相应的文件。</p>
<p>问题继续来了，难道每次我们都要构建之后才能查看运行的代码吗？那岂不是很没有效率，别担心，webpack提供了几种方式，进行热加载，在开发模式中，我们使用这种方式来提高效率，这里要介绍的，是使用 <a href="https://www.npmjs.com/package/webpack-dev-middleware" target="_blank" rel="external">webpack-dev-middleware</a>中间件和<a href="https://www.npmjs.com/package/webpack-hot-middleware" target="_blank" rel="external">webpack-hot-middleware</a>中间件，首先安装两个中间件：</p>
<figure class="highlight q"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-<span class="built_in">dev</span>-middleware webpack-hot-middleware --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></tbody></table></figure>
<p>另外，还要安装express，这是一个nodejs框架</p>
<figure class="highlight q"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></tbody></table></figure>
<p>在开始之前，我先简单介绍一下这两个中间件，之所以叫做中间件，是因为nodejs的一个叫做express的框架中有中间件的概念，而这两个包要作为express中间件使用，所以称它们为中间件，那么他们能干什么呢？</p>
<p><em><b>1、webpack-dev-middleware</b></em></p>
<p>我们之前所面临的问题是，如果我们的代码改动了，我们要想看到浏览器的变化，需要先对项目进行构建，然后才能查看效果，这样对于开发效率来讲，简直就是不可忍受的一件事，试想我仅仅修改一个背景颜色就要构建一下项目，这尼玛坑爹啊，好在有<a href="https://www.npmjs.com/package/webpack-dev-middleware" target="_blank" rel="external">webpack-dev-middleware</a>中间件，它是对webpack一个简单的包装，它可以通过连接服务器服务那些从webpack发射出来的文件，它有一下几点好处：</p>
<p>1、不会向硬盘写文件，而是在内存中，注意我们构建项目实际就是向硬盘写文件。</p>
<p>2、当文件改变的时候，这个中间件不会再服务旧的包，你可以直接帅新浏览器就能看到最新的效果，这样你就不必等待构建的时间，所见即所得。</p>
<p>下面我们在build目录中创建一个 dev-server.js 的文件，并写入一下内容：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入必要的模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个express实例</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用webpack并把配置传递过去</span></span><br><span class="line"><span class="keyword">var</span> compiler = webpack(config)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 webpack-dev-middleware 中间件</span></span><br><span class="line"><span class="keyword">var</span> devMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)(compiler, {</span><br><span class="line">    publicPath: config.output.publicPath,</span><br><span class="line">    stats: {</span><br><span class="line">        colors: <span class="literal">true</span>,</span><br><span class="line">        chunks: <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册中间件</span></span><br><span class="line">app.use(devMiddleware)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 8888端口，开启服务器</span></span><br><span class="line">app.listen(<span class="number">8888</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Listening at http://localhost:8888'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<p>此时，我们在项目根目录运行下面的命令，开启服务：</p>
<figure class="highlight axapta"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node build/dev-<span class="keyword">server</span>.js</span><br></pre></td></tr></tbody></table></figure>
<p>如果看到下图所示，证明你的服务成功开启了：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325f.jpg" title="开启服务成功" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325f.jpg" title="开启服务成功"></a></p>
<p>接下来打开浏览器，输入：</p>
<figure class="highlight crystal"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/localhost:8888/app</span><span class="regexp">/index/index</span>.html</span><br></pre></td></tr></tbody></table></figure>
<p>回车，如果不出意外，你应该得到一个404，如下图：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325g.jpg" title="404" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325g.jpg" title="404"></a></p>
<p>我们要对我们的 webpack.config.js 配置文件做两处修改：</p>
<p>1、将 config.output.publicPath 修改为 ‘/‘：</p>
<figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">output</span>: {</span><br><span class="line">    <span class="comment">// 输出路径是 myProject/output/static</span></span><br><span class="line">    <span class="attribute">path</span>: path.<span class="function">resolve</span>(__dirname, <span class="string">'../output/static'</span>),</span><br><span class="line">    <span class="attribute">publicPath</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attribute">filename</span>: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">    <span class="attribute">chunkFilename</span>: <span class="string">'[id].[chunkhash].js'</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>
<p>2、将 plugins 中 HtmlWebpackPlugin 中的 filename 修改为 ‘app/index/index.html’</p>
<figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">plugins</span>:<span class="value"> [</span><br><span class="line">    new <span class="function">HtmlWebpackPlugin</span>({</span><br><span class="line">        filename: <span class="string">'app/index/index.html'</span>,</span><br><span class="line">        template: path.<span class="function">resolve</span>(__dirname, <span class="string">'../app/index/index.html'</span>),</span><br><span class="line">        inject: true</span><br><span class="line">    })</span><br><span class="line">]</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>重启服务，再刷新页面，如果看到如下界面，证明你成功了：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325h.jpg" title="成功" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325h.jpg" title="成功"></a></p>
<p>但是这样开发模式下的确是成功了，可是我们直接修改了 webpack.config.js 文件，这就意味着当我们执行 构建命令 的时候，配置变了，那么我们的构建也跟着变了，所以，一个好的方式是，不去修改webpack.config.js文件，我们在build目录下新建一个 webpack.dev.conf.js文件，意思是开发模式下要读取的配置文件，并写入一下内容：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// 引入基本配置</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</span><br><span class="line"></span><br><span class="line">config.output.publicPath = <span class="string">'/'</span>;</span><br><span class="line"></span><br><span class="line">config.plugins = [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">        filename: <span class="string">'app/index/index.html'</span>,</span><br><span class="line">        template: path.resolve(__dirname, <span class="string">'../app/index/index.html'</span>),</span><br><span class="line">        inject: <span class="literal">true</span></span><br><span class="line">    })</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></tbody></table></figure>
<p>这样，我们在dev环境下的配置文件中覆盖了基本配置文件，我们只需要在dev-server.js中将 </p>
<figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">var</span> config = <span class="function"><span class="title">require</span><span class="params">(<span class="string">'./webpack.config'</span>)</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>修改为：</p>
<figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">var</span> config = <span class="function"><span class="title">require</span><span class="params">(<span class="string">'./webpack.dev.conf'</span>)</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>即可，然后，重启服务，刷新浏览器，你应该得到同样的成功结果，而这一次当我们执行构建命令：</p>
<figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --<span class="attribute">display</span>-modules --<span class="attribute">display</span>-chunks --config build/webpack<span class="class">.config</span><span class="class">.js</span></span><br></pre></td></tr></tbody></table></figure>
<p>并不会影响构建输出，因为我们没有直接修改webpack.config.js文件。</p>
<p>现在我们已经使用 webpack-dev-middleware 搭建基本的开发环境了，但是我们并不满足，因为我们每次都要手动去刷新浏览器，所谓的热加载，意思就是说能够追踪我们代码的变化，并自动更新界面，甚至还能保留程序状态。要完成热加载，我们就需要使用另外一个中间件 <em>webpack-hot-middleware</em></p>
<p><em><b>2、webpack-hot-middleware</b></em></p>
<p><a href="https://www.npmjs.com/package/webpack-hot-middleware" target="_blank" rel="external">webpack-hot-middleware</a> 只配合 webpack-dev-middleware 使用，它能给你提供热加载。</p>
<p>它的使用很简单，总共分4步：</p>
<p>1、安装，我们上面已经安装过了<br>2、在 webpack.dev.conf.js 配置文件中添加三个插件，如下：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="comment">// 引入基本配置</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</span><br><span class="line"></span><br><span class="line">config.output.publicPath = <span class="string">'/'</span>;</span><br><span class="line"></span><br><span class="line">config.plugins = [</span><br><span class="line">    <span class="comment">// 添加三个插件</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NoErrorsPlugin(),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">        filename: <span class="string">'app/index/index.html'</span>,</span><br><span class="line">        template: path.resolve(__dirname, <span class="string">'../app/index/index.html'</span>),</span><br><span class="line">        inject: <span class="literal">true</span></span><br><span class="line">    })</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></tbody></table></figure>
<p>3、在 webpack.config.js 文件中入口配置中添加 ‘webpack-hot-middleware/client’，如下：</p>
<figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: [<span class="string">'webpack-hot-middleware/client'</span>, path.<span class="function"><span class="title">resolve</span><span class="params">(__dirname, <span class="string">'../app/index/index.js'</span>)</span></span>],</span><br></pre></td></tr></tbody></table></figure>
<p>4、在 dev-server.js 文件中使用插件</p>
<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入必要的模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.dev.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个express实例</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用webpack并把配置传递过去</span></span><br><span class="line"><span class="keyword">var</span> compiler = webpack(config)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 webpack-dev-middleware 中间件</span></span><br><span class="line"><span class="keyword">var</span> devMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)(compiler, {</span><br><span class="line">    publicPath: config.output.publicPath,</span><br><span class="line">    stats: {</span><br><span class="line">        colors: <span class="literal">true</span>,</span><br><span class="line">        chunks: <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 webpack-hot-middleware 中间件</span></span><br><span class="line"><span class="keyword">var</span> hotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>)(compiler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册中间件</span></span><br><span class="line">app.use(devMiddleware)</span><br><span class="line"><span class="comment">// 注册中间件</span></span><br><span class="line">app.use(hotMiddleware)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 8888端口，开启服务器</span></span><br><span class="line">app.listen(<span class="number">8888</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Listening at http://localhost:8888'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<p>ok，现在重启的服务，然后修改 Favlist.vue 中的页面背景颜色为 ‘#000’：</p>
<figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">    <span class="tag">html</span><span class="rules">{</span><br><span class="line">        <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;</span><br><span class="line">    }</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>然后查看你的浏览器，是不是你还没有刷新就已经得带改变了？</p>
<p>那么这样就完美了吗？还没有，如果你细心，你会注意到，我们上面在第2步中修改了 webpack.config.js 这个基本配置文件，修改了入口配置，如下：</p>
<figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: [<span class="string">'webpack-hot-middleware/client'</span>, path.<span class="function"><span class="title">resolve</span><span class="params">(__dirname, <span class="string">'../app/index/index.js'</span>)</span></span>],</span><br></pre></td></tr></tbody></table></figure>
<p>这也会导致我们之前讨论过的问题，就是会影响构建，所以我们不要直接修改 webpack.config.js 文件，我们还是在 webpack.dev.conf.js 文件中配置，如下：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="comment">// 引入基本配置</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</span><br><span class="line"></span><br><span class="line">config.output.publicPath = <span class="string">'/'</span>;</span><br><span class="line"></span><br><span class="line">config.plugins = [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NoErrorsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">        filename: <span class="string">'app/index/index.html'</span>,</span><br><span class="line">        template: path.resolve(__dirname, <span class="string">'../app/index/index.html'</span>),</span><br><span class="line">        inject: <span class="literal">true</span></span><br><span class="line">    })</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态向入口配置中注入 webpack-hot-middleware/client</span></span><br><span class="line"><span class="keyword">var</span> devClient = <span class="string">'webpack-hot-middleware/client'</span>;</span><br><span class="line"><span class="built_in">Object</span>.keys(config.entry).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">name, i</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> extras = [devClient]</span><br><span class="line">    config.entry[name] = extras.concat(config.entry[name])</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></tbody></table></figure>
<p>但是我们还是要讲 webpack.config.js 文件中的入口配置修改为多入口配置的方式，这个修改不会影响构建，所以无所谓：</p>
<figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">entry</span>: {</span><br><span class="line">    <span class="attribute">index</span>: path.<span class="function">resolve</span>(__dirname, <span class="string">'../app/index/index.js'</span>)</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>
<p>重启你的服务，刷新一下浏览器，然后修改 Favlist.vue 中的背景色为 green：</p>
<figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">    <span class="tag">html</span><span class="rules">{</span><br><span class="line">        <span class="rule"><span class="attribute">background</span>:<span class="value"> green</span></span>;</span><br><span class="line">    }</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>再次查看浏览器，发现可以热加载。但是这样就结束了吗？还没有，不信你修改 index.html 文件，看看会不会热加载，实际上不会，你还是需要手动刷新页面，为了能够当 index.html 文件的改动也能够触发自动刷新，我们还需要做一些工作。</p>
<p><em><b>第一步：在 dev-server.js 文件中监听html文件改变事件，修改后的 dev-server.js 文件如下：</b></em></p>
<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入必要的模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.dev.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个express实例</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用webpack并把配置传递过去</span></span><br><span class="line"><span class="keyword">var</span> compiler = webpack(config)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 webpack-dev-middleware 中间件</span></span><br><span class="line"><span class="keyword">var</span> devMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)(compiler, {</span><br><span class="line">    publicPath: config.output.publicPath,</span><br><span class="line">    stats: {</span><br><span class="line">        colors: <span class="literal">true</span>,</span><br><span class="line">        chunks: <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>)(compiler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack插件，监听html文件改变事件</span></span><br><span class="line">compiler.plugin(<span class="string">'compilation'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">compilation</span>) </span>{</span><br><span class="line">    compilation.plugin(<span class="string">'html-webpack-plugin-after-emit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data, cb</span>) </span>{</span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        hotMiddleware.publish({ action: <span class="string">'reload'</span> })</span><br><span class="line">        cb()</span><br><span class="line">    })</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册中间件</span></span><br><span class="line">app.use(devMiddleware)</span><br><span class="line"><span class="comment">// 注册中间件</span></span><br><span class="line">app.use(hotMiddleware)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 8888端口，开启服务器</span></span><br><span class="line">app.listen(<span class="number">8888</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Listening at http://localhost:8888'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<p>从上面的代码中可以看到，我们增加了如下代码：</p>
<figure class="highlight actionscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack插件，监听html文件改变事件</span></span><br><span class="line">compiler.plugin(<span class="string">'compilation'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(compilation)</span> </span>{</span><br><span class="line">    compilation.plugin(<span class="string">'html-webpack-plugin-after-emit'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(data, cb)</span> </span>{</span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        hotMiddleware.publish({ action: <span class="string">'reload'</span> })</span><br><span class="line">        cb()</span><br><span class="line">    })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<p>这段代码可能你看不懂，因为这涉及到webpack插件的编写，读者可以参阅下面的连接：</p>
<p><a href="https://github.com/webpack/docs/wiki/plugins" target="_blank" rel="external">webpack 插件doc1</a></p>
<p><a href="https://github.com/webpack/docs/wiki/How-to-write-a-plugin" target="_blank" rel="external">webpack 插件doc2</a></p>
<p>在这段代码中，我们监听了 ‘html-webpack-plugin-after-emit’ 事件，那么这个事件是从哪里发射的呢？我们通过名字可知，这个事件应该和html-webpack-plugin这个插件有关，在npm搜索 <a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="external">html-webpack-plugin</a> 插件，在页面最底部我们可以发现如下图：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325i.jpg" title="html-webpack-plugin可以发射事件" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325i.jpg" title="html-webpack-plugin可以发射事件"></a></p>
<p>我们可以看到，html-webpack-plugin 这个插件的确提供了几个可选的事件，下面也提供了使用方法，这样，我们就能够监听到html文件的变化，然后我们使用下面的代码发布一个事件：</p>
<figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">hotMiddleware</span><span class="class">.publish</span>({ <span class="attribute">action</span>: <span class="string">'reload'</span> })</span><br></pre></td></tr></tbody></table></figure>
<p><em><b>第二步：修改 webpack.dev.conf.js 文件如下：</b></em></p>
<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="comment">// 引入基本配置</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</span><br><span class="line"></span><br><span class="line">config.output.publicPath = <span class="string">'/'</span>;</span><br><span class="line"></span><br><span class="line">config.plugins = [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NoErrorsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">        filename: <span class="string">'app/index/index.html'</span>,</span><br><span class="line">        template: path.resolve(__dirname, <span class="string">'../app/index/index.html'</span>),</span><br><span class="line">        inject: <span class="literal">true</span></span><br><span class="line">    })</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// var devClient = 'webpack-hot-middleware/client';</span></span><br><span class="line"><span class="keyword">var</span> devClient = <span class="string">'./build/dev-client'</span>;</span><br><span class="line"><span class="built_in">Object</span>.keys(config.entry).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">name, i</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> extras = [devClient]</span><br><span class="line">    config.entry[name] = extras.concat(config.entry[name])</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></tbody></table></figure>
<p>我们修改了devClient变量，将 ‘webpack-hot-middleware/client’ 替换成 ‘./build/dev-client’，最终会导致，我们入口配置会变成下面这样：</p>
<figure class="highlight dust"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">entry: </span><span class="expression">{</span><br><span class="line">    <span class="variable">index</span>: [</span><br><span class="line">        '<span class="variable">.</span><span class="end-block">/build</span><span class="end-block">/dev-client</span>',</span><br><span class="line">        <span class="variable">path.resolve</span>(__<span class="variable">dirname</span>, '<span class="variable">..</span><span class="end-block">/app</span><span class="end-block">/index</span><span class="end-block">/index.js</span>')</span><br><span class="line">    ]</span><br><span class="line">}</span><span class="xml">,</span></span><br></pre></td></tr></tbody></table></figure>
<p><em><b>第三步：新建 build/dev-client.js 文件，并编辑如下内容：</b></em></p>
<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hotClient = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware/client'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件，当 event.action === 'reload' 时执行页面刷新</span></span><br><span class="line">hotClient.subscribe(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (event.action === <span class="string">'reload'</span>) {</span><br><span class="line">        <span class="built_in">window</span>.location.reload()</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<p>这里我们除了引入 ‘webpack-hot-middleware/client’ 之外订阅了一个事件，当 event.action === ‘reload’ 时触发，还记得我们在 dev-server.js 中发布的事件吗：</p>
<figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">hotMiddleware</span><span class="class">.publish</span>({ <span class="attribute">action</span>: <span class="string">'reload'</span> })</span><br></pre></td></tr></tbody></table></figure>
<p>这样，当我们的html文件改变后，就可以监听的到，最终会执行页面刷新，而不需要我们手动刷新，现在重启服务，去尝试能否对html文件热加载吧。答案是yes。<br>好了，开发环境终于搞定了，下面我们再来谈一谈生产环境，也就是构建输出，我们现在可以执行一下构建命令，看看输出的内容是什么，为了不必每次都要输入下面这条长命令：</p>
<figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --<span class="attribute">display</span>-modules --<span class="attribute">display</span>-chunks --config build/webpack<span class="class">.config</span><span class="class">.js</span></span><br></pre></td></tr></tbody></table></figure>
<p>我们在 package.js 文件中添加 “scripts” 项，如下图：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325m.jpg" title="npm" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325m.jpg" title="npm"></a></p>
<p>这样，我们就可以通过执行下面命令来进行构建，同时我们还增加了一条开启开发服务器的命令：</p>
<figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建</span></span><br><span class="line">npm <span class="keyword">run</span> build</span><br><span class="line"><span class="comment">// 开启开发服务器</span></span><br><span class="line">npm <span class="keyword">run</span> dev</span><br></pre></td></tr></tbody></table></figure>
<p>回过头来，我们执行构建命令： npm run build，查看输出内容，如下图：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325n.jpg" title="输出内容" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325n.jpg" title="输出内容"></a></p>
<p>现在我们只有一个js文件输出了，并没有css文件输出，在生产环境，我们希望css文件生成单独的文件，所以我们要使用 extract-text-webpack-plugin 插件，安装：</p>
<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> <span class="keyword">extract</span>-<span class="built_in">text</span>-webpack-<span class="keyword">plugin</span> <span class="comment">--save-dev</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>然后在build目录下新建 webpack.prod.conf.js 文件，顾名思义，这个使我们区别于开发环境，用于生产环境的配置文件，并编辑一下内容：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="comment">// 引入基本配置</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</span><br><span class="line"></span><br><span class="line">config.vue = {</span><br><span class="line">    loaders: {</span><br><span class="line">        css: ExtractTextPlugin.extract(<span class="string">"css"</span>)</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">config.plugins = [</span><br><span class="line">    <span class="comment">// 提取css为单文件</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"../[name].[contenthash].css"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">        filename: <span class="string">'../index.html'</span>,</span><br><span class="line">        template: path.resolve(__dirname, <span class="string">'../app/index/index.html'</span>),</span><br><span class="line">        inject: <span class="literal">true</span></span><br><span class="line">    })</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></tbody></table></figure>
<p>上面的代码中，我们覆盖了 webpack.config.js 配置文件的 config.plugins 项，并且添加了 config.vue 项，补血药知道为什么，就是这么用的，如果一定要知道为什么也可以，这需要你多去了解vue以及vue-loader的工作原理，这里有连接<a href="http://vuejs.github.io/vue-loader/configurations/extract-css.html" target="_blank" rel="external">点击这里</a><br>然后修改 package.json 文件中的 script 项为如下：</p>
<figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: {</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --display-modules --display-chunks --config build/webpack.prod.conf.js"</span>,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"node ./build/dev-server.js"</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>
<p>我们使用 webpack.prod.conf.js 为配置去构建，接下来执行：</p>
<figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="command">run</span> build</span><br></pre></td></tr></tbody></table></figure>
<p>查看你的输出内容，如下图，css文件未提取出来了：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325l.jpg" title="css文件被提取" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325l.jpg" title="css文件被提取"></a></p>
<p>另外我们还可以添加如下插件在我们的 webpack.prod.conf.js 文件中，作为生产环境使用：</p>
<figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">config.plugins = [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin({</span><br><span class="line">        <span class="string">'process.env'</span>: {</span><br><span class="line">            NODE_ENV: <span class="string">'"production"'</span></span><br><span class="line">        }</span><br><span class="line">    }),</span><br><span class="line">    <span class="comment">// 压缩代码</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin({</span><br><span class="line">        compress: {</span><br><span class="line">            warnings: <span class="keyword">false</span></span><br><span class="line">        }</span><br><span class="line">    }),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</span><br><span class="line">    <span class="comment">// 提取css为单文件</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"../[name].[contenthash].css"</span>),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">        filename: <span class="string">'../index.html'</span>,</span><br><span class="line">        template: path.resolve(__dirname, <span class="string">'../app/index/index.html'</span>),</span><br><span class="line">        <span class="keyword">inject</span>: <span class="keyword">true</span></span><br><span class="line">    })</span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure>
<p>大家可以搜索这些插件，了解他的作用，这篇文章要介绍的太多，所以我一一讲解了。</p>
<p>到这里实际上搭建的已经差不多了，唯一要做的就是完善，比如公共模块的提取，如何加载图片，对于第一个问题，如何提取公共模块，我们可以使用 CommonsChunkPlugin 插件，在 webpack.prod.conf.js 文件中添加如下插件：</p>
<figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">new</span> <span class="tag">webpack</span><span class="class">.optimize</span><span class="class">.CommonsChunkPlugin</span>({</span><br><span class="line">    <span class="attribute">name</span>: <span class="string">'vendors'</span>,</span><br><span class="line">    <span class="attribute">filename</span>: <span class="string">'vendors.js'</span>,</span><br><span class="line">}),</span><br></pre></td></tr></tbody></table></figure>
<p>然后在 webpack.config.js 文件中配置入口文件：</p>
<figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">entry</span>: {</span><br><span class="line">    <span class="attribute">index</span>: path.<span class="function">resolve</span>(__dirname, <span class="string">'../app/index/index.js'</span>),</span><br><span class="line">    <span class="attribute">vendors</span>: [</span><br><span class="line">        <span class="string">'Vue'</span></span><br><span class="line">    ]</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>
<p>上面代码的意思是，我们把Vue.js当做公共模块单独打包，你可以在这个数组中增加其他模块，一起作为公共模块打包成一个文件，我们执行构建命令，然后查看输出，如下图，成功提取：</p>
<p><a href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325u.jpg" title="提取公共模块" rel="fancy-group" class="fancy-ctn fancybox"><img src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/20160325u.jpg" title="提取公共模块"></a></p>
<p>对于加载图片的问题，我们知道，webpack的哲学是一切皆是模块，然后通过相应的loader去加载，所以加载图片，我们就需要使用到 url-loader，在webpack.config.js 文件中添加一个loader配置：</p>
<figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">loaders: [</span><br><span class="line">    <span class="comment">// 使用vue-loader 加载 .vue 结尾的文件</span></span><br><span class="line">    {</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>, </span><br><span class="line">        loader: <span class="string">'vue'</span>   </span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel?presets=es2015'</span>,</span><br><span class="line">        <span class="keyword">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 加载图片</span></span><br><span class="line">    {</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|svg)$/</span>,</span><br><span class="line">        loader: <span class="string">'url'</span>,</span><br><span class="line">        query: {</span><br><span class="line">            limit: <span class="number">10000</span>,</span><br><span class="line">            name: <span class="string">'[name].[ext]?[hash:7]'</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>
<p>这样，当我们的css样式表文件中使用 url(xxxx.png)或者js中去require(‘xxxx.png’)的时候，webpack就知道如何处理，另外url-loader的一个好处就是，以上面的配置来说，当我们的图片大小小于10000字节的时候，webpack会把图片转换成base64格式插入到代码中，从而减少http请求，另外，我们在这里谈到的任何一个loader都可以在npm中查找到，读者可以查询更多的loader了解并使用。</p>

      
    </div>
    
  </div>
  
    
<nav id="article-nav">
  
    <a href="http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/" id="article-nav-newer" class="article-nav-link-wrap" target="_blank">
      <strong class="article-nav-caption">&lt;</strong>
      <div class="article-nav-title">
        
          JavaScript实现MVVM之我就是想监测一个普通对象的变化
        
      </div>
    </a>
  
  
    <a href="http://hcysun.me/2016/02/21/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%9C%A8%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/" id="article-nav-older" class="article-nav-link-wrap" target="_blank">
      <div class="article-nav-title">策略模式在表单验证中的应用</div>
      <strong class="article-nav-caption">&gt;</strong>
    </a>
  
</nav>

  
</article>


<div class="share">
	<!-- JiaThis Button BEGIN -->
	<div class="jiathis_style">
		<span class="jiathis_txt">分享到：</span>
		<a class="jiathis_button_tsina" title="分享到微博"><span class="jiathis_txt jtico jtico_tsina"></span></a>
		<a class="jiathis_button_cqq" title="分享到QQ好友"><span class="jiathis_txt jtico jtico_cqq"></span></a>
		<a class="jiathis_button_douban" title="分享到豆瓣"><span class="jiathis_txt jtico jtico_douban"></span></a>
		<a class="jiathis_button_weixin" title="分享到微信"><span class="jiathis_txt jtico jtico_weixin"></span></a>
		<a class="jiathis_button_tumblr" title="分享到Tumblr"><span class="jiathis_txt jtico jtico_tumblr"></span></a>
		<a href="http://www.jiathis.com/share" class="jiathis jiathis_txt jtico jtico_jiathis" target="_blank"></a>
	</div>
	<script type="text/javascript" src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/jia.js" charset="utf-8"></script><script type="text/javascript" src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/plugin.client.js" charset="utf-8"></script>
	<!-- JiaThis Button END -->
</div>



<div class="duoshuo">
	<!-- 多说评论框 start -->
	<div class="ds-thread" data-thread-key="基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用)" data-title="基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用)" data-url="hcysun.me/2016/03/25/基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用)/" id="ds-thread"><div id="ds-waiting"></div></div>
	<!-- 多说评论框 end -->
	<!-- 多说公共JS代码 start (一个网页只需插入一次) -->
	<script type="text/javascript">
	var duoshuoQuery = {short_name:"true"};
	(function() {
		var ds = document.createElement('script');
		ds.type = 'text/javascript';ds.async = true;
		ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
		ds.charset = 'UTF-8';
		(document.getElementsByTagName('head')[0] 
		 || document.getElementsByTagName('body')[0]).appendChild(ds);
	})();
	</script>
	<!-- 多说公共JS代码 end -->
</div>




</div>
      <footer id="footer">
  <div class="outer">
    <div id="footer-info">
    	<div class="footer-left">
    		© 2016 HcySunYang
    	</div>
      	<div class="footer-right">
      		<a href="http://hexo.io/" target="_blank">Hexo</a>  Theme <a href="https://github.com/litten/hexo-theme-yilia" target="_blank">Yilia</a> by Litten
      	</div>
    </div>
  </div>
</footer>
    </div>
    
  <link rel="stylesheet" href="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/jquery.fancybox.css" type="text/css">


<script>
	var yiliaConfig = {
		fancybox: true,
		mathjax: true,
		animate: true,
		isHome: false,
		isPost: true,
		isArchive: false,
		isTag: false,
		isCategory: false,
		open_in_new: true
	}
</script>
<script src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/require-2.1.6,jquery-1.9.1.min.js" type="text/javascript"></script>
<script src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/main.js" type="text/javascript"></script>






<script type="text/x-mathjax-config;executed=true">
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"]  ],
        processEscapes: true,
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
    }
});

MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i=0; i < all.length; i += 1) {
        all[i].SourceElement().parentNode.className += ' has-jax';                 
    }       
});
</script>

<script type="text/javascript" src="./基于webpack和vue.js搭建的H5端框架(其实主要用于Hybrid开发H5端框架，但是依然能够作为纯web端使用) _ HcySunYang&#39;s Blog_files/MathJax.js">
</script>


  </div>

</body></html>