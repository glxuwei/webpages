<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0044)http://www.cnblogs.com/sunshq/p/5073301.html -->
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Webpack打包进阶 - togoog - 博客园</title>
<link type="text/css" rel="stylesheet" href="./Webpack打包进阶 - togoog - 博客园_files/blog-common.css">
<link id="MainCss" type="text/css" rel="stylesheet" href="./Webpack打包进阶 - togoog - 博客园_files/bundle-iMetro.css">
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/sunshq/rss">
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/sunshq/rsd.xml">
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/sunshq/wlwmanifest.xml">
<script src="./Webpack打包进阶 - togoog - 博客园_files/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'sunshq', cb_enable_mathjax=false;var isLogined=false;</script>
<script src="./Webpack打包进阶 - togoog - 博客园_files/blog-common.js" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/sunshq/"><img id="blogLogo" src="./Webpack打包进阶 - togoog - 博客园_files/logo.gif" alt="返回主页"></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/sunshq/">togoog</a></h1>
<h2></h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/sunshq/">首页</a></li>
<li><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://msg.cnblogs.com/send/togoog">联系</a></li>
<li><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/sunshq/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/sunshq/rss"><img src="//www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			
<span id="stats_post_count">随笔 - 194&nbsp; </span>
<span id="stats_article_count">文章 - 0&nbsp; </span>
<span id="stats-comment_count">评论 - 4</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/sunshq/p/5073301.html">Webpack打包进阶</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><h2 id="arch0">说在前面</h2>
<p>由于使用了React直出，页面各项性能指标使人悦目。本篇将深入探讨目前PC部落所采用webpack打包优化策略，以及探讨PC部落并未使用的 webpack Code Splitting 代码分包、异步模块加载特性。看看它们又是如何对PC部落的性能起到进一步的催化作用。</p>
<h2 id="arch2">为什么要使用webpack</h2>
<p>如果你曾经使用过 Broserify, RequireJS 或类似的打包工具，并注重：代码分包、异步加载、静态资源打包（图片/CSS）。那么 webpack 就是帮你构建项目的利器！简单一句话：在webpack中，所有资源都被当作是模块，js可以引用 css , css 中可以嵌入图片 dataUrl。</p>
<h3 id="webpack-1">webpack特性</h3>
<p>对应不同文件类型的资源，webpack有对应的模块 loader ，比如对于 less， 使用的是&nbsp;<code>less-loader</code>，你可以在这里找到&nbsp;<a href="http://webpack.github.io/docs/list-of-loaders.html">所有loader</a>. webpack 具有requireJS 和 browserify 的功能，但仍有自己的新特性： 1、对 CommonJS、AMD、ES6的语法做了兼容； 2、对js、css、图片等资源文件都支持打包； 3、串联式模块加载器以及插件机制让其具有更好的灵活性和拓展性，例如对 coffeeScript、ES6的支持； 4、有独立的配置文件 webpack.config.js; 5、可以将代码切割成不同 chunk，实现按需加载，降低了初始化时间； 6、支持 SourceUrls 和 SourceMaps，易于调试； 7、具有强大的 Plugin 接口，大多是内部插件，使用起来比较灵活； 8、webpack 使用异步 IO 并具有多级缓存，使得 webpack 在增量编译上更快！</p>
<h3 id="pcgruntwebpack">为什么混用Grunt和webpack</h3>
<p>自React诞生以来，耳熟能详的是 React+webpack 开发大法，而且在大多数 React 网络教程中也很少提及同时采用了 Grunt 联合构建项目。</p>
<p>Grunt 可以对整个项目文件做复制、删除、合并、压缩等等。而Webpack 的优势在于对静态文件（js/jsx/coffeeScript/css/less/sass/iamges）按不同模块加载（包括按需加载）——这正是我们对webpack感兴趣的地方，各个模块组建化（可以将一个组建的图片、样式、脚本、页面放在同一个文件夹中）。所以，在项目中二者分工不同，各司其职。</p>
<p><strong>注：</strong>使用 gulp 替换 grunt 当然也是没有问题。</p>
<h1 id="webpack-2">webpack配置</h1>
<p>webpack 有多种配置方式，由于PC部落中静态资源文件较多，使用配置文件进行打包会方便很多。</p>
<p>通常情况下，如果我们只使用 webpack 构建项目，那么配置 webpack.config.js 即可。由于在PC部落中使用了 grunt，并在 grunt 组合任务中调用 webpack 任务，因此需要在 grunt 的任务配置中添加 webpack.js（使用了<code>load-grunt-config</code>插件） 进行配置。</p>
<h5 id="section-1">配置总览</h5>
<pre><code class="hljs javascript"><span class="hljs-keyword">var taskConfig = {
    dev: {
        entry: {    <span class="hljs-comment">// 入口文件，考虑到多页面资源缓存，我们打成多个包
            <span class="hljs-string">"index": path.resolve(config.srcPath, <span class="hljs-string">"pages/index/index.jsx"),
            <span class="hljs-string">"detail": path.resolve(config.srcPath, <span class="hljs-string">"pages/detail/detail.jsx"),
            ...
        },
        resolve: {  <span class="hljs-comment">// 请求重定向，显示指出依赖查找路径
            alias: {
                img: path.resolve(config.srcPath + <span class="hljs-string">'img'),
                comps: path.resolve(config.srcPath + <span class="hljs-string">'pages/components')
                ...
            }
        },
        output: {   <span class="hljs-comment">// 输出文件
            path: config.devPath + <span class="hljs-string">'/js',                               <span class="hljs-comment">// 文件绝对路径
            filename: <span class="hljs-string">"[name].min.js",                                  <span class="hljs-comment">// 输出文件名
            publicPath: <span class="hljs-string">"http://s.url.cn/qqun/xiaoqu/buluo/p/js/",      <span class="hljs-comment">// 公共访问路径，替换CDN
            chunkFilename: <span class="hljs-string">"[name].chunk.min.js"                        <span class="hljs-comment">// 异步加载时需要被打包的文件名
        },
        <span class="hljs-built_in">module: {   <span class="hljs-comment">// 各类文件 loader
            noParse: [],            <span class="hljs-comment">// 忽略解析的文件
            preLoaders: [{          <span class="hljs-comment">// 预加载的模块
                test: <span class="hljs-regexp">/\.jsx$/,
                exclude: <span class="hljs-regexp">/node_modules/,
                loader: <span class="hljs-string">'jsxhint-loader'
            }],
            loaders: [{             <span class="hljs-comment">// 各式加载器
                test: <span class="hljs-regexp">/\.jsx$/,
                loader: <span class="hljs-string">'jsx-loader',
                include: path.resolve(config.srcPath)
            }, {
                test: <span class="hljs-regexp">/\.less$/,
                <span class="hljs-comment">// 使用“！”链式loader，从右向左依次执行
                loader: ExtractTextPlugin.extract(<span class="hljs-string">"style-loader", <span class="hljs-string">"css-loader!less-loader"),
                include: path.resolve(config.srcPath)
            }, {
                test: <span class="hljs-regexp">/\.(jpe?g|png|gif|svg)$/i,
                <span class="hljs-comment">// inline base64url for &lt;=1500 images
                loader: <span class="hljs-string">'url-loader?limit=1500&amp;name=images/[name].[hash].[ext]',    
                include: path.resolve(config.srcPath)
            }]
        },
        externals: {    <span class="hljs-comment">// 指定采用外部 CDN 依赖的资源，不被webpack打包
            <span class="hljs-string">"react": <span class="hljs-string">"React",
            <span class="hljs-string">"react-dom": <span class="hljs-string">"ReactDOM"
        },
        plugins: [
            ...
            <span class="hljs-comment">// 公共模块独立打包配置
            <span class="hljs-keyword">new CommonsChunkPlugin(<span class="hljs-string">"common", <span class="hljs-string">"common.min.js", [<span class="hljs-string">"index", <span class="hljs-string">"detail", <span class="hljs-string">"barindex", <span class="hljs-string">"search"]),
            <span class="hljs-comment">// 独立打包css文件以外链形式加载
            <span class="hljs-keyword">new ExtractTextPlugin(<span class="hljs-string">"../css/[name].min.css")
        ],
        watch: <span class="hljs-literal">true,
        keepalive: <span class="hljs-literal">true,
        lessLoader: {
            lessPlugins: [
                <span class="hljs-keyword">new LessPluginAutoPrefix()
            ]
        }
    },
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<h2 id="arch15">webpack打包优化</h2>
<h3 id="section-2">1、请求重定向</h3>
<p><code>resolve.alias</code>&nbsp;是webpack 的一个配置项，它的作用是把用户的一个请求重定向到另一个路径。 比如：</p>
<pre><code class="hljs javascript">resolve: {  <span class="hljs-comment">// 显示指出依赖查找路径
    alias: {
        comps: <span class="hljs-string">'src/pages/components'
    }
}
</span></span></code></pre>
<p>这样我们在要打包的脚本中的使用&nbsp;<code>require('comps/Loading.jsx');</code>&nbsp;其实就等价于<code>require('src/pages/components/Loading.jsx')</code>。这犹如《高性能javascript》中给查询压力较大的对象给了一个别名，通过使用别名可以将本例减少几乎一半的时间。</p>
<h3 id="section-3">2、忽略对已知文件的解析</h3>
<p><code>module.noParse</code>，如果你<strong>确定一个模块中没有其它新的依赖</strong>，就可以配置这项，webpack 将不再扫描这个文件中的依赖。 比如我们在入口文件&nbsp;<code>entry.js</code>&nbsp;中检测到对资源<code>src/pages/components/ueditor.min.js</code>资源的请求，如果我们配置：</p>
<pre><code class="hljs ruby"><span class="hljs-class"><span class="hljs-keyword">module: {
    <span class="hljs-symbol">noParse: [<span class="hljs-regexp">/ueditor/]
}
</span></span></span></span></code></pre>
<p><code>noParse</code>规则中的<code>/ueditor/</code>一条生效，所以 webpack 直接把依赖打包进了&nbsp;<code>entry.js</code>。增加这样的配置会让 webpack 编译时间更短。</p>
<h3 id="cdn">3、使用公用CDN</h3>
<p>考虑到web上有很多的公用 CDN 服务，那么我们可以将&nbsp;<code>react</code>&nbsp;从 bundle 中分离出来，进而不会被 webpack 打包， 作为外部依赖引用 CDN 。 方法是使用&nbsp;<code>externals</code>&nbsp;声明一个外部依赖。 如：</p>
<pre><code class="hljs javascript"><span class="hljs-built_in">module:{
    externals: {
        <span class="hljs-comment">// 方式一：申明为外部依赖并指定别名
        <span class="hljs-string">"react": <span class="hljs-string">"React",
        <span class="hljs-string">"react-dom": <span class="hljs-string">"ReactDOM"
        <span class="hljs-comment">// 方式二：true 为外部依赖，false 则不是
        a: <span class="hljs-literal">false,   <span class="hljs-comment">// a is not external
        b: <span class="hljs-literal">true     <span class="hljs-comment">// b is external
    },
}
</span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p>并在 HTML 代码中加上一行</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">script <span class="hljs-attribute">src=<span class="hljs-value">"//cdn.bootcss.com/react/0.14.2/react.js"&gt;<span class="javascript">
&lt;script src=<span class="hljs-string">"//cdn.bootcss.com/react/0.14.2/react-dom.js"&gt;
</span></span></span></span></span></span></code></pre>
<p>这样我们在js中引入<code>React = require('react')</code>&nbsp;， webpack 就不会把 react 打包进来而直接引用CDN，这样做可以让 webpack 编译时间缩减一大半！</p>
<h2 id="arch30">系列插件</h2>
<h3 id="commonschunkplugin">CommonsChunkPlugin</h3>
<p>开发中需要将<strong>多个页面的公用模块独立打包</strong>，从而可以利用浏览器缓存机制来提高页面加载效率，减少页面初次加载时间，只有当某功能被用到时才去动态加载。这就要使用到 webpack 中的 CommonsChunkPlugin 插件。</p>
<h5 id="section-5">使用：</h5>
<pre><code class="hljs php"><span class="hljs-keyword">var CommonsChunkPlugin = <span class="hljs-keyword">require(<span class="hljs-string">"webpack/lib/optimize/CommonsChunkPlugin");
module.exports = {
  ...
  <span class="hljs-comment">/*
   * <span class="hljs-doctag">@param 1  将公共模块提取，生成名为 common 的chunk
   * <span class="hljs-doctag">@param 2  最终生成的公共模块的 js 文件名
   * <span class="hljs-doctag">@param 3  公共模块提取的资源列表
   */
  <span class="hljs-keyword">new CommonsChunkPlugin(<span class="hljs-string">"common", <span class="hljs-string">"common.min.js", [<span class="hljs-string">"index", <span class="hljs-string">"detail", <span class="hljs-string">"barindex", <span class="hljs-string">"search"])
}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<h3 id="extracttextplugin">ExtractTextPlugin</h3>
<p>webpack 中编写js文件时，可以通过&nbsp;<code>require</code>&nbsp;的方式引入其他静态资源，可通过loader对文件自动解析并打包文件。 通常我们会将 js 文件打包合并，css 文件在页面header中嵌入 style 的方式载入页面。但在<strong>开发</strong>过程中我们并不想将样式打包在脚本中（最好可以独立生成css文件，以外链形式加载）。 ExtractTextPlugin 插件可以帮我们达到这样的效果。</p>
<h5 id="section-6">安装：</h5>
<p><code>npm install extract-text-webpack-plugin –save-dev</code></p>
<h5 id="section-7">使用：</h5>
<pre><code class="hljs javascript"><span class="hljs-keyword">var ExtractTextPlugin = <span class="hljs-built_in">require(<span class="hljs-string">"extract-text-webpack-plugin");
<span class="hljs-built_in">module.exports = {
  ...
  plugins: [ <span class="hljs-keyword">new ExtractTextPlugin(<span class="hljs-string">"../css/[name].min.css") ]
}
</span></span></span></span></span></span></code></pre>
<p>这样配置就可以将 js 中的 css 文件提取，并以指定的文件名来进行加载。</p>
<h3 id="lesspluginautoprefix">LessPluginAutoPrefix</h3>
<p>顾名思义，就是autoPrefix插件，用来补全CSS的厂商前缀（-webkit-, -moz-, -o-）;</p>
<h5 id="section-8">使用：</h5>
<pre><code class="hljs javascript"><span class="hljs-keyword">var LessPluginAutoPrefix = <span class="hljs-built_in">require(<span class="hljs-string">'less-plugin-autoprefix');
<span class="hljs-keyword">var taskConfig = {
    dev: {
        ...
        lessLoader: {
            lessPlugins: [
                <span class="hljs-keyword">new LessPluginAutoPrefix()
            ]
        }
    }
</span></span></span></span></span></code></pre>
<h2 id="arch46">Code Splitting</h2>
<p>对于一个大型的web app，我们把所有的 js 文件合成一个显然是非常低效的，因为有些 js 模块并不是我们当前页面所需要的（这会大大增加页面首屏渲染时间）。Webpack 就是这样一种神器，为您提供优质的代码分包服务，从此“妈妈再也不用担心页面按需加载的问题了”！</p>
<h3 id="require">方式一：require</h3>
<p><code>require(dependencies, callback)</code>&nbsp;遵从 AMD 规范定义的<strong>异步</strong>方法。使用该方法时，所有的依赖被<strong>异步加载并从左至右立即执行</strong>，依赖都被执行后，执行<code>callback</code>。</p>
<h3 id="requireensure">方式二：require.ensure</h3>
<p><code>require.ensure(dependencies, callback)</code>&nbsp;遵从 CommonJS 规范，在需要的时候才下载依赖的模块。当所有的依赖都被加载完毕，便执行&nbsp;<code>callback</code>（注：require作为callback的参数）。 细心的同学可能还记得&nbsp;<code>output</code>&nbsp;配置中有</p>
<pre><code class="hljs css"><span class="hljs-rule"><span class="hljs-attribute">output:<span class="hljs-value"> {
    ...
    chunkFilename: <span class="hljs-string">"[name].chunk.min.js"
}
</span></span></span></span></code></pre>
<p><code>chunk</code>&nbsp;到底是什么？&nbsp;<code>chunk</code>&nbsp;又是怎么生成的呢？ 为了实现部分资源的异步加载，有些资源是不打包到入口文件里面的。于是我们使用&nbsp;<code>require.ensure</code>&nbsp;作为代码分割的标识。<code>require.ensure</code>&nbsp;会创建一个 chunk ，且可以指定该 chunk 的名称（注：如果这个chunk已经存在了，则将本次依赖的模块合并到已经存在的chunk中），最后这个 chunk 在 webpack 构建时会单独生成一个文件。 比如我们要根据当前运行平台，加载两个不同的UI组建，那么：</p>
<pre><code class="hljs javascript"><span class="hljs-keyword">var platform = Util.getPlatform();
<span class="hljs-keyword">if( platform === <span class="hljs-string">"ios"){
    <span class="hljs-built_in">require.ensure([<span class="hljs-string">'./components/dialog'], <span class="hljs-function"><span class="hljs-keyword">function(<span class="hljs-params">require){
        ...
    }, <span class="hljs-string">'popup'); <span class="hljs-comment">// 最后一个参数是 chunk 名
}
<span class="hljs-keyword">if( platform === <span class="hljs-string">"android"){
    <span class="hljs-built_in">require.ensure([<span class="hljs-string">"./components/toast"], <span class="hljs-function"><span class="hljs-keyword">function(<span class="hljs-params">require){
        ...
    }, <span class="hljs-string">'popup');
}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p>通过webpack打包之后，会生成一个&nbsp;<code>popup.chunk.min.js</code>&nbsp;文件。在不同的运行平台上，我们会发现 popup.chuck.min.js 文件的内容是相同的（因为我们配置的 chunk 名都是 popup）。 如果我们想让按需加载的模块再次拆分成 dialog 和 toast，两个文件，仅仅需要将&nbsp;<code>require.ensure</code>&nbsp;中配置的chunk 名改不同，即可在代码被执行时加载单一文件。</p>
<h3 id="section-9">注意点：</h3>
<p>1、<code>require</code>&nbsp;：加载模块，并立即执行； 2、<code>require.ensure</code>：仅仅加载模块，但不会执行； 3、不用在 html 中显示调用生成的 chunk 文件，按需加载时会自动调用； 4、不用担心第三方库被反复打包的问题，因为我们已经使用&nbsp;<code>CommonsChunkPlugin</code>&nbsp;对公共部分进行提取。</p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info"><div id="green_channel">
        <a href="javascript:void(0);" id="green_channel_digg" onclick="DiggIt(5073301,cb_blogId,1);green_channel_success(this,&#39;谢谢推荐！&#39;);">好文要顶</a>
            <a id="green_channel_follow" onclick="follow(&#39;a50899f4-8dbf-de11-ba8f-001cf0cd104b&#39;);" href="javascript:void(0);">关注我</a>
    <a id="green_channel_favorite" onclick="AddToWz(cb_entryId);return false;" href="javascript:void(0);">收藏该文</a>
    <a id="green_channel_weibo" href="javascript:void(0);" title="分享至新浪微博" onclick="ShareToTsina()"><img src="./Webpack打包进阶 - togoog - 博客园_files/icon_weibo_24.png" alt=""></a>
    <a id="green_channel_wechat" href="javascript:void(0);" title="分享至微信" onclick="shareOnWechat()"><img src="./Webpack打包进阶 - togoog - 博客园_files/wechat.png" alt=""></a>
</div>
<div id="author_profile">
    <div id="author_profile_info" class="author_profile_info">
            <a href="http://home.cnblogs.com/u/sunshq/" target="_blank"><img src="./Webpack打包进阶 - togoog - 博客园_files/sample_face.gif" class="author_avatar" alt=""></a>
        <div id="author_profile_detail" class="author_profile_info">
            <a href="http://home.cnblogs.com/u/sunshq/">togoog</a><br>
            <a href="http://home.cnblogs.com/u/sunshq/followees">关注 - 0</a><br>
            <a href="http://home.cnblogs.com/u/sunshq/followers">粉丝 - 9</a>
        </div>
    </div>
    <div class="clear"></div>
    <div id="author_profile_honor"></div>
    <div id="author_profile_follow">
                <a href="javascript:void(0);" onclick="follow(&#39;a50899f4-8dbf-de11-ba8f-001cf0cd104b&#39;);return false;">+加关注</a>
    </div>
</div>
<div id="div_digg">
    <div class="diggit" onclick="votePost(5073301,&#39;Digg&#39;)">
        <span class="diggnum" id="digg_count">0</span>
    </div>
    <div class="buryit" onclick="votePost(5073301,&#39;Bury&#39;)">
        <span class="burynum" id="bury_count">0</span>
    </div>
    <div class="clear"></div>
    <div class="diggword" id="digg_tips">
    </div>
</div>
</div>
<div class="clear"></div>
<div id="post_next_prev"><a href="http://www.cnblogs.com/sunshq/p/5070211.html" class="p_n_p_prefix">« </a> 上一篇：<a href="http://www.cnblogs.com/sunshq/p/5070211.html" title="发布于2015-12-23 15:59">html5代码,获取地理位置</a><br><a href="http://www.cnblogs.com/sunshq/p/5073344.html" class="p_n_p_prefix">» </a> 下一篇：<a href="http://www.cnblogs.com/sunshq/p/5073344.html" title="发布于2015-12-24 15:49">JS 特殊字符的魅力</a><br></div>
</div>


		</div>
		<div class="postDesc">posted @ <span id="post-date">2015-12-24 15:40</span> <a href="http://www.cnblogs.com/sunshq/">togoog</a> 阅读(<span id="post_view_count">2166</span>) 评论(<span id="post_comment_count">0</span>)  <a href="https://i.cnblogs.com/EditPosts.aspx?postid=5073301" rel="nofollow">编辑</a> <a href="http://www.cnblogs.com/sunshq/p/5073301.html#" onclick="AddToWz(5073301);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,cb_blogId=186490,cb_entryId=5073301,cb_blogApp=currentBlogApp,cb_blogUserGuid='a50899f4-8dbf-de11-ba8f-001cf0cd104b',cb_entryCreatedDate='2015/12/24 15:40:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="http://www.cnblogs.com/sunshq/p/5073301.html#" onclick="return RefreshPage();">刷新页面</a><a href="http://www.cnblogs.com/sunshq/p/5073301.html#top">返回顶部</a></div>
<div id="comment_form_container"><div class="login_tips">注册用户登录后才能发表评论，请 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return login(&#39;commentform&#39;);">登录</a> 或 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return register();">注册</a>，<a href="http://www.cnblogs.com/">访问</a>网站首页。</div></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="ad_t2"><a href="http://www.ucancode.com/index.htm" target="_blank">【推荐】50万行VC++源码: 大型组态工控、电力仿真CAD与GIS源码库</a><br><a href="http://www.rongcloud.cn/active/live" target="_blank">【链接】融云阿里云大咖面对面 ：教你玩转直播风口</a><br><a href="http://www.gcpowertools.com.cn/products/activereports_overview.htm?utm_source=cnblogs&amp;utm_medium=blogpage&amp;utm_term=bottom&amp;utm_content=AR&amp;utm_campaign=community" target="_blank">【推荐】报表开发有捷径：快速设计轻松集成，数据可视化和交互</a><br><a href="http://cn.iforex.com/landing_pages/br1/zhns/Testimonials8/?content=Testimonials8&amp;SID=445058" target="_blank">【推荐】一个月仅用630元赚取15000元，学会投资</a><br><a href="http://netease.im/?&amp;hmsr=bky8&amp;from=bky8" target="_blank">【推荐】网易云信-一天开发一个微信，独创1对1技术顾问让开发加速</a><br></div>
<div id="opt_under_post"></div>
<div id="ad_c1" class="c_ad_block"><a href="http://gold.xitu.io/welcome/?utm_source=cnblogs&amp;utm_medium=banner&amp;utm_content=gaoshou&amp;utm_campaign=q3_website" target="_blank"><img width="300" height="250" src="./Webpack打包进阶 - togoog - 博客园_files/24442-20160805112458981-1554012564.jpg" alt=""></a></div>
<div id="under_post_news"><div class="itnews c_ad_block"><b>最新IT新闻</b>:<br> ·  <a href="http://news.cnblogs.com/n/551924/" target="_blank">“墨子号”正进行卫星平台测试工作 多个国家请求开展国际合作</a><br> ·  <a href="http://news.cnblogs.com/n/551922/" target="_blank">苹果零售店更名“苹果”被指怪异 违背常识令人混淆</a><br> ·  <a href="http://news.cnblogs.com/n/551921/" target="_blank">韵达拟177亿借壳新海股份，成第四家借壳上市快递公司</a><br> ·  <a href="http://news.cnblogs.com/n/551923/" target="_blank">苹果汽车计划调整：重点开发自动驾驶 电动车地位下降</a><br> ·  <a href="http://news.cnblogs.com/n/551920/" target="_blank">Lyft报价90亿美元求收购 Uber称其顶多值20亿美元</a><br>» <a href="http://news.cnblogs.com/" title="IT新闻" target="_blank">更多新闻...</a></div></div>
<div id="ad_c2" class="c_ad_block"><a href="https://www.jiguang.cn/devservice/?from=cnblogs01" target="_blank"><img width="468" height="60" src="./Webpack打包进阶 - togoog - 博客园_files/24442-20160803181056012-1919505484.jpg" alt=""></a></div>
<div id="under_post_kb"><div class="itnews c_ad_block" id="kb_block"><b>最新知识库文章</b>:<br><div id="kb_recent"> ·  <a href="http://kb.cnblogs.com/page/550625/" target="_blank">程序猿媳妇儿注意事项</a><br> ·  <a href="http://kb.cnblogs.com/page/540529/" target="_blank">可是姑娘，你为什么要编程呢？</a><br> ·  <a href="http://kb.cnblogs.com/page/549631/" target="_blank">知其所以然（以算法学习为例）</a><br> ·  <a href="http://kb.cnblogs.com/page/548394/" target="_blank">如何给变量取个简短且无歧义的名字</a><br> ·  <a href="http://kb.cnblogs.com/page/549080/" target="_blank">编程的智慧</a><br></div>» <a href="http://kb.cnblogs.com/" target="_blank">更多知识库文章...</a></div></div>
<div id="HistoryToday" class="c_ad_block"><b>历史上的今天:</b><br>2014-12-24 <a href="http://www.cnblogs.com/sunshq/p/4182178.html">Zepto源码注释</a><br>2014-12-24 <a href="http://www.cnblogs.com/sunshq/p/4182176.html">避免常见的6种HTML5错误用法</a><br>2014-12-24 <a href="http://www.cnblogs.com/sunshq/p/4182008.html">CSS Counters 计数属性</a><br></div>
<script type="text/javascript">
$(function () {
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverAdT2();
    deliverAdC1();
    deliverAdC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);    
});
</script>
</div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"><div id="profile_block">昵称：<a href="http://home.cnblogs.com/u/sunshq/">togoog</a><br>园龄：<a href="http://home.cnblogs.com/u/sunshq/" title="入园时间：2009-10-23">6年9个月</a><br>粉丝：<a href="http://home.cnblogs.com/u/sunshq/followers/">9</a><br>关注：<a href="http://home.cnblogs.com/u/sunshq/followees/">0</a><div id="p_b_follow"><a href="javascript:void(0);" onclick="follow(&#39;a50899f4-8dbf-de11-ba8f-001cf0cd104b&#39;)">+加关注</a></div></div></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style=""><table id="blogCalendar" class="Cal" cellspacing="0" cellpadding="0" title="日历">
	<tbody><tr><td colspan="7"><table class="CalTitle" cellspacing="0">
		<tbody><tr><td class="CalNextPrev"><a href="javascript:void(0);" onclick="loadBlogCalendar(&#39;2016/07/01&#39;);return false;">&lt;</a></td><td align="center">2016年8月</td><td class="CalNextPrev" align="right"><a href="javascript:void(0);" onclick="loadBlogCalendar(&#39;2016/09/01&#39;);return false;">&gt;</a></td></tr>
	</tbody></table></td></tr><tr><th class="CalDayHeader" align="center" abbr="日" scope="col">日</th><th class="CalDayHeader" align="center" abbr="一" scope="col">一</th><th class="CalDayHeader" align="center" abbr="二" scope="col">二</th><th class="CalDayHeader" align="center" abbr="三" scope="col">三</th><th class="CalDayHeader" align="center" abbr="四" scope="col">四</th><th class="CalDayHeader" align="center" abbr="五" scope="col">五</th><th class="CalDayHeader" align="center" abbr="六" scope="col">六</th></tr><tr><td class="CalOtherMonthDay" align="center">31</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td class="CalWeekendDay" align="center">6</td></tr><tr><td class="CalWeekendDay" align="center">7</td><td align="center">8</td><td align="center"><a href="http://www.cnblogs.com/sunshq/archive/2016/08/09.html"><u>9</u></a></td><td align="center">10</td><td align="center">11</td><td align="center">12</td><td class="CalWeekendDay" align="center">13</td></tr><tr><td class="CalWeekendDay" align="center">14</td><td align="center">15</td><td align="center">16</td><td align="center">17</td><td align="center">18</td><td align="center">19</td><td class="CalWeekendDay" align="center">20</td></tr><tr><td class="CalWeekendDay" align="center">21</td><td class="CalTodayDay" align="center">22</td><td align="center">23</td><td align="center">24</td><td align="center">25</td><td align="center">26</td><td class="CalWeekendDay" align="center">27</td></tr><tr><td class="CalWeekendDay" align="center">28</td><td align="center">29</td><td align="center">30</td><td align="center">31</td><td class="CalOtherMonthDay" align="center">1</td><td class="CalOtherMonthDay" align="center">2</td><td class="CalOtherMonthDay" align="center">3</td></tr><tr><td class="CalOtherMonthDay" align="center">4</td><td class="CalOtherMonthDay" align="center">5</td><td class="CalOtherMonthDay" align="center">6</td><td class="CalOtherMonthDay" align="center">7</td><td class="CalOtherMonthDay" align="center">8</td><td class="CalOtherMonthDay" align="center">9</td><td class="CalOtherMonthDay" align="center">10</td></tr>
</tbody></table></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"><div id="sidebar_search" class="sidebar-block">
<div id="sidebar_search" class="mySearch">
<h3 class="catListTitle">搜索</h3>
<div id="sidebar_search_box">
<div id="widget_my_zzk" class="div_my_zzk"><input type="text" id="q" onkeydown="return zzk_go_enter(event);" class="input_my_zzk">&nbsp;<input onclick="zzk_go()" type="button" value="找找看" id="btnZzk" class="btn_my_zzk"></div>
<div id="widget_my_google" class="div_my_zzk"><input type="text" name="google_q" id="google_q" onkeydown="return google_go_enter(event)" class="input_my_zzk">&nbsp;<input onclick="google_go()" type="button" value="谷歌搜索" class="btn_my_zzk"></div>
</div>
</div>

</div><div id="sidebar_shortcut" class="sidebar-block">
<div class="catListLink">
<h3 class="catListTitle">常用链接</h3>
<ul>
<li><a href="http://www.cnblogs.com/sunshq/p/" title="我的博客的随笔列表">我的随笔</a></li><li><a href="http://www.cnblogs.com/sunshq/MyComments.html" title="我发表过的评论列表">我的评论</a></li><li><a href="http://www.cnblogs.com/sunshq/OtherPosts.html" title="我评论过的随笔列表">我的参与</a></li><li><a href="http://www.cnblogs.com/sunshq/RecentComments.html" title="我的博客的评论列表">最新评论</a></li><li><a href="http://www.cnblogs.com/sunshq/tag/" title="我的博客的标签列表">我的标签</a></li>
<li><a id="itemListLink" onclick="this.blur();WarpClass(&#39;itemListLink&#39;, &#39;itemListLin_con&#39;);return false;" href="http://www.cnblogs.com/sunshq/p/5073301.html#">更多链接</a></li>
</ul>
<div id="itemListLin_con" style="display:none;">
<ul>

</ul>
</div>
</div></div><div id="sidebar_toptags" class="sidebar-block"></div><div id="sidebar_categories">
<div id="sidebar_postarchive" class="catListPostArchive sidebar-block">
<h3 class="catListTitle">随笔档案<span style="font-size:11px;font-weight:normal">(194)</span></h3>

<ul>

<li><a id="CatList_LinkList_0_Link_0" href="http://www.cnblogs.com/sunshq/archive/2016/08.html">2016年8月 (1)</a> </li>

<li><a id="CatList_LinkList_0_Link_1" href="http://www.cnblogs.com/sunshq/archive/2016/07.html">2016年7月 (2)</a> </li>

<li><a id="CatList_LinkList_0_Link_2" href="http://www.cnblogs.com/sunshq/archive/2016/06.html">2016年6月 (2)</a> </li>

<li><a id="CatList_LinkList_0_Link_3" href="http://www.cnblogs.com/sunshq/archive/2016/05.html">2016年5月 (2)</a> </li>

<li><a id="CatList_LinkList_0_Link_4" href="http://www.cnblogs.com/sunshq/archive/2016/04.html">2016年4月 (3)</a> </li>

<li><a id="CatList_LinkList_0_Link_5" href="http://www.cnblogs.com/sunshq/archive/2016/03.html">2016年3月 (4)</a> </li>

<li><a id="CatList_LinkList_0_Link_6" href="http://www.cnblogs.com/sunshq/archive/2016/02.html">2016年2月 (4)</a> </li>

<li><a id="CatList_LinkList_0_Link_7" href="http://www.cnblogs.com/sunshq/archive/2016/01.html">2016年1月 (7)</a> </li>

<li><a id="CatList_LinkList_0_Link_8" href="http://www.cnblogs.com/sunshq/archive/2015/12.html">2015年12月 (21)</a> </li>

<li><a id="CatList_LinkList_0_Link_9" href="http://www.cnblogs.com/sunshq/archive/2015/11.html">2015年11月 (1)</a> </li>

<li><a id="CatList_LinkList_0_Link_10" href="http://www.cnblogs.com/sunshq/archive/2015/10.html">2015年10月 (1)</a> </li>

<li><a id="CatList_LinkList_0_Link_11" href="http://www.cnblogs.com/sunshq/archive/2015/09.html">2015年9月 (1)</a> </li>

<li><a id="CatList_LinkList_0_Link_12" href="http://www.cnblogs.com/sunshq/archive/2015/06.html">2015年6月 (2)</a> </li>

<li><a id="CatList_LinkList_0_Link_13" href="http://www.cnblogs.com/sunshq/archive/2015/05.html">2015年5月 (10)</a> </li>

<li><a id="CatList_LinkList_0_Link_14" href="http://www.cnblogs.com/sunshq/archive/2015/04.html">2015年4月 (13)</a> </li>

<li><a id="CatList_LinkList_0_Link_15" href="http://www.cnblogs.com/sunshq/archive/2015/03.html">2015年3月 (8)</a> </li>

<li><a id="CatList_LinkList_0_Link_16" href="http://www.cnblogs.com/sunshq/archive/2015/02.html">2015年2月 (1)</a> </li>

<li><a id="CatList_LinkList_0_Link_17" href="http://www.cnblogs.com/sunshq/archive/2015/01.html">2015年1月 (13)</a> </li>

<li><a id="CatList_LinkList_0_Link_18" href="http://www.cnblogs.com/sunshq/archive/2014/12.html">2014年12月 (25)</a> </li>

<li><a id="CatList_LinkList_0_Link_19" href="http://www.cnblogs.com/sunshq/archive/2014/11.html">2014年11月 (11)</a> </li>

<li><a id="CatList_LinkList_0_Link_20" href="http://www.cnblogs.com/sunshq/archive/2014/10.html">2014年10月 (12)</a> </li>

<li><a id="CatList_LinkList_0_Link_21" href="http://www.cnblogs.com/sunshq/archive/2014/09.html">2014年9月 (13)</a> </li>

<li><a id="CatList_LinkList_0_Link_22" href="http://www.cnblogs.com/sunshq/archive/2014/08.html">2014年8月 (2)</a> </li>

<li><a id="CatList_LinkList_0_Link_23" href="http://www.cnblogs.com/sunshq/archive/2014/07.html">2014年7月 (12)</a> </li>

<li><a id="CatList_LinkList_0_Link_24" href="http://www.cnblogs.com/sunshq/archive/2014/06.html">2014年6月 (10)</a> </li>

<li><a id="CatList_LinkList_0_Link_25" href="http://www.cnblogs.com/sunshq/archive/2014/05.html">2014年5月 (13)</a> </li>

</ul>

</div>

</div><div id="sidebar_recentcomments" class="sidebar-block"><div id="recent_comments_wrap">
<div class="catListComment">
<h3 class="catListTitle">最新评论</h3>

	<div id="RecentCommentsBlock"><ul>
        <li class="recent_comment_title"><a href="http://www.cnblogs.com/sunshq/p/5382975.html#3437705">1. Re:[超级懒人最简单法]iPhone 6 plus 适配切图方法分享(转载文章)</a></li>
        <li class="recent_comment_body">虽然没太看明白，但感觉应该是好东西，先收藏下了</li>
        <li class="recent_comment_author">--小小沧海</li>
        <li class="recent_comment_title"><a href="http://www.cnblogs.com/sunshq/p/5082272.html#3398600">2. Re:html5调用手机相机并压缩、上传</a></li>
        <li class="recent_comment_body">var base64 = canvas.toDataURL('image/jpeg', 0.5); $('#j_thumb').val(base64.substr(22)); ......</li>
        <li class="recent_comment_author">--潔西卡</li>
        <li class="recent_comment_title"><a href="http://www.cnblogs.com/sunshq/p/5082272.html#3398599">3. Re:html5调用手机相机并压缩、上传</a></li>
        <li class="recent_comment_body">謝謝提供這個方法<br>但我用了之後<br>當表單送出後,圖片都未能正確上傳存檔<br>圖片檔案值是0.<br>能否幫我看是哪有問題嗎?<br><br>請求救!<br>謝謝</li>
        <li class="recent_comment_author">--潔西卡</li>
        <li class="recent_comment_title"><a href="http://www.cnblogs.com/sunshq/p/3824657.html#3229770">4. Re:access-Control-Allow-Origin跨域请求安全隐患</a></li>
        <li class="recent_comment_body">你好，请问如果配置某几个域名的跨域配置？服务器是Apache的我试过下面这种方式，但是没有生效，访问不了Header add Access-Control-Allow-Origin "sptth : ......</li>
        <li class="recent_comment_author">--vaintwyt</li>
</ul>
</div>
</div>
</div></div><div id="sidebar_topviewedposts" class="sidebar-block"><div id="topview_posts_wrap">
<div class="catListView">
<h3 class="catListTitle">阅读排行榜</h3>
	<div id="TopViewPostsBlock"><ul><li><a href="http://www.cnblogs.com/sunshq/p/4119055.html">1. iScroll5 API速查随记(2409)</a></li><li><a href="http://www.cnblogs.com/sunshq/p/5073301.html">2. Webpack打包进阶(2166)</a></li><li><a href="http://www.cnblogs.com/sunshq/p/4111610.html">3. chrome inspect 远程调测：Chrome on Android之一 普通调试(945)</a></li><li><a href="http://www.cnblogs.com/sunshq/p/4171490.html">4. JS生成随机的由字母数字组合的字符串(937)</a></li><li><a href="http://www.cnblogs.com/sunshq/p/5082272.html">5. html5调用手机相机并压缩、上传(690)</a></li></ul></div>
</div>
</div></div><div id="sidebar_topcommentedposts" class="sidebar-block"><div id="topfeedback_posts_wrap">
<div class="catListFeedback">
<h3 class="catListTitle">评论排行榜</h3>
	<div id="TopFeedbackPostsBlock"><ul><li><a href="http://www.cnblogs.com/sunshq/p/5082272.html">1. html5调用手机相机并压缩、上传(2)</a></li><li><a href="http://www.cnblogs.com/sunshq/p/5382975.html">2. [超级懒人最简单法]iPhone 6 plus 适配切图方法分享(转载文章)(1)</a></li><li><a href="http://www.cnblogs.com/sunshq/p/3824657.html">3. access-Control-Allow-Origin跨域请求安全隐患(1)</a></li></ul></div>
</div>
</div></div><div id="sidebar_topdiggedposts" class="sidebar-block"><div id="topdigg_posts_wrap">
<div class="catListView">
<h3 class="catListTitle">推荐排行榜</h3>
<div id="TopDiggPostsBlock"><ul><li><a href="http://www.cnblogs.com/sunshq/p/4119055.html">1. iScroll5 API速查随记(2)</a></li><li><a href="http://www.cnblogs.com/sunshq/p/5035163.html">2. 在Web应用中接入微信支付的流程之极简清晰版 (转)(1)</a></li><li><a href="http://www.cnblogs.com/sunshq/p/4497672.html">3. React.js 常用技术要点(1)</a></li><li><a href="http://www.cnblogs.com/sunshq/p/4201056.html">4. 移动WEBAPP开发常规CSS样式总结(1)</a></li><li><a href="http://www.cnblogs.com/sunshq/p/5481665.html">5. react学习小结(生命周期- 实例化时期 - 存在期- 销毁时期)(1)</a></li></ul></div>
</div></div></div></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright ©2016 togoog
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


</body></html>