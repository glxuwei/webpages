<!DOCTYPE html>
<!-- saved from url=(0050)http://gold.xitu.io/entry/56e0d39e7db2a20052899f7f -->
<html xmlns:wb="http://open.weibo.com/wb"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>基于 webpack 的前端工程化开发之多页站点篇（一） - 掘金</title><link rel="apple-touch-icon" sizes="57x57" href="http://gold.xitu.io/favicons/apple-touch-icon-57x57.png"><link rel="apple-touch-icon" sizes="60x60" href="http://gold.xitu.io/favicons/apple-touch-icon-60x60.png"><link rel="apple-touch-icon" sizes="72x72" href="http://gold.xitu.io/favicons/apple-touch-icon-72x72.png"><link rel="apple-touch-icon" sizes="76x76" href="http://gold.xitu.io/favicons/apple-touch-icon-76x76.png"><link rel="apple-touch-icon" sizes="114x114" href="http://gold.xitu.io/favicons/apple-touch-icon-114x114.png"><link rel="apple-touch-icon" sizes="120x120" href="http://gold.xitu.io/favicons/apple-touch-icon-120x120.png"><link rel="apple-touch-icon" sizes="144x144" href="http://gold.xitu.io/favicons/apple-touch-icon-144x144.png"><link rel="apple-touch-icon" sizes="152x152" href="http://gold.xitu.io/favicons/apple-touch-icon-152x152.png"><link rel="apple-touch-icon" sizes="180x180" href="http://gold.xitu.io/favicons/apple-touch-icon-180x180.png"><link rel="icon" type="image/png" href="http://gold.xitu.io/favicons/favicon-32x32.png" sizes="32x32"><link rel="icon" type="image/png" href="http://gold.xitu.io/favicons/android-chrome-192x192.png" sizes="192x192"><link rel="icon" type="image/png" href="http://gold.xitu.io/favicons/favicon-96x96.png" sizes="96x96"><link rel="icon" type="image/png" href="http://gold.xitu.io/favicons/favicon-16x16.png" sizes="16x16"><link rel="manifest" href="http://gold.xitu.io/favicons/manifest.json"><link rel="mask-icon" href="http://gold.xitu.io/favicons/safari-pinned-tab.svg" color="#007fff"><link rel="shortcut icon" href="http://gold.xitu.io/favicons/favicon.ico"><meta name="msapplication-TileColor" content="#007fff"><meta name="msapplication-TileImage" content="favicons/mstile-144x144.png"><meta name="msapplication-config" content="favicons/browserconfig.xml"><meta name="theme-color" content="#007fff"><meta name="keywords" content="稀土掘金,掘金,移动开发,Android开发,iOS开发,前端开发,后端开发,产品设计,资源下载,React.js,vue.js,node.js,编程,程序员,开发者,设计师,产品经理,Hacker News,ECMAScript,开源,Github"><meta name="description" content="在最初接触 webpack 的较长一段时间里，我（也可能很多人）都觉得 webpack 是专为单页应用而量身打造的，比如 webpack+react、webpack+vue 等，都可以近乎完美的解决各种资源的依赖加载、打包的问题。甚至 css 都是打包在 js 里去动态添加到 dom 文档中去。"><meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no"><meta property="wb:webmaster" content="592d5aa78e3ec93b"><meta name="apple-itunes-app" content="app-id=987739104"><link href="./基于 webpack 的前端工程化开发之多页站点篇（一） - 掘金_files/entry-content.css" rel="stylesheet"></head><body>       <header><div class="container clearfix"><ul class="actions"><li class="action action-image"><a href="http://gold.xitu.io/"><img src="./基于 webpack 的前端工程化开发之多页站点篇（一） - 掘金_files/logo-header.svg" class="inline home-logo"></a></li></ul><ul class="actions secondary"><li class="action action-image"><a href="http://gold.xitu.io/welcome"><button class="inline login">注册 / 登录</button></a></li><li class="action dropdown header-dropdown"><i class="ion-ios-more header-icon"></i><ul class="dropdown-list"><li><a href="http://gold.xitu.io/app" target="_blank">下载应用</a></li><li><a href="http://gold.xitu.io/about" target="_blank">关于我们</a></li><li><a href="http://gold.xitu.io/i-want-u" target="_blank">加入我们</a></li><li><a href="http://gold.xitu.io/partners" target="_blank">合作伙伴</a></li><li><a href="https://github.com/xitu/gold-miner" target="_blank">翻译计划</a></li></ul></li></ul></div></header><script async="" src="./基于 webpack 的前端工程化开发之多页站点篇（一） - 掘金_files/analytics.js"></script><script async="" src="./基于 webpack 的前端工程化开发之多页站点篇（一） - 掘金_files/analytics.js"></script><script src="./基于 webpack 的前端工程化开发之多页站点篇（一） - 掘金_files/push.js"></script><script>(function(){
    var dropdown = document.querySelector('.header-dropdown')
    dropdown.addEventListener('click', function(e) {
        let target = e.target
        let ele = e.currentTarget
        let ul = ele.querySelector('.dropdown-list')
        let lis = ul.querySelectorAll('li')
        while (target.parentNode != ele) {
            if (!target.parentNode || target.parentNode == ul) return
            target = target.parentNode
        }
        ele.classList.contains('open') ? ele.classList.remove('open') : ele.classList.add('open')
        for (let i = 0; i < lis.length; i++) {
            let li = lis[i]
            li.addEventListener('click', (e) => ele.classList.remove('open'))
        }
        e.stopPropagation()
    })
})();</script><div class="container entry-view entry-share-view"><br><a href="https://segmentfault.com/a/1190000004511992" rel="nofollow"><h2 class="entry-title">基于 webpack 的前端工程化开发之多页站点篇（一）</h2></a><p><small class="entry-meta"><span class="action">阅读 1480</span><span class="action">收藏 32</span><span class="action">2016-3-10</span></small></p><div class="share-by"><div class="ellipsis"><span>原文链接：</span><a href="https://segmentfault.com/a/1190000004511992" target="_blank" class="share-link">https://segmentfault.com/a/1190000004511992</a></div><div class="share-content">在最初接触 webpack 的较长一段时间里，我（也可能很多人）都觉得 webpack 是专为单页应用而量身打造的，比如 webpack+react、webpack+vue 等，都可以近乎完美的解决各种资源的依赖加载、打包的问题。甚至 css 都是打包在 js 里去动态添加到 dom 文档中去。 —— 由 <a href="https://gold.xitu.io/user/5699faaf60b219d101745b7b" target="_blank" class="share-link">丁一</a> 分享</div></div><div class="entry-content"><div><div>
                    
<h3>前言碎语</h3>
<p>在最初接触webpack的较长一段时间里，我（也可能很多人）都觉得webpack是专为单页应用而量身打造的，比如webpack+react、webpack+vue等，都可以近乎完美的解决各种资源的依赖加载、打包的问题。甚至css都是打包在js里去动态添加到dom文档中去。</p>
<p>后来想想，这么好的工具这么好的方案为什么不能用在website（普通的web站点，姑且叫做website吧）中呢？</p>
<ul>
<li><p>首先对于普通的web站点，我们更倾向于将css独立出来，因为对于website来说，css还是要最先加载出来比较好。</p></li>
<li><p>再然后js我们也只想加载需要的部分，而不是一个大大的打包了所有js模块的包。</p></li>
</ul>
<p>在很多webpack入门级的demo里，无论是单入口的还是多入口的，都没有解决上面两个问题。入门毕竟是入门，要晋级还是只能靠自己。幸运的是，有很多优秀的工程师已为我们铺好了路，让我们在前端工程化的道路上少走很多的弯路。如果你也一样曾迷茫过，请不要走开，希望这里能为你答疑解惑。</p>
<p>好吧，以上通通是废话，接下来上干货。</p>
<p>首先开始构建我们的项目目录结构。</p>
<h3>初始化项目、安装依赖</h3>
<p>使用<code>npm init</code>初始化项目就不多说了，生成package.json文件。</p>
<p>使用<code>npm install plugins --save-dev</code>安装项目所需依赖。最终package.json的依赖声明如下：</p>
<pre><code class="hljs cpp"><span class="hljs-string">"devDependencies"</span>: {
    <span class="hljs-string">"css-loader"</span>: <span class="hljs-string">"^0.23.1"</span>,
    <span class="hljs-string">"extract-text-webpack-plugin"</span>: <span class="hljs-string">"^1.0.1"</span>,
    <span class="hljs-string">"file-loader"</span>: <span class="hljs-string">"^0.8.5"</span>,
    <span class="hljs-string">"html-loader"</span>: <span class="hljs-string">"^0.4.3"</span>,
    <span class="hljs-string">"html-webpack-plugin"</span>: <span class="hljs-string">"^2.9.0"</span>,
    <span class="hljs-string">"jquery"</span>: <span class="hljs-string">"^1.12.0"</span>,
    <span class="hljs-string">"less"</span>: <span class="hljs-string">"^2.6.0"</span>,
    <span class="hljs-string">"less-loader"</span>: <span class="hljs-string">"^2.2.2"</span>,
    <span class="hljs-string">"style-loader"</span>: <span class="hljs-string">"^0.13.0"</span>,
    <span class="hljs-string">"url-loader"</span>: <span class="hljs-string">"^0.5.7"</span>,
    <span class="hljs-string">"webpack"</span>: <span class="hljs-string">"^1.12.13"</span>,
    <span class="hljs-string">"webpack-dev-server"</span>: <span class="hljs-string">"^1.14.1"</span>
}</code></pre>
<h3>主要目录结构</h3>
<pre><code class="hljs bash">- website
    - src                <span class="hljs-comment">#代码开发目录</span>
        - css            <span class="hljs-comment">#css目录，按照页面（模块）、通用、第三方三个级别进行组织</span>
            + page
            + common
            + lib
        + img            <span class="hljs-comment">#图片资源</span>
        - js             <span class="hljs-comment">#JS脚本，按照page、components进行组织</span>
            + page
            + components
        + view           <span class="hljs-comment">#HTML模板</span>
    - dist               <span class="hljs-comment">#webpack编译打包输出目录，无需建立目录可由webpack根据配置自动生成</span>
        + css                
        + js
        + view
    + node_modules       <span class="hljs-comment">#所使用的nodejs模块</span>
    package.json         <span class="hljs-comment">#项目配置</span>
    webpack.config.js    <span class="hljs-comment">#webpack配置</span>
    README.md            <span class="hljs-comment">#项目说明</span></code></pre>
<blockquote>
<p>假如你是一名纯粹的前端工程师，使用webpack构建website的目录结构大概就这样了，当然你也可以根据自己的喜好自由设计目录结构。</p>
<p>详细的代码全貌可以提前在这里“窥看”——<a href="https://github.com/vhtml/webpack-MultiPage-static">https://github.com/vhtml/webpack-MultiPage-static</a>。</p>
</blockquote>
<p>目录组织好，我们就可以开始撸代码了。</p>
<h3>开发页面</h3>
<p>在src/js/page目录下建立index.js文件，在src/view目录下建立index.html文件。入口js和模板文件名对应。</p>
<p>index.js内容如下：</p>
<pre><code class="hljs javascript"><span class="hljs-comment">//引入css</span>
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/lib/reset.css"</span>);
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/common/global.css"</span>);
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/common/grid.css"</span>);
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/page/index.less"</span>);


$(<span class="hljs-string">'.g-bd'</span>).append(<span class="hljs-string">'&lt;p class="text"&gt;这是由js生成的一句话。&lt;/p&gt;'</span>);</code></pre>
<p>index.html 内容如下：</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"基于webpack的前端工程化开发解决方案探索"</span>/&gt;</span>
    <span class="hljs-comment">&lt;!--
        描述：head中无需再引入css以及facicon，webpack将根据入口JS文件的要求自动实现按需加载或者生成style标签
    --&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-hd"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-bd"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"弹窗"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"img"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../img/4.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-ft"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-comment">&lt;!--
        描述：body中同样无需单独引入JS文件，webpack会根据入口JS文件自动实现按需加载或者生成script标签，还可以生成对应的hash值
    --&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>
<p>就是这样一个简单的HTML模板，我们甚至没有引入任何CSS和JS，通过webpack打包就可以自动帮我们引入。</p>
<p>由于是做website，在此之前相信你对单页应用打包已经有过了解，我就不客气了，再来两个页面压压惊。</p>
<p>about.js:</p>
<pre><code class="hljs javascript"><span class="hljs-comment">//引入css</span>
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/lib/reset.css"</span>);
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/common/global.css"</span>);
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/common/grid.css"</span>);
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/page/about.less"</span>);

$(<span class="hljs-string">'#about'</span>).html(<span class="hljs-string">'这是一个关于webpack构建工程的栗子'</span>);</code></pre>
<p>about.html:</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"基于webpack的前端工程化开发解决方案探索"</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-hd"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-bd"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"about"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-ft"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>
<p>list.js:</p>
<pre><code class="hljs javascript"><span class="hljs-comment">//引入css</span>
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/lib/reset.css"</span>);
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/common/global.css"</span>);
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/common/grid.css"</span>);
<span class="hljs-built_in">require</span>(<span class="hljs-string">"../../css/page/list.less"</span>);


<span class="hljs-keyword">var</span> html = <span class="hljs-string">''</span>;
<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++){
    html += <span class="hljs-string">'&lt;li&gt;列表'</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">'&lt;/li&gt;'</span>;
}

$(<span class="hljs-string">'#list'</span>).html(html);</code></pre>
<p>list.html:</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>列表页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"基于webpack的前端工程化开发解决方案探索"</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-hd"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-bd"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"list"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-ft"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>
<p>OK，太棒了！！！</p>
<h3>webpack配置及项目打包编译</h3>
<p>这里是关键，在webpack.config.js里，我们将进行一些配置，来完成我们的需求，一开始或许有点难理解，但等你真的掌握了，你便会惊呼它的神奇。配置中我写了详细的注释，要想彻底理解，还需多实践，多查阅文档，必要时看看源码，呜呼，学习之路漫漫兮。</p>
<pre><code class="hljs typescript"><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);
<span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);
<span class="hljs-comment">/*
extract-text-webpack-plugin插件，
有了它就可以将你的样式提取到单独的css文件里，
妈妈再也不用担心样式会被打包到js文件里了。
 */</span>
<span class="hljs-keyword">var</span> ExtractTextPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'extract-text-webpack-plugin'</span>);
<span class="hljs-comment">/*
html-webpack-plugin插件，重中之重，webpack中生成HTML的插件，
具体可以去这里查看https://www.npmjs.com/package/html-webpack-plugin
 */</span>
<span class="hljs-keyword">var</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>);

<span class="hljs-keyword">module</span>.exports = {
    entry: { <span class="hljs-comment">//配置入口文件，有几个写几个</span>
        index: <span class="hljs-string">'./src/js/page/index.js'</span>,
        list: <span class="hljs-string">'./src/js/page/list.js'</span>,
        about: <span class="hljs-string">'./src/js/page/about.js'</span>,
    },
    output: { 
        path: path.join(__dirname, <span class="hljs-string">'dist'</span>), <span class="hljs-comment">//输出目录的配置，模板、样式、脚本、图片等资源的路径配置都相对于它</span>
        publicPath: <span class="hljs-string">'/dist/'</span>,                <span class="hljs-comment">//模板、样式、脚本、图片等资源对应的server上的路径</span>
        filename: <span class="hljs-string">'js/[name].js'</span>,            <span class="hljs-comment">//每个页面对应的主js的生成配置</span>
        chunkFilename: <span class="hljs-string">'js/[id].chunk.js'</span>   <span class="hljs-comment">//chunk生成的配置</span>
    },
    <span class="hljs-keyword">module</span>: {
        loaders: [ <span class="hljs-comment">//加载器，关于各个加载器的参数配置，可自行搜索之。</span>
            {
                test: <span class="hljs-regexp">/\.css$/</span>,
                <span class="hljs-comment">//配置css的抽取器、加载器。'-loader'可以省去</span>
                loader: ExtractTextPlugin.extract(<span class="hljs-string">'style-loader'</span>, <span class="hljs-string">'css-loader'</span>) 
            }, {
                test: <span class="hljs-regexp">/\.less$/</span>,
                <span class="hljs-comment">//配置less的抽取器、加载器。中间!有必要解释一下，</span>
                <span class="hljs-comment">//根据从右到左的顺序依次调用less、css加载器，前一个的输出是后一个的输入</span>
                <span class="hljs-comment">//你也可以开发自己的loader哟。有关loader的写法可自行谷歌之。</span>
                loader: ExtractTextPlugin.extract(<span class="hljs-string">'css!less'</span>)
            }, {
                <span class="hljs-comment">//html模板加载器，可以处理引用的静态资源，默认配置参数attrs=img:src，处理图片的src引用的资源</span>
                <span class="hljs-comment">//比如你配置，attrs=img:src img:data-src就可以一并处理data-src引用的资源了，就像下面这样</span>
                test: <span class="hljs-regexp">/\.html$/</span>,
                loader: <span class="hljs-string">"html?attrs=img:src img:data-src"</span>
            }, {
                <span class="hljs-comment">//文件加载器，处理文件静态资源</span>
                test: <span class="hljs-regexp">/\.(woff|woff2|ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/</span>,
                loader: <span class="hljs-string">'file-loader?name=./fonts/[name].[ext]'</span>
            }, {
                <span class="hljs-comment">//图片加载器，雷同file-loader，更适合图片，可以将较小的图片转成base64，减少http请求</span>
                <span class="hljs-comment">//如下配置，将小于8192byte的图片转成base64码</span>
                test: <span class="hljs-regexp">/\.(png|jpg|gif)$/</span>,
                loader: <span class="hljs-string">'url-loader?limit=8192&amp;name=./img/[hash].[ext]'</span>
            }
        ]
    },
    plugins: [
        <span class="hljs-keyword">new</span> webpack.ProvidePlugin({ <span class="hljs-comment">//加载jq</span>
            $: <span class="hljs-string">'jquery'</span>
        }),
        <span class="hljs-keyword">new</span> webpack.optimize.CommonsChunkPlugin({
            name: <span class="hljs-string">'vendors'</span>, <span class="hljs-comment">// 将公共模块提取，生成名为`vendors`的chunk</span>
            chunks: [<span class="hljs-string">'index'</span>,<span class="hljs-string">'list'</span>,<span class="hljs-string">'about'</span>], <span class="hljs-comment">//提取哪些模块共有的部分</span>
            minChunks: <span class="hljs-number">3</span> <span class="hljs-comment">// 提取至少3个模块共有的部分</span>
        }),
        <span class="hljs-keyword">new</span> ExtractTextPlugin(<span class="hljs-string">'css/[name].css'</span>), <span class="hljs-comment">//单独使用link标签加载css并设置路径，相对于output配置中的publickPath</span>
        
        <span class="hljs-comment">//HtmlWebpackPlugin，模板生成相关的配置，每个对于一个页面的配置，有几个写几个</span>
        <span class="hljs-keyword">new</span> HtmlWebpackPlugin({ <span class="hljs-comment">//根据模板插入css/js等生成最终HTML</span>
            favicon: <span class="hljs-string">'./src/img/favicon.ico'</span>, <span class="hljs-comment">//favicon路径，通过webpack引入同时可以生成hash值</span>
            filename: <span class="hljs-string">'./view/index.html'</span>, <span class="hljs-comment">//生成的html存放路径，相对于path</span>
            template: <span class="hljs-string">'./src/view/index.html'</span>, <span class="hljs-comment">//html模板路径</span>
            inject: <span class="hljs-string">'body'</span>, <span class="hljs-comment">//js插入的位置，true/'head'/'body'/false</span>
            hash: <span class="hljs-literal">true</span>, <span class="hljs-comment">//为静态资源生成hash值</span>
            chunks: [<span class="hljs-string">'vendors'</span>, <span class="hljs-string">'index'</span>],<span class="hljs-comment">//需要引入的chunk，不配置就会引入所有页面的资源</span>
            minify: { <span class="hljs-comment">//压缩HTML文件    </span>
                removeComments: <span class="hljs-literal">true</span>, <span class="hljs-comment">//移除HTML中的注释</span>
                collapseWhitespace: <span class="hljs-literal">false</span> <span class="hljs-comment">//删除空白符与换行符</span>
            }
        }),
        <span class="hljs-keyword">new</span> HtmlWebpackPlugin({ <span class="hljs-comment">//根据模板插入css/js等生成最终HTML</span>
            favicon: <span class="hljs-string">'./src/img/favicon.ico'</span>, <span class="hljs-comment">//favicon路径，通过webpack引入同时可以生成hash值</span>
            filename: <span class="hljs-string">'./view/list.html'</span>, <span class="hljs-comment">//生成的html存放路径，相对于path</span>
            template: <span class="hljs-string">'./src/view/list.html'</span>, <span class="hljs-comment">//html模板路径</span>
            inject: <span class="hljs-literal">true</span>, <span class="hljs-comment">//js插入的位置，true/'head'/'body'/false</span>
            hash: <span class="hljs-literal">true</span>, <span class="hljs-comment">//为静态资源生成hash值</span>
            chunks: [<span class="hljs-string">'vendors'</span>, <span class="hljs-string">'list'</span>],<span class="hljs-comment">//需要引入的chunk，不配置就会引入所有页面的资源</span>
            minify: { <span class="hljs-comment">//压缩HTML文件    </span>
                removeComments: <span class="hljs-literal">true</span>, <span class="hljs-comment">//移除HTML中的注释</span>
                collapseWhitespace: <span class="hljs-literal">false</span> <span class="hljs-comment">//删除空白符与换行符</span>
            }
        }),
        <span class="hljs-keyword">new</span> HtmlWebpackPlugin({ <span class="hljs-comment">//根据模板插入css/js等生成最终HTML</span>
            favicon: <span class="hljs-string">'./src/img/favicon.ico'</span>, <span class="hljs-comment">//favicon路径，通过webpack引入同时可以生成hash值</span>
            filename: <span class="hljs-string">'./view/about.html'</span>, <span class="hljs-comment">//生成的html存放路径，相对于path</span>
            template: <span class="hljs-string">'./src/view/about.html'</span>, <span class="hljs-comment">//html模板路径</span>
            inject: <span class="hljs-literal">true</span>, <span class="hljs-comment">//js插入的位置，true/'head'/'body'/false</span>
            hash: <span class="hljs-literal">true</span>, <span class="hljs-comment">//为静态资源生成hash值</span>
            chunks: [<span class="hljs-string">'vendors'</span>, <span class="hljs-string">'about'</span>],<span class="hljs-comment">//需要引入的chunk，不配置就会引入所有页面的资源</span>
            minify: { <span class="hljs-comment">//压缩HTML文件    </span>
                removeComments: <span class="hljs-literal">true</span>, <span class="hljs-comment">//移除HTML中的注释</span>
                collapseWhitespace: <span class="hljs-literal">false</span> <span class="hljs-comment">//删除空白符与换行符</span>
            }
        }),

        <span class="hljs-keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="hljs-comment">//热加载</span>
    ],
    <span class="hljs-comment">//使用webpack-dev-server，提高开发效率</span>
    devServer: {
        contentBase: <span class="hljs-string">'./'</span>,
        host: <span class="hljs-string">'localhost'</span>,
        port: <span class="hljs-number">9090</span>, <span class="hljs-comment">//默认8080</span>
        inline: <span class="hljs-literal">true</span>, <span class="hljs-comment">//可以监控js变化</span>
        hot: <span class="hljs-literal">true</span>, <span class="hljs-comment">//热启动</span>
    }
};</code></pre>
<p>好了，完成以上的这些配置之后，执行<code>webpack</code>打包命令完成项目打包。</p>
<p>此时，前往/dist/view目录下查看生成的list.html文件，如下：</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>列表页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"基于webpack的前端工程化开发解决方案探索"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"shortcut icon"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/dist/favicon.ico"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/dist/css/vendors.css?02568e631b7717b7149a"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/dist/css/list.css?02568e631b7717b7149a"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-hd"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-bd"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"list"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"g-ft"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/dist/js/vendors.js?02568e631b7717b7149a"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/dist/js/list.js?02568e631b7717b7149a"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>
<p>可以看到生成的文件除了保留原模板中的内容以外，还根据入口文件list.js的定义，自动添加需要引入CSS与JS文件，以及favicon，同时还添加了相应的hash值。</p>
<p>执行<code>webpack-dev-server</code>启动devServer，打开<a href="http://localhost/">http://localhost</a>:9090/dist/view/index.html就可以进行正常的页面预览了。说明我们的资源路径生成也是没有问题的。</p>
<p>好了，纯静态的webpack前端构建过程就是这样了。然而你可能还有疑问。</p>
<ul>
<li><p>假如你是个懒人，可能会觉得目前的配置不够智能，每增加一个页面，就得再手动添加入口文件及模板配置。</p></li>
<li><p>假如你是个全栈工程师或者以nodejs做中间层的开发者，你的模板不是纯粹的html，但是又需要像html模板那样能自动根据需要添加css与js文件。</p></li>
</ul>
<p>还等什么，快戳这里吧——<a href="https://segmentfault.com/a/1190000004516832">基于webpack的前端工程化开发之多页站点篇（二）</a></p>

                </div>
                                                
                </div></div><p class="tags cloud"><a href="http://gold.xitu.io/tag/Webpack" class="tag">Webpack</a></p><ul class="box-list recommended-entries"><div style="margin-bottom: 1em;" class="text-bold text-center">相关热门文章</div><li class="half"><a href="http://gold.xitu.io/entry/57b94d8879bc44005ba13b4c"><div class="box-content"><div class="box-title text-left">webpack-dev-server 使用方法，看完还不会的来找我~</div></div></a></li><li class="half"><a href="http://gold.xitu.io/entry/57b3035f2e958a00546f8774"><div class="box-content"><div class="box-title text-left">入门 Webpack，看这篇就够了</div></div></a></li><li class="half"><a href="http://gold.xitu.io/entry/57a7d030128fe100548b5b9c"><div class="box-content"><div class="box-title text-left">如何让你的网页加载时间降低到 1s 内</div></div></a></li><li class="half"><a href="http://gold.xitu.io/entry/57b15faa6be3ff006bb217ae"><div class="box-content"><div class="box-title text-left">入门：十分钟自动化构建</div></div></a></li></ul><a href="http://a.app.qq.com/o/simple.jsp?pkgname=com.daimajia.gold" target="_blank" style="display: block;"><p class="text-center"><img src="./基于 webpack 的前端工程化开发之多页站点篇（一） - 掘金_files/yingyongbao.png" style="width: 8em;" class="entry-photo"></p></a><div id="iosWeiboTip" class="ios-weibo-tip"><img src="./基于 webpack 的前端工程化开发之多页站点篇（一） - 掘金_files/weibo@2x.png" class="ios-weibo-tip-img"></div><footer style="padding: 1em;"><div style="position: relative;" class="container clearfix"><div class="entry-pop-up"><a href="http://a.app.qq.com/o/simple.jsp?pkgname=com.daimajia.gold" style="display: block;" class="pop-up-content">前端高手都在看</a></div><a href="http://gold.xitu.io/about"><img src="./基于 webpack 的前端工程化开发之多页站点篇（一） - 掘金_files/logo-bold.svg" class="inline"><span style="font-size: .9em; color: #b4b4b4;">技术·设计·产品</span></a><a style="margin-top: -.3em; margin-bottom: -.3em; line-height: 2em;" onclick="gaDownloadClick()" class="button float-right inline app-download-button">下载 App</a></div></footer></div><script src="./基于 webpack 的前端工程化开发之多页站点篇（一） - 掘金_files/entry-content.js"></script><script>(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);
})();</script><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-57015356-3', 'auto');
ga('send', 'pageview');</script></body></html>