<!DOCTYPE html>
<!-- saved from url=(0088)http://jixianqianduan.com/frontend-javascript/2015/12/28/nine-browser-cache-methods.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="google-site-verification" content="0FNbiBWk1FugWYo-RiGxQyIHebGeLoXp3HB7AxIFKy8">
    <meta name="baidu-site-verification" content="tYoUqpkCCv">
    <meta name="baidu-site-verification" content="IGN97NW90O">
    
    <title>九种浏览器端缓存机制知多少 | ouvenzhang的博客</title>

    <meta http-equiv="x-dns-prefetch-control" content="on">
    <link rel="dns-prefetch" href="http://jixianqianduan.com/frontend-javascript/2015/12/28/cdnjs.cloudflare.com">
    <link rel="dns-prefetch" href="http://jixianqianduan.com/frontend-javascript/2015/12/28/1.url.cn">

    <meta name="description" itemprop="description" content="九种浏览器端缓存机制知多少,浏览器缓存,cache ">
    <meta itemprop="name" content="九种浏览器端缓存机制知多少">
    <meta itemprop="image" content="http://ouvens.github.io/blog/assets/logo.png">
    <meta itemprop="keywords" name="keywords" content="九种浏览器端缓存机制知多少,浏览器缓存,cache ">

    
    <meta name="author" content="ouvenzhang">
    <meta name="copyright" content="© ouvenzhang 2016">
    <meta name="protocol" content="1">
    

    <!-- External libraries -->
    <link rel="stylesheet" href="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/iconfont.css">
    <link rel="stylesheet" href="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/monokai_sublime.min.css">
    <link rel="stylesheet" href="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/lightbox.css">

    <!-- Favicon and other icons (made with http://www.favicon-generator.org/) -->
    <link rel="shortcut icon" href="http://jixianqianduan.com/assets/favicon.ico" type="image/x-icon">
  	<link rel="icon" href="http://jixianqianduan.com/assets/favicon.ico" type="image/x-icon">
    
  	<meta name="msapplication-TileColor" content="#ffffff">
  	<meta name="theme-color" content="#ffffff">
    <meta name="msapplication-TileImage" content="/assets/icons/icon.png">

  	<!-- Site styles -->
    <link rel="stylesheet" href="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/main.css">

    <link rel="alternate" type="application/rss+xml" title="极限前端" href="http://ouvens.github.io//feed.xml">
    <script src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/hm.js"></script><script>
    // 访问统计
    var domain = 'jixianqianduan.com';
    var oldDomain = 'ouvens.github.io';
    if(location.host === domain){
        var _hmt = _hmt || [];
        (function() {
          var hm = document.createElement("script");
          hm.src = "//hm.baidu.com/hm.js?b536b128dc21c3d18fdc028f0609e3f0";
          var s = document.getElementsByTagName("script")[0]; 
          s.parentNode.insertBefore(hm, s);
        })();
    }else if(location.host === oldDomain){
        window.location.href = location.href.replace(oldDomain, domain);
        var _hmt = _hmt || [];
        (function() {
          var hm = document.createElement("script");
          hm.src = "//hm.baidu.com/hm.js?041efd2cb345ca1b9dbdbb2383cb716d";
          var s = document.getElementsByTagName("script")[0]; 
          s.parentNode.insertBefore(hm, s);
        })();
    }

    // 链接提交

    if(location.protocol === 'https'){
        !function(){var e=/([http|https]:\/\/[a-zA-Z0-9\_\.]+\.baidu\.com)/gi,r=window.location.href,t=document.referrer;if(!e.test(r)){var o="https://sp0.baidu.com/9_Q4simg2RQJ8t7jm9iCKT-xh_/s.gif";t?(o+="?r="+encodeURIComponent(document.referrer),r&&(o+="&l="+r)):r&&(o+="?l="+r);var i=new Image;i.src=o}}(window);
    }else{
        !function(){var e=/([http|https]:\/\/[a-zA-Z0-9\_\.]+\.baidu\.com)/gi,r=window.location.href,o=document.referrer;if(!e.test(r)){var n="//api.share.baidu.com/s.gif";o?(n+="?r="+encodeURIComponent(document.referrer),r&&(n+="&l="+r)):r&&(n+="?l="+r);var t=new Image;t.src=n}}(window);
    }


    </script>
<style type="text/css">.gc-comments-item-bd {
		  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";
		  font-size: 1em;
		  line-height: 1.6;
		  word-wrap: break-word;
		}
		.gc-comments-item-bd:before {
		  display: table;
		  content: "";
		}
		.gc-comments-item-bd:after {
		  display: table;
		  clear: both;
		  content: "";
		}
		.gc-comments-item-bd > *:first-child {
		  margin-top: 0 !important;
		}
		.gc-comments-item-bd > *:last-child {
		  margin-bottom: 0 !important;
		}
		.gc-comments-item-bd a:not([href]) {
		  color: inherit;
		  text-decoration: none;
		}
		.gc-comments-item-bd .absent {
		  color: #c00;
		}
		.gc-comments-item-bd .anchor {
		  display: inline-block;
		  padding-right: 2px;
		  margin-left: -18px;
		}
		.gc-comments-item-bd .anchor:focus {
		  outline: none;
		}
		.gc-comments-item-bd h1, .gc-comments-item-bd h2, .gc-comments-item-bd h3, .gc-comments-item-bd h4, .gc-comments-item-bd h5, .gc-comments-item-bd h6 {
		  margin-top: 1em;
		  margin-bottom: 16px;
		  font-weight: bold;
		  line-height: 1.4;
		}
		.gc-comments-item-bd h1 .octicon-link, .gc-comments-item-bd h2 .octicon-link, .gc-comments-item-bd h3 .octicon-link, .gc-comments-item-bd h4 .octicon-link, .gc-comments-item-bd h5 .octicon-link, .gc-comments-item-bd h6 .octicon-link {
		  color: #000;
		  vertical-align: middle;
		  visibility: hidden;
		}
		.gc-comments-item-bd h1:hover .anchor, .gc-comments-item-bd h2:hover .anchor, .gc-comments-item-bd h3:hover .anchor, .gc-comments-item-bd h4:hover .anchor, .gc-comments-item-bd h5:hover .anchor, .gc-comments-item-bd h6:hover .anchor {
		  text-decoration: none;
		}
		.gc-comments-item-bd h1:hover .anchor .octicon-link, .gc-comments-item-bd h2:hover .anchor .octicon-link, .gc-comments-item-bd h3:hover .anchor .octicon-link, .gc-comments-item-bd h4:hover .anchor .octicon-link, .gc-comments-item-bd h5:hover .anchor .octicon-link, .gc-comments-item-bd h6:hover .anchor .octicon-link {
		  visibility: visible;
		}
		.gc-comments-item-bd h1 tt,
		    .gc-comments-item-bd h1 code, .gc-comments-item-bd h2 tt,
		    .gc-comments-item-bd h2 code, .gc-comments-item-bd h3 tt,
		    .gc-comments-item-bd h3 code, .gc-comments-item-bd h4 tt,
		    .gc-comments-item-bd h4 code, .gc-comments-item-bd h5 tt,
		    .gc-comments-item-bd h5 code, .gc-comments-item-bd h6 tt,
		    .gc-comments-item-bd h6 code {
		  font-size: inherit;
		}
		.gc-comments-item-bd h1 {
		  padding-bottom: .3em;
		  font-size: 2.25em;
		  line-height: 1.2;
		  border-bottom: 1px solid #eee;
		}
		.gc-comments-item-bd h1 .anchor {
		  line-height: 1;
		}
		.gc-comments-item-bd h2 {
		  padding-bottom: .3em;
		  font-size: 1.75em;
		  line-height: 1.225;
		  border-bottom: 1px solid #eee;
		}
		.gc-comments-item-bd h2 .anchor {
		  line-height: 1;
		}
		.gc-comments-item-bd h3 {
		  font-size: 1.5em;
		  line-height: 1.43;
		}
		.gc-comments-item-bd h3 .anchor {
		  line-height: 1.2;
		}
		.gc-comments-item-bd h4 {
		  font-size: 1.25em;
		}
		.gc-comments-item-bd h4 .anchor {
		  line-height: 1.2;
		}
		.gc-comments-item-bd h5 {
		  font-size: 1em;
		}
		.gc-comments-item-bd h5 .anchor {
		  line-height: 1.1;
		}
		.gc-comments-item-bd h6 {
		  font-size: 1em;
		  color: #777;
		}
		.gc-comments-item-bd h6 .anchor {
		  line-height: 1.1;
		}
		.gc-comments-item-bd p,
		  .gc-comments-item-bd blockquote,
		  .gc-comments-item-bd ul, .gc-comments-item-bd ol, .gc-comments-item-bd dl,
		  .gc-comments-item-bd table,
		  .gc-comments-item-bd pre {
		  margin-top: 0;
		  margin-bottom: 16px;
		}
		.gc-comments-item-bd hr {
		  height: 4px;
		  padding: 0;
		  margin: 16px 0;
		  background-color: #e7e7e7;
		  border: 0 none;
		}
		.gc-comments-item-bd ul,
		  .gc-comments-item-bd ol {
		  padding-left: 2em;
		}
		.gc-comments-item-bd ul.no-list,
		    .gc-comments-item-bd ol.no-list {
		  padding: 0;
		  list-style-type: none;
		}
		.gc-comments-item-bd ul ul,
		  .gc-comments-item-bd ul ol,
		  .gc-comments-item-bd ol ol,
		  .gc-comments-item-bd ol ul {
		  margin-top: 0;
		  margin-bottom: 0;
		}
		.gc-comments-item-bd li > p {
		  margin-top: 16px;
		}
		.gc-comments-item-bd dl {
		  padding: 0;
		}
		.gc-comments-item-bd dl dt {
		  padding: 0;
		  margin-top: 16px;
		  font-size: 1em;
		  font-style: italic;
		  font-weight: bold;
		}
		.gc-comments-item-bd dl dd {
		  padding: 0 16px;
		  margin-bottom: 16px;
		}
		.gc-comments-item-bd blockquote {
		  padding: 0 15px;
		  color: #777;
		  border-left: 4px solid #ddd;
		}
		.gc-comments-item-bd blockquote > :first-child {
		  margin-top: 0;
		}
		.gc-comments-item-bd blockquote > :last-child {
		  margin-bottom: 0;
		}
		.gc-comments-item-bd table {
		  display: block;
		  width: 100%;
		  overflow: auto;
		  word-break: normal;
		  word-break: keep-all;
		}
		.gc-comments-item-bd table th {
		  font-weight: bold;
		}
		.gc-comments-item-bd table th, .gc-comments-item-bd table td {
		  padding: 6px 13px;
		  border: 1px solid #ddd;
		}
		.gc-comments-item-bd table tr {
		  background-color: #fff;
		  border-top: 1px solid #ccc;
		}
		.gc-comments-item-bd table tr:nth-child(2n) {
		  background-color: #f8f8f8;
		}
		.gc-comments-item-bd img {
		  max-width: 100%;
		  box-sizing: content-box;
		  background-color: #fff;
		}
		.gc-comments-item-bd img[align=right] {
		  padding-left: 20px;
		}
		.gc-comments-item-bd img[align=left] {
		  padding-right: 20px;
		}
		.gc-comments-item-bd .emoji {
		  max-width: none;
		}
		.gc-comments-item-bd span.frame {
		  display: block;
		  overflow: hidden;
		}
		.gc-comments-item-bd span.frame > span {
		  display: block;
		  float: left;
		  width: auto;
		  padding: 7px;
		  margin: 13px 0 0;
		  overflow: hidden;
		  border: 1px solid #ddd;
		}
		.gc-comments-item-bd span.frame span img {
		  display: block;
		  float: left;
		}
		.gc-comments-item-bd span.frame span span {
		  display: block;
		  padding: 5px 0 0;
		  clear: both;
		  color: #333;
		}
		.gc-comments-item-bd span.align-center {
		  display: block;
		  overflow: hidden;
		  clear: both;
		}
		.gc-comments-item-bd span.align-center > span {
		  display: block;
		  margin: 13px auto 0;
		  overflow: hidden;
		  text-align: center;
		}
		.gc-comments-item-bd span.align-center span img {
		  margin: 0 auto;
		  text-align: center;
		}
		.gc-comments-item-bd span.align-right {
		  display: block;
		  overflow: hidden;
		  clear: both;
		}
		.gc-comments-item-bd span.align-right > span {
		  display: block;
		  margin: 13px 0 0;
		  overflow: hidden;
		  text-align: right;
		}
		.gc-comments-item-bd span.align-right span img {
		  margin: 0;
		  text-align: right;
		}
		.gc-comments-item-bd span.float-left {
		  display: block;
		  float: left;
		  margin-right: 13px;
		  overflow: hidden;
		}
		.gc-comments-item-bd span.float-left span {
		  margin: 13px 0 0;
		}
		.gc-comments-item-bd span.float-right {
		  display: block;
		  float: right;
		  margin-left: 13px;
		  overflow: hidden;
		}
		.gc-comments-item-bd span.float-right > span {
		  display: block;
		  margin: 13px auto 0;
		  overflow: hidden;
		  text-align: right;
		}
		.gc-comments-item-bd code,
		  .gc-comments-item-bd tt {
		  padding: 0;
		  padding-top: .2em;
		  padding-bottom: .2em;
		  margin: 0;
		  font-size: 85%;
		  background-color: rgba(0, 0, 0, .04);
		  border-radius: 3px;
		}
		.gc-comments-item-bd code:before, .gc-comments-item-bd code:after,
		    .gc-comments-item-bd tt:before,
		    .gc-comments-item-bd tt:after {
		  letter-spacing: -.2em;
		  content: "\00a0";
		}
		.gc-comments-item-bd code br,
		    .gc-comments-item-bd tt br {
		  display: none;
		}
		.gc-comments-item-bd del code {
		  text-decoration: inherit;
		}
		.gc-comments-item-bd pre > code {
		  padding: 0;
		  margin: 0;
		  font-size: 100%;
		  word-break: normal;
		  white-space: pre;
		  background: transparent;
		  border: 0;
		}
		.gc-comments-item-bd .highlight {
		  margin-bottom: 16px;
		}
		.gc-comments-item-bd .highlight pre,
		  .gc-comments-item-bd pre {
		  padding: 16px;
		  overflow: auto;
		  font-size: 85%;
		  line-height: 1.45;
		  background-color: #f7f7f7;
		  border-radius: 3px;
		}
		.gc-comments-item-bd .highlight pre {
		  margin-bottom: 0;
		  word-break: normal;
		}
		.gc-comments-item-bd pre {
		  word-wrap: normal;
		}
		.gc-comments-item-bd pre code,
		  .gc-comments-item-bd pre tt {
		  display: inline;
		  max-width: initial;
		  padding: 0;
		  margin: 0;
		  overflow: initial;
		  line-height: inherit;
		  word-wrap: normal;
		  background-color: transparent;
		  border: 0;
		}
		.gc-comments-item-bd pre code:before, .gc-comments-item-bd pre code:after,
		    .gc-comments-item-bd pre tt:before,
		    .gc-comments-item-bd pre tt:after {
		  content: normal;
		}
		.gc-comments-item-bd kbd {
		  display: inline-block;
		  padding: 3px 5px;
		  font-size: 11px;
		  line-height: 10px;
		  color: #555;
		  vertical-align: middle;
		  background-color: #fcfcfc;
		  border: solid 1px #ccc;
		  border-bottom-color: #bbb;
		  border-radius: 3px;
		  box-shadow: inset 0 -1px 0 #bbb;
		}

		.gc-comments-item-bd .pl-c {
		    color:#969896
		}
		.gc-comments-item-bd .pl-c1,
		.gc-comments-item-bd .pl-s .pl-v {
		    color:#0086b3
		}
		.gc-comments-item-bd .pl-e,
		.gc-comments-item-bd .pl-en {
		    color:#795da3
		}
		.gc-comments-item-bd .pl-s .pl-s1,
		.gc-comments-item-bd .pl-smi {
		    color:#333
		}
		.gc-comments-item-bd .pl-ent {
		    color:#63a35c
		}
		.gc-comments-item-bd .pl-k {
		    color:#a71d5d
		}
		.gc-comments-item-bd .pl-pds,
		.gc-comments-item-bd .pl-s,
		.gc-comments-item-bd .pl-s .pl-pse .pl-s1,
		.gc-comments-item-bd .pl-sr,
		.gc-comments-item-bd .pl-sr .pl-cce,
		.gc-comments-item-bd .pl-sr .pl-sra,
		.gc-comments-item-bd .pl-sr .pl-sre {
		    color:#183691
		}
		.gc-comments-item-bd .pl-v {
		    color:#ed6a43
		}
		.gc-comments-item-bd .pl-id {
		    color:#b52a1d
		}
		.gc-comments-item-bd .pl-ii {
		    background-color:#b52a1d;
		    color:#f8f8f8
		}
		.gc-comments-item-bd .pl-sr .pl-cce {
		    color:#63a35c;
		    font-weight:bold
		}
		.gc-comments-item-bd .pl-ml {
		    color:#693a17
		}
		.gc-comments-item-bd .pl-mh,
		.gc-comments-item-bd .pl-mh .pl-en,
		.gc-comments-item-bd .pl-ms {
		    color:#1d3e81;
		    font-weight:bold
		}
		.gc-comments-item-bd .pl-mq {
		    color:#008080
		}
		.gc-comments-item-bd .pl-mi {
		    color:#333;
		    font-style:italic
		}
		.gc-comments-item-bd .pl-mb {
		    color:#333;
		    font-weight:bold
		}
		.gc-comments-item-bd .pl-md {
		    background-color:#ffecec;
		    color:#bd2c00
		}
		.gc-comments-item-bd .pl-mi1 {
		    background-color:#eaffea;
		    color:#55a532
		}
		.gc-comments-item-bd .pl-mdr {
		    color:#795da3;
		    font-weight:bold
		}
		.gc-comments-item-bd .pl-mo {
		    color:#1d3e81
		}.gc-comments {
		    font:1em/1.5 Lantinghei SC,Microsoft Yahei,Hiragino Sans GB,Microsoft Sans Serif,WenQuanYi Micro Hei,sans-serif
		}
		.gc-comments a {
		    color:#333;
		    text-decoration: none;
		}
		.gc-comments-item {
		    border-radius: 2px;
		    border:1px solid #ccc;
		    margin-bottom:10px;
		}
		.gc-comments-item-hd {
		    border-top-left-radius: 2px;
		    border-top-right-radius: 2px;
		    position: relative;
		    padding: 10px;
		    padding-left: 40px;
		    line-height: 16px;
		    background: -webkit-gradient(linear, left top, left bottom, from(#fcfcfc), to(#f9f9f9)); background: -moz-linear-gradient(top, #fcfcfc, #f9f9f9);  background: -o-linear-gradient(top, #fcfcfc, #f9f9f9); background: linear-gradient(top, #fcfcfc, #f9f9f9); border-bottom: 1px solid #ccc;
		}
		.gc-comments-item-hd-avatar {
		    position: absolute;
		    left:10px;
		    top:5px;
		    width: 22px;height: 22px;
		    border-radius: 3px;
		    vertical-align: middle;
		    padding:1px;
		    background-color: white;
		    border:1px solid #CCC;
		}
		.gc-comments-item-hd-user {
		    font-weight: bold;
		    margin-left: .5em;
		    margin-right: .5em;
		}
		a.gc-comments-item-hd-date {
		    color:#999;
		    font-size:0.8em;
		}
		.gc-comments-item-bd {
		    padding-left: 1em;
		    padding-right: 1em;
		    font-size: 1em;
		    background-color:white;
		}
		.gc-comments-title {
		    font-size:1.6em;
		    line-height:1.6em;
		}
		.gc-comments-info {
		    background-image: -webkit-linear-gradient(top,#fcf8e3 0,#f8efc0 100%);
		    background-image: linear-gradient(to bottom,#fcf8e3 0,#f8efc0 100%);
		    background-repeat: repeat-x;
		    border-color: #f5e79e;
		    text-shadow: 0 1px 0 rgba(255,255,255,0.2);
		    -webkit-box-shadow: inset 0 1px 0 rgba(255,255,255,0.25),0 1px 2px rgba(0,0,0,0.05);
		    box-shadow: inset 0 1px 0 rgba(255,255,255,0.25),0 1px 2px rgba(0,0,0,0.05);
		    color: #8a6d3b;
		    background-color: #fcf8e3;
		    padding: 15px;
		    margin-bottom: 20px;
		    border: 1px solid transparent;
		    border-radius: 4px;
		    border-color: #faebcc;
		}
		.gc-comments-info a{
		    color:#428bca;
		}
		.gc-comments-loading {
		  width: 60px;
		  height: 60px;
		  position: relative;
		  margin-left: auto;
		  margin-right: auto;
		  font-size: .8em;
		  line-height: 60px;
		  text-align: center;
		  color:#DDD;
		}
		 
		.gc-comments-loading:before,
		.gc-comments-loading:after{
		content: ' ';
		  width: 100%;
		  height: 100%;
		  border-radius: 50%;
		  background-color: #6cc644;
		  opacity: 0.6;
		  position: absolute;
		  top: 0;
		  left: 0;
		   
		  -webkit-animation: gccommentsloadinganiamte 2.0s infinite ease-in-out;
		  animation: gccommentsloadinganiamte 2.0s infinite ease-in-out;
		}
		 
		.gc-comments-loading:after {
		  -webkit-animation-delay: -1.0s;
		  animation-delay: -1.0s;
		}
		 
		@-webkit-keyframes gccommentsloadinganiamte {
		  0%, 100% { -webkit-transform: scale(0.0) }
		  50% { -webkit-transform: scale(1.0) }
		}
		 
		@keyframes gccommentsloadinganiamte {
		  0%, 100% {
		    transform: scale(0.0);
		    -webkit-transform: scale(0.0);
		  } 50% {
		    transform: scale(1.0);
		    -webkit-transform: scale(1.0);
		  }
		}</style></head>

    <body>
        <div class="navigation" role="banner">
    <div class="navigation-wrapper">
    <a href="http://jixianqianduan.com/" class="logo">
    	
      <img src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/logo.png" alt="极限前端">
      
    </a>
    <span class="search-input" id="search-input">
      <input type="text" value="" class="search-text" placeholder="输入搜索关键字">
      <i class="icon-font i-search search-btn"></i>
    </span>
    <a href="javascript:void(0)" class="navigation-menu-button" id="js-mobile-menu">
    	<i class="icon-font i-list fa fa-bars"></i>
    </a>
    <span class="nav" role="navigation">
      <ul id="js-navigation-menu" class="navigation-menu">
      	
          
          <li class="nav-link">
            <a href="http://jixianqianduan.com/about/">关于</a>
          </li>
          
        
          
        
          
        
          
        
          
          <li class="nav-link">
            <a href="http://jixianqianduan.com/category/">所有文章</a>
          </li>
          
        
          
          <li class="nav-link">
            <a href="http://jixianqianduan.com/tags/">标签分类</a>
          </li>
          
        
          
        
          
        
          
        
          
        
          
        
          <li id="github-info" class="nav-link" title="https://github.com/ouvens">
            <a class="github-info" href="https://github.com/ouvens" target="_blank">github地址</a>
          </li>
      </ul>
    </span>
  </div>
</div>

            <div class="page-content">
        <div class="post">
<div class="post-header-container has-cover">
	<header class="post-header">
	  <h1 class="title">九种浏览器端缓存机制知多少</h1>
	  <p class="info">by <strong>ouven</strong></p>
	</header>
</div>
<div class="wrapper">



<div class="post-meta">
	<div class="post-date">2015年12月28日</div>
	<div class="post-categories">
	 in  
		<a target="_blank" href="http://jixianqianduan.com/category/?cate=frontend-javascript">Frontend-javascript</a>
	  
	</div>
</div>	

<article class="post-content">
  <p>  浏览器缓存（Browser Caching）是浏览器端保存数据用于快速读取或避免重复资源请求的优化机制，有效的缓存使用可以避免重复的网络请求和浏览器快速地读取本地数据，整体上加速网页展示给用户。浏览器端缓存的机制种类较多，总体归纳为九种，这里详细分析下这九种缓存机制的原理和使用场景。打开浏览器的调试模式-&gt;resources左侧就有浏览器的8种缓存机制。</p>

<p>  <img src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/Fh5DJkgam82rD_89kXdaxA3cWBC7" alt=""></p>

<h3 id="http">一、http缓存</h3>
<p>  http缓存是基于HTTP协议的浏览器文件级缓存机制。即针对文件的重复请求情况下，浏览器可以根据协议头判断从服务器端请求文件还是从本地读取文件，chrome控制台下的Frames即展示的是浏览器的http文件级缓存。以下是浏览器缓存的整个机制流程。主要是针对重复的http请求，在有缓存的情况下判断过程主要分3步：</p>

<ul>
  <li>判断expires，如果未过期，直接读取http缓存文件，不发http请求，否则进入下一步</li>
  <li>判断是否含有etag，有则带上if-none-match发送请求，未修改返回304，修改返回200，否则进入下一步</li>
  <li>判断是否含有last-modified，有则带上if-modified-since发送请求，无效返回200，有效返回304，否则直接向服务器请求</li>
</ul>

<p>   <img src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/Fg9HGSm1K7AlSY_67ZwhTbKWG7QA" alt=""></p>

<p>如果通过etag和last-modified判断，即使返回304有至少有一次http请求，只不过返回的是304的返回内容，而不是文件内容。所以合理设计实现expires参数可以减少较多的浏览器请求。</p>

<h3 id="websql">二、websql</h3>
<p>   websql这种方式只有较新的chrome浏览器支持，并以一个独立规范形式出现，主要有以下特点</p>

<ul>
  <li>Web Sql 数据库API 实际上不是HTML5规范的组成部分；</li>
  <li>在HTML5之前就已经存在了，是单独的规范；</li>
  <li>它是将数据以数据库的形式存储在客户端，根据需求去读取；</li>
  <li>跟Storage的区别是： Storage和Cookie都是以键值对的形式存在的；</li>
  <li>Web Sql 更方便于检索，允许sql语句查询；</li>
  <li>让浏览器实现小型数据库存储功能；</li>
  <li>这个数据库是集成在浏览器里面的，目前主流浏览器基本都已支持；</li>
</ul>

<p>  websql API主要包含三个核心方法：</p>

<ul>
  <li>openDatabase : 这个方法使用现有数据库或创建新数据库创建数据库对象。</li>
  <li>transaction : 这个方法允许我们根据情况控制事务提交或回滚。</li>
  <li>executeSql : 这个方法用于执行真实的SQL查询。</li>
</ul>

<p>   
<strong>openDatabase方法可以打开已经存在的数据库，不存在则创建</strong></p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs coffeescript">	<span class="kd"><span class="hljs-reserved">var</span></span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">openDatabase</span><span class="p">(</span><span class="s1"><span class="hljs-string">'mydatabase'</span></span><span class="p">,</span> <span class="s1"><span class="hljs-string">'2.0'</span></span><span class="p">,</span> <span class="s1"><span class="hljs-string">'my db'</span></span><span class="p">,</span> <span class="mi"><span class="hljs-number">2</span></span> <span class="o">*</span> <span class="mi"><span class="hljs-number">1024</span></span><span class="p">);</span>
</code></pre>
</div>

<p>  openDatabasek中五个参数分别为：数据库名、版本号、描述、数据库大小、创建回调。创建回调没有也可以创建数据库。</p>

<p><strong>database.transaction() 函数用来查询，executeSql()用于执行sql语句</strong></p>

<p>  例如在mydatabase数据库中创建表t1：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs javascript">   <span class="kd"><span class="hljs-keyword">var</span></span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">openDatabase</span><span class="p">(</span><span class="s1"><span class="hljs-string">' mydatabase '</span></span><span class="p">,</span> <span class="s1"><span class="hljs-string">'1.0'</span></span><span class="p">,</span> <span class="s1"><span class="hljs-string">'Test DB'</span></span><span class="p">,</span> <span class="mi"><span class="hljs-number">2</span></span> <span class="o">*</span> <span class="mi"><span class="hljs-number">1024</span></span> <span class="o">*</span> <span class="mi"><span class="hljs-number">1024</span></span><span class="p">);</span>  
   <span class="nx">db</span><span class="p">.</span><span class="nx">transaction</span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="nx"><span class="hljs-function"><span class="hljs-params">tx</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="p">{</span>    
      <span class="nx">tx</span><span class="p">.</span><span class="nx">executeSql</span><span class="p">(</span><span class="s1"><span class="hljs-string">'CREATE TABLE IF NOT EXISTS t1 (id unique, log)'</span></span><span class="p">);</span>  
   <span class="p">});</span>
</code></pre>
</div>

<p>  插入操作</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs sql"><span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">openDatabase</span><span class="p">(</span><span class="s1">'mydatabase'</span><span class="p">,</span> <span class="s1">'2.0'</span><span class="p">,</span> <span class="s1">'my db'</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">);</span>

   <span class="nx">db</span><span class="p">.</span><span class="nx">transaction</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tx</span><span class="p">)</span> <span class="p">{</span> 
      <span class="nx">tx</span><span class="p">.</span><span class="nx">executeSql</span><span class="p">(</span><span class="s1">'<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> t1 (id <span class="hljs-keyword">unique</span>, <span class="hljs-keyword">log</span>)<span class="hljs-string">'</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">);</span></span></span><span class="hljs-operator"><span class="hljs-string">  
      </span></span><span class="nx"><span class="hljs-operator"><span class="hljs-string">tx</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">.</span></span></span><span class="nx"><span class="hljs-operator"><span class="hljs-string">executeSql</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">(</span></span></span><span class="s1"><span class="hljs-operator"><span class="hljs-string">'</span><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1 (id, <span class="hljs-keyword">log</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">"foobar"</span>)<span class="hljs-string">'</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">);</span></span></span><span class="hljs-operator"><span class="hljs-string">  
      </span></span><span class="nx"><span class="hljs-operator"><span class="hljs-string">tx</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">.</span></span></span><span class="nx"><span class="hljs-operator"><span class="hljs-string">executeSql</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">(</span></span></span><span class="s1"><span class="hljs-operator"><span class="hljs-string">'</span><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1 (id, <span class="hljs-keyword">log</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">"logmsg"</span>)<span class="hljs-string">'</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">);</span></span></span><span class="hljs-operator"><span class="hljs-string">  
   </span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">});</span></span></span><span class="hljs-operator"><span class="hljs-string">
</span></span></code></pre>
</div>

<p>  在插入新记录时，我们还可以传递动态值，如：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs sql">   <span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">openDatabase</span><span class="p">(</span><span class="s1">' mydatabase '</span><span class="p">,</span> <span class="s1">'2.0'</span><span class="p">,</span> <span class="s1">'my db'</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">);</span>  
   <span class="nx">db</span><span class="p">.</span><span class="nx">transaction</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tx</span><span class="p">)</span> <span class="p">{</span>    
     <span class="nx">tx</span><span class="p">.</span><span class="nx">executeSql</span><span class="p">(</span><span class="s1">'<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> t1 (id <span class="hljs-keyword">unique</span>, <span class="hljs-keyword">log</span>)<span class="hljs-string">'</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">);</span></span></span><span class="hljs-operator"><span class="hljs-string">  
     </span></span><span class="nx"><span class="hljs-operator"><span class="hljs-string">tx</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">.</span></span></span><span class="nx"><span class="hljs-operator"><span class="hljs-string">executeSql</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">(</span></span></span><span class="s1"><span class="hljs-operator"><span class="hljs-string">'</span><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1 (id,<span class="hljs-keyword">log</span>) <span class="hljs-keyword">VALUES</span> (?, ?<span class="hljs-string">'</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">),</span></span></span><span class="hljs-operator"><span class="hljs-string"> </span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">[</span></span></span><span class="nx"><span class="hljs-operator"><span class="hljs-string">e_id</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">,</span></span></span><span class="hljs-operator"><span class="hljs-string"> </span></span><span class="nx"><span class="hljs-operator"><span class="hljs-string">e_log</span></span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">];</span></span></span><span class="hljs-operator"><span class="hljs-string">  </span></span><span class="c1"><span class="hljs-operator"><span class="hljs-string">//e_id和e_log是外部变量</span></span></span><span class="hljs-operator"><span class="hljs-string">
   </span></span><span class="p"><span class="hljs-operator"><span class="hljs-string">});</span></span></span><span class="hljs-operator"><span class="hljs-string">
</span></span></code></pre>
</div>

<p>  读操作，如果要读取已经存在的记录，我们使用一个回调捕获结果：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs php">   <span class="kd"><span class="hljs-keyword">var</span></span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">openDatabase</span><span class="p">(</span><span class="nx">mydatabase</span><span class="p">,</span> <span class="s1"><span class="hljs-string">'2.0'</span></span><span class="p">,</span> <span class="s1"><span class="hljs-string">'my db'</span></span><span class="p">,</span> <span class="mi"><span class="hljs-number">2</span></span><span class="o">*</span><span class="mi"><span class="hljs-number">1024</span></span><span class="p">);</span>     
	  <span class="nx">db</span><span class="p">.</span><span class="nx">transaction</span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="nx"><span class="hljs-function"><span class="hljs-params">tx</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="p">{</span> 
      <span class="nx">tx</span><span class="p">.</span><span class="nx">executeSql</span><span class="p">(</span><span class="s1"><span class="hljs-string">'CREATE TABLE IF NOT EXISTS t1 (id unique, log)'</span></span><span class="p">);</span>  
      <span class="nx">tx</span><span class="p">.</span><span class="nx">executeSql</span><span class="p">(</span><span class="s1"><span class="hljs-string">'INSERT INTO t1 (id, log) VALUES (1, "foobar")'</span></span><span class="p">);</span>  
      <span class="nx">tx</span><span class="p">.</span><span class="nx">executeSql</span><span class="p">(</span><span class="s1"><span class="hljs-string">'INSERT INTO t1 (id, log) VALUES (2, "logmsg")'</span></span><span class="p">);</span>  
   <span class="p">});</span>  
   <span class="nx">db</span><span class="p">.</span><span class="nx">transaction</span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="nx"><span class="hljs-function"><span class="hljs-params">tx</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="p">{</span> 
      <span class="nx">tx</span><span class="p">.</span><span class="nx">executeSql</span><span class="p">(</span><span class="s1"><span class="hljs-string">'SELECT * FROM t1, [], function (tx, results) { 
      var len = results.rows.length, i;  
      msg = "&lt;p&gt;Found rows: " + len + "&lt;/p&gt;";  
      document.querySelector('</span></span><span class="err"><span class="hljs-comment">#</span></span><span class="nx"><span class="hljs-comment">status</span></span><span class="err"><span class="hljs-comment">'</span></span><span class="p"><span class="hljs-comment">).</span></span><span class="nx"><span class="hljs-comment">innerHTML</span></span><span class="hljs-comment"> </span><span class="o"><span class="hljs-comment">+=</span></span><span class="hljs-comment">  </span><span class="nx"><span class="hljs-comment">msg</span></span><span class="p"><span class="hljs-comment">;</span></span><span class="hljs-comment">  </span>
      <span class="k"><span class="hljs-keyword">for</span></span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
         <span class="nx">alert</span><span class="p">(</span><span class="nx">results</span><span class="p">.</span><span class="nx">rows</span><span class="p">.</span><span class="nx">item</span><span class="p">(</span><span class="nx">i</span><span class="p">).</span><span class="nx">log</span> <span class="p">);</span>  
      <span class="p">}</span> 
    <span class="p">},</span> <span class="kc"><span class="hljs-keyword">null</span></span><span class="p">);</span>  
   <span class="p">});</span>
</code></pre>
</div>

<h3 id="indexdb">三、indexDB</h3>

<p>  IndexedDB 是一个为了能够在客户端存储可观数量的结构化数据，并且在这些数据上使用索引进行高性能检索的 API。虽然 DOM 存储 对于存储少量数据是非常有用的，但是它对大量结构化数据的存储就显得力不从心了。IndexedDB 则提供了这样的一个解决方案。
  IndexedDB 分别为同步和异步访问提供了单独的 API 。同步 API 本来是要用于仅供 Web Workers  内部使用，但是还没有被任何浏览器所实现。异步 API 在 Web Workers 内部和外部都可以使用，另外浏览器可能对indexDB有50M大小的限制，一般用户保存大量用户数据并要求数据之间有搜索需要的场景。</p>

<ul>
  <li>异步API</li>
</ul>

<p>  异步 API 方法调用完后会立即返回，而不会阻塞调用线程。要异步访问数据库，要调用 window 对象 indexedDB 属性的 open() 方法。该方法返回一个 IDBRequest 对象 (IDBOpenDBRequest)；异步操作通过在 IDBRequest 对象上触发事件来和调用程序进行通信。</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs diff"><span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBFactory</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">提供了对数据库的访问。这是由全局对象</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">indexedDB</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">实现的接口，因而也是该</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">API</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">的入口。</span></span>
<span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBCursor</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">遍历对象存储空间和索引。</span></span>
<span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBCursorWithValue</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">遍历对象存储空间和索引并返回游标的当前值。</span></span>
<span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBDatabase</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">表示到数据库的连接。只能通过这个连接来拿到一个数据库事务。</span></span>
<span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBEnvironment</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">提供了到客户端数据库的访问。它由</span></span><span class="hljs-deletion"> </span><span class="nb"><span class="hljs-deletion">window</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">对象实现。</span></span>
<span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBIndex</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">提供了到索引元数据的访问。</span></span>
<span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBKeyRange</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">定义键的范围。</span></span>
<span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBObjectStore</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">表示一个对象存储空间。</span></span>
<span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBOpenDBRequest</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">表示一个打开数据库的请求。</span></span>
<span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBRequest</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">提供了到数据库异步请求结果和数据库的访问。这也是在你调用一个异步方法时所得到的。</span></span>
<span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBTransaction</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">表示一个事务。你在数据库上创建一个事务，指定它的范围（例如你希望访问哪一个对象存储空间），并确定你希望的访问类型（只读或写入）。</span></span>
<span class="o"><span class="hljs-deletion">-</span></span><span class="hljs-deletion"> </span><span class="nx"><span class="hljs-deletion">IDBVersionChangeEvent</span></span><span class="hljs-deletion"> </span><span class="err"><span class="hljs-deletion">表明数据库的版本号已经改变。</span></span>
</code></pre>
</div>

<ul>
  <li>同步API</li>
</ul>

<p>  规范里面还定义了 <a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">API 的同步</a>版本。同步 API 还没有在任何浏览器中得以实现。它原本是要和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">webWork</a> 一起使用的。</p>

<p>http://mxr.mozilla.org/mozilla-central/source/modules/libpref/src/init/all.js
http://caniuse.com/#feat=indexeddb</p>

<h3 id="cookie">四、cookie</h3>

<p>  Cookie（或者Cookies），指一般网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）。cookie一般通过http请求中在头部一起发送到服务器端。一条cookie记录主要由键、值、域、过期时间、大小组成，一般用户保存用户的认证信息。cookie最大长度和域名个数由不同浏览器决定，具体如下：</p>

<table>
  <thead>
    <tr>
      <th>浏览器</th>
      <th>支持域名个数</th>
      <th>最大长度</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>IE7以上</td>
      <td>50个</td>
      <td>4095B</td>
    </tr>
    <tr>
      <td>Firefox</td>
      <td>50个</td>
      <td>4097B</td>
    </tr>
    <tr>
      <td>Opera</td>
      <td>30个</td>
      <td>4096B</td>
    </tr>
    <tr>
      <td>Safari/WebKit</td>
      <td>无限制</td>
      <td>4097B</td>
    </tr>
  </tbody>
</table>

<p>  不同域名之间的cookie信息是独立的，如果需要设置共享可以在服务器端设置cookie的path和domain来实现共享。浏览器端也可以通过document.cookie来获取cookie，并通过js浏览器端也可以方便地读取/设置cookie的值。</p>

<p>https://github.com/component/cookie/blob/master/index.js</p>

<h3 id="localstorage">五、localstorage</h3>
<p>  localStorage是html5的一种新的本地缓存方案，目前用的比较多，一般用来存储ajax返回的数据，加快下次页面打开时的渲染速度。</p>

<table>
  <thead>
    <tr>
      <th>浏览器</th>
      <th>最大长度</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>IE9以上</td>
      <td>5M</td>
    </tr>
    <tr>
      <td>Firefox 8以上</td>
      <td>5.24M</td>
    </tr>
    <tr>
      <td>Opera</td>
      <td>2M</td>
    </tr>
    <tr>
      <td>Safari/WebKit</td>
      <td>2.6M</td>
    </tr>
  </tbody>
</table>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs cs"><span class="c1"><span class="hljs-comment">//localStorage核心API:</span></span>
<span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx"><span class="hljs-keyword">value</span></span><span class="p">)</span>	<span class="c1"><span class="hljs-comment">//设置记录</span></span>
<span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>			<span class="c1"><span class="hljs-comment">//获取记录</span></span>
<span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>		<span class="c1"><span class="hljs-comment">//删除该域名下单条记录</span></span>
<span class="nx">localStorage</span><span class="p">.</span><span class="nx">clear</span><span class="p">()</span>				<span class="c1"><span class="hljs-comment">//删除该域名下所有记录</span></span>
</code></pre>
</div>

<p>  值得注意的是，localstorage大小有限制，不适合存放过多的数据，如果数据存放超过最大限制会报错，并移除最先保存的数据。</p>

<p>https://github.com/machao/localStorage</p>

<h3 id="sessionstorage">六、sessionstorage</h3>
<p>  sessionStorage和localstorage类似，但是浏览器关闭则会全部删除，api和localstorage相同，实际项目中使用较少。</p>

<h3 id="application-cache">七、application cache</h3>

<p>  application cahce是将大部分图片资源、js、css等静态资源放在manifest文件配置中。当页面打开时通过manifest文件来读取本地文件或是请求服务器文件。
  离线访问对基于网络的应用而言越来越重要。虽然所有浏览器都有缓存机制，但它们并不可靠，也不一定总能起到预期的作用。HTML5 使用ApplicationCache 接口可以解决由离线带来的部分难题。前提是你需要访问的web页面至少被在线访问过一次。
  使用缓存接口可为您的应用带来以下三个优势：</p>

<ul>
  <li>离线浏览 – 用户可在离线时浏览您的完整网站</li>
  <li>速度 – 缓存资源为本地资源，因此加载速度较快。</li>
  <li>服务器负载更少 – 浏览器只会从发生了更改的服务器下载资源。</li>
</ul>

<p>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。并在下一次生效。离线的情况下，浏览器就直接使用离线存储的资源。</p>

<p>  一个简单的离线页面主要包含以下几个部分：</p>

<p><strong>index.html</strong></p>

<div class="language-html highlighter-rouge"><pre class="highlight"><code class="hljs xml"><span class="nt"><span class="hljs-tag">&lt;<span class="hljs-title">html</span></span></span><span class="hljs-tag"> </span><span class="na"><span class="hljs-tag"><span class="hljs-attribute">manifest</span>=</span></span><span class="s"><span class="hljs-tag"><span class="hljs-value">"clock.manifest"</span></span></span><span class="nt"><span class="hljs-tag">&gt;</span></span>
  <span class="nt"><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span></span>
    <span class="nt"><span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span></span>AppCache Test<span class="nt"><span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span></span>
    <span class="nt"><span class="hljs-tag">&lt;<span class="hljs-title">link</span></span></span><span class="hljs-tag"> </span><span class="na"><span class="hljs-tag"><span class="hljs-attribute">rel</span>=</span></span><span class="s"><span class="hljs-tag"><span class="hljs-value">"stylesheet"</span></span></span><span class="hljs-tag"> </span><span class="na"><span class="hljs-tag"><span class="hljs-attribute">href</span>=</span></span><span class="s"><span class="hljs-tag"><span class="hljs-value">"clock.css"</span></span></span><span class="nt"><span class="hljs-tag">&gt;</span></span>
    <span class="nt"><span class="hljs-tag">&lt;<span class="hljs-title">script</span> </span></span><span class="na"><span class="hljs-tag"><span class="hljs-attribute">src</span>=</span></span><span class="s"><span class="hljs-tag"><span class="hljs-value">"clock.js"</span></span></span><span class="nt"><span class="hljs-tag">&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></span>
  <span class="nt"><span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span></span>
  <span class="nt"><span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span></span>
    <span class="nt"><span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">output</span></span></span><span class="hljs-tag"> </span><span class="na"><span class="hljs-tag"><span class="hljs-attribute">id</span>=</span></span><span class="s"><span class="hljs-tag"><span class="hljs-value">"clock"</span></span></span><span class="nt"><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">output</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span></span>
    <span class="nt"><span class="hljs-tag">&lt;<span class="hljs-title">div</span></span></span><span class="hljs-tag"> </span><span class="na"><span class="hljs-tag"><span class="hljs-attribute">id</span>=</span></span><span class="s"><span class="hljs-tag"><span class="hljs-value">"log"</span></span></span><span class="nt"><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></span>
  <span class="nt"><span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span></span>
<span class="nt"><span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></span>
</code></pre>
</div>

<p><strong>clock.manifest</strong></p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs objectivec"><span class="nx"><span class="hljs-built_in">CACHE</span></span> <span class="nx">MANIFEST</span>
<span class="err"><span class="hljs-preprocessor">#</span></span><span class="nx"><span class="hljs-preprocessor">VERSION</span></span><span class="hljs-preprocessor"> </span><span class="mf"><span class="hljs-preprocessor">1.0</span></span>
<span class="nl"><span class="hljs-built_in">CACHE</span></span><span class="p">:</span>
<span class="nx">clock</span><span class="p"><span class="hljs-variable">.</span></span><span class="nx"><span class="hljs-variable">css</span></span>
<span class="nx">clock</span><span class="p"><span class="hljs-variable">.</span></span><span class="nx"><span class="hljs-variable">js</span></span>
</code></pre>
</div>

<p>clock.js和clock.css为独立的另外文件。
  另外需要注意的是更新缓存。在程序中，你可以通过window.applicationCache 对象来访问浏览器的app cache。你可以查看 status 属性来获取cache的当前状态：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs javascript"><span class="kd"><span class="hljs-keyword">var</span></span> <span class="nx">appCache</span> <span class="o">=</span> <span class="nb"><span class="hljs-built_in">window</span></span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">;</span>
<span class="k"><span class="hljs-keyword">switch</span></span> <span class="p">(</span><span class="nx">appCache</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
  <span class="k"><span class="hljs-keyword">case</span></span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">UNCACHED</span><span class="err">:</span> <span class="c1"><span class="hljs-comment">// UNCACHED == 0</span></span>
    <span class="k"><span class="hljs-keyword">return</span></span> <span class="s1"><span class="hljs-string">'UNCACHED'</span></span><span class="p">;</span>
    <span class="k"><span class="hljs-keyword">break</span></span><span class="p">;</span>
  <span class="k"><span class="hljs-keyword">case</span></span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">IDLE</span><span class="err">:</span> <span class="c1"><span class="hljs-comment">// IDLE == 1</span></span>
    <span class="k"><span class="hljs-keyword">return</span></span> <span class="s1"><span class="hljs-string">'IDLE'</span></span><span class="p">;</span>
    <span class="k"><span class="hljs-keyword">break</span></span><span class="p">;</span>
  <span class="k"><span class="hljs-keyword">case</span></span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">CHECKING</span><span class="err">:</span> <span class="c1"><span class="hljs-comment">// CHECKING == 2</span></span>
    <span class="k"><span class="hljs-keyword">return</span></span> <span class="s1"><span class="hljs-string">'CHECKING'</span></span><span class="p">;</span>
    <span class="k"><span class="hljs-keyword">break</span></span><span class="p">;</span>
  <span class="k"><span class="hljs-keyword">case</span></span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">DOWNLOADING</span><span class="err">:</span> <span class="c1"><span class="hljs-comment">// DOWNLOADING == 3</span></span>
    <span class="k"><span class="hljs-keyword">return</span></span> <span class="s1"><span class="hljs-string">'DOWNLOADING'</span></span><span class="p">;</span>
    <span class="k"><span class="hljs-keyword">break</span></span><span class="p">;</span>
  <span class="k"><span class="hljs-keyword">case</span></span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">UPDATEREADY</span><span class="err">:</span>  <span class="c1"><span class="hljs-comment">// UPDATEREADY == 4</span></span>
    <span class="k"><span class="hljs-keyword">return</span></span> <span class="s1"><span class="hljs-string">'UPDATEREADY'</span></span><span class="p">;</span>
    <span class="k"><span class="hljs-keyword">break</span></span><span class="p">;</span>
  <span class="k"><span class="hljs-keyword">case</span></span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">OBSOLETE</span><span class="err">:</span> <span class="c1"><span class="hljs-comment">// OBSOLETE == 5</span></span>
    <span class="k"><span class="hljs-keyword">return</span></span> <span class="s1"><span class="hljs-string">'OBSOLETE'</span></span><span class="p">;</span>
    <span class="k"><span class="hljs-keyword">break</span></span><span class="p">;</span>
  <span class="nl"><span class="hljs-keyword">default</span></span><span class="p">:</span>
    <span class="k"><span class="hljs-keyword">return</span></span> <span class="s1"><span class="hljs-string">'UKNOWN CACHE STATUS'</span></span><span class="p">;</span>
    <span class="k"><span class="hljs-keyword">break</span></span><span class="p">;</span>
<span class="p">};</span>
</code></pre>
</div>

<p>  为了通过编程更新cache，首先调用 applicationCache.update()。这将会试图更新用户的 cache（要求manifest文件已经改变）。最后，当 applicationCache.status 处于 UPDATEREADY 状态时， 调用applicationCache.swapCache()，旧的cache就会被置换成新的。</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs javascript"><span class="kd"><span class="hljs-keyword">var</span></span> <span class="nx">appCache</span> <span class="o">=</span> <span class="nb"><span class="hljs-built_in">window</span></span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">;</span>
<span class="nx">appCache</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span> <span class="c1"><span class="hljs-comment">// Attempt to update the user’s cache.</span></span>
<span class="err">…</span>
<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="nx">appCache</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="nb"><span class="hljs-built_in">window</span></span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">.</span><span class="nx">UPDATEREADY</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">appCache</span><span class="p">.</span><span class="nx">swapCache</span><span class="p">();</span>  <span class="c1"><span class="hljs-comment">// The fetch was successful, swap in the new cache.</span></span>
<span class="p">}</span>
</code></pre>
</div>

<p>  这里是通过更新menifest文件来控制其它文件更新的。</p>

<h3 id="cachestorage">八、cacheStorage</h3>
<p>  CacheStorage是在ServiceWorker的规范中定义的。CacheStorage 可以保存每个serverWorker申明的cache对象，cacheStorage有open、match、has、delete、keys五个核心方法，可以对cache对象的不同匹配进行不同的响应。</p>

<p><strong>cacheStorage.has()</strong>
如果包含cache对象，则返回一个promise对象。
<strong>cacheStorage.open()</strong>
打开一个cache对象，则返回一个promise对象。
<strong>cacheStorage.delete()</strong>
删除cache对象，成功则返回一个promise对象，否则返回false。
<strong>cacheStorage.keys()</strong>
含有keys中字符串的任意一个，则返回一个promise对象。
<strong>cacheStorage.delete()</strong>
匹配key中含有该字符串的cache对象，返回一个promise对象。</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs php"><span class="nx">caches</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1"><span class="hljs-string">'v1'</span></span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="p">{</span>
  <span class="nx">caches</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1"><span class="hljs-string">'v1'</span></span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="nx"><span class="hljs-function"><span class="hljs-params">cache</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="p">{</span>
      <span class="k"><span class="hljs-keyword">return</span></span> <span class="nx">cache</span><span class="p">.</span><span class="nx">addAll</span><span class="p">(</span><span class="nx">myAssets</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}).</span><span class="k"><span class="hljs-keyword">catch</span></span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="p">{</span>
  <span class="nx">someCacheSetupfunction</span><span class="p">();</span>
<span class="p">});;</span>
</code></pre>
</div>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs php">
<span class="kd"><span class="hljs-keyword">var</span></span> <span class="nx">response</span><span class="p">;</span>
<span class="kd"><span class="hljs-keyword">var</span></span> <span class="nx">cachedResponse</span> <span class="o">=</span> <span class="nx">caches</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">request</span><span class="p">).</span><span class="k"><span class="hljs-keyword">catch</span></span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="p">{</span>
  <span class="k"><span class="hljs-keyword">return</span></span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">request</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="nx"><span class="hljs-function"><span class="hljs-params">r</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="p">{</span>
  <span class="nx">response</span> <span class="o">=</span> <span class="nx">r</span><span class="p">;</span>
  <span class="nx">caches</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1"><span class="hljs-string">'v1'</span></span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="nx"><span class="hljs-function"><span class="hljs-params">cache</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="p">{</span>
    <span class="nx">cache</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
  <span class="p">});</span>  
  <span class="k"><span class="hljs-keyword">return</span></span> <span class="nx">response</span><span class="p">.</span><span class="nx"><span class="hljs-keyword">clone</span></span><span class="p">();</span>
<span class="p">}).</span><span class="k"><span class="hljs-keyword">catch</span></span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="p">{</span>
  <span class="k"><span class="hljs-keyword">return</span></span> <span class="nx">caches</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="s1"><span class="hljs-string">'/sw-test/gallery/myLittleVader.jpg'</span></span><span class="p">);</span>
<span class="p">});</span>

</code></pre>
</div>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code class="hljs javascript"><span class="nx">then</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1"><span class="hljs-string">'activate'</span></span><span class="p">,</span> <span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="nx"><span class="hljs-function"><span class="hljs-params">event</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="p">{</span>
  <span class="kd"><span class="hljs-keyword">var</span></span> <span class="nx">cacheWhitelist</span> <span class="o">=</span> <span class="p">[</span><span class="s1"><span class="hljs-string">'v2'</span></span><span class="p">];</span>

  <span class="nx">event</span><span class="p">.</span><span class="nx">waitUntil</span><span class="p">(</span>
    <span class="nx">caches</span><span class="p">.</span><span class="nx">keys</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="nx"><span class="hljs-function"><span class="hljs-params">keyList</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="p">{</span>
      <span class="k"><span class="hljs-keyword">return</span></span> <span class="nx"><span class="hljs-built_in">Promise</span></span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">keyList</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="nx"><span class="hljs-function"><span class="hljs-params">key</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="p">{</span>
        <span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="nx">cacheWhitelist</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi"><span class="hljs-number">1</span></span><span class="p">)</span> <span class="p">{</span>
          <span class="k"><span class="hljs-keyword">return</span></span> <span class="nx">caches</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">keyList</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
        <span class="p">}</span>
      <span class="p">});</span>
    <span class="p">})</span>
  <span class="p">);</span>
<span class="p">});</span>

</code></pre>
</div>

<p>https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage</p>

<h3 id="flash">九、flash缓存</h3>
<p>  这种方式基本不用，这一方法主要基于flash有读写浏览器端本地目录的功能，同时也可以向js提供调用的api，则页面可以通过js调用flash去读写特定的磁盘目录，达到本地数据缓存的目的。</p>

<h4 id="ps">注释PS</h4>

<ul>
  <li>Web Storage / Web SQL Database / Indexed Database 的数据都存储在浏览器对应的用户配置文件目录(user profile directory)下，以 Windows 7 为例，Chrome 的数据存储在”C:\Users\your-account-name\AppData\Local\Google\Chrome\User Data\Default\”下，而 Firefox 的数据存储在”C:\Users\your-account-name\AppData\Local\Mozilla\Firefox\Profiles\”目录下。</li>
  <li>
    <p>cookie文件存储于documents and settings\userName\cookie\文件夹下。通常的命名格式为：userName@domain.txt。</p>
  </li>
  <li>较多的缓存机制目前主流浏览器并不兼容，不过可以使用polyfill的方法来处理</li>
</ul>

<p>  浏览器涉及的缓存方式主要包含这些，具体结合自己的业务场景进行选择使用</p>

</article>


<div class="tags">
	<strong>Tags:</strong> <a target="_blank" href="http://jixianqianduan.com/tags/?tag=%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98">浏览器缓存</a>,&nbsp;<a target="_blank" href="http://jixianqianduan.com/tags/?tag=cache">cache</a>
</div>


	<script src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/github.comment.js"></script>
	<div class="gc-comments" data-repos="ouvens/ouvens.github.io" data-issues="3">
	    <div class="gc-comments-title">
	        评论
	    <div style="display:inline-block;position:relative;top:0.15em;height:20px;"><iframe style="display:inline;" src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/github-btn.html" frameborder="0" scrolling="0" width="120px" height="20px"></iframe></div></div>
	    <div class="gc-comments-info">
	        想在此留下评论，请访问 <a href="https://github.com/ouvens/ouvens.github.io/issues/3">https://github.com/ouvens/ouvens.github.io/issues/3</a> 提交评论
	    </div>
	<div class="gc-comments-loading" style="display: none;">Loading</div><div class="gc-comments-item">
		    <div class="gc-comments-item-hd">
		        <img class="gc-comments-item-hd-avatar" src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/14261588">
		        <a href="https://github.com/Cow258" class="gc-comments-item-hd-user">Cow258</a>
		        <a href="https://github.com/ouvens/ouvens.github.io/issues/3#issuecomment-255603897" class="gc-comments-item-hd-date">2016-10-24 02:07:48</a>
		    </div>
		    <div class="gc-comments-item-bd">
		        <p></p><p>Win10 64 Pro Node.js 6.9.1</p>

<p>1.块级作用域<br>
第1次 ES5: 21ms,ES6: 12ms<br>
之後 ES5: 10ms,ES6: 11ms</p>

<p>2.Class<br>
ES5: 2ms,ES6: 3ms</p>

<p>3.Map<br>
ES5: 7ms,ES6: 75ms</p>

<p>4.字符串模板<br>
ES5: 5ms,ES6: 14ms</p><p></p>
		    </div>
		</div></div>
</div>
</div>


    </div>
    
<div class="qr-code qr-code-pay" title="加个微信交流交流">
    <img src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/qr-code-person.jpg" width="200" height="200" alt="公众号">
    <p>加我赏红包，哈哈哈</p>
</div>

<div class="qr-code qr-code-wx" title="定期获取更新动态">
    <img src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/qrcode.jpg" width="200" height="200" alt="公众号">
    <p>欢迎关注 <strong>极限前端</strong> 公众号</p>
</div>


    
<footer class="site-footer">
  <div class="wrapper">
    <h3 class="footer-heading">极限前端</h3>
    <div class="site-navigation">
    	<p><strong>站内</strong></p>
      <ul class="pages">
        
        
          <li class="nav-link"><a href="http://jixianqianduan.com/about/">关于</a>
        
        
        
        
        
        
        
        
        
          </li><li class="nav-link"><a href="http://jixianqianduan.com/category/">所有文章</a>
        
        
        
          </li><li class="nav-link"><a href="http://jixianqianduan.com/tags/">标签分类</a>
        
        
        
        
        
        
        
        
        
        
        
        
      </li></ul>
    </div>
    <div class="site-contact">
    	<p><strong>相关链接</strong></p>
        <ul class="social-media-list">
      	<li>
      		<a href="mailto:ouvenzhang@tencent.com">
	      		<i class="icon-font i-star"></i>
	      		<span class="username">ouvenzhang@tencent.com</span>
      		</a>
      	</li>

      	
	      	
	      	<li>
	           <a href="https://github.com/ouvens" title="Fork me on GitHub">
	               <i class="icon-font i-heart"></i>
	               <span class="username">ouvens</span>
	           </a>
	        </li>
	      	
      	

      </ul>
    </div>
    <div class="site-signature">
    	<p class="rss-subscribe text"><strong>订阅<a href="http://jixianqianduan.com/feed.xml">via RSS</a></strong></p>
      <p class="text">极限前端, 极限前端社区, ouven的博客, ouvenzhang的博客, www.jixianqianduan.com, github地址, 前端技术, 讲述前端高效技术与前沿。</p>
    </div>
  </div>
</footer>

<!-- Scripts -->
<script src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/jquery.min.js"></script>

<script src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/highlight.min.js"></script>
<script src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/lightbox.min.js"></script>

<script src="./九种浏览器端缓存机制知多少 _ ouvenzhang的博客_files/main.js"></script>

    

<div id="lightboxOverlay" class="lightboxOverlay" style="display: none;"></div><div id="lightbox" class="lightbox" style="display: none;"><div class="lb-outerContainer"><div class="lb-container"><img class="lb-image" src="http://jixianqianduan.com/frontend-javascript/2015/12/28/nine-browser-cache-methods.html"><div class="lb-nav"><a class="lb-prev" href="http://jixianqianduan.com/frontend-javascript/2015/12/28/nine-browser-cache-methods.html"></a><a class="lb-next" href="http://jixianqianduan.com/frontend-javascript/2015/12/28/nine-browser-cache-methods.html"></a></div><div class="lb-loader"><a class="lb-cancel"></a></div></div></div><div class="lb-dataContainer"><div class="lb-data"><div class="lb-details"><span class="lb-caption"></span><span class="lb-number"></span></div><div class="lb-closeContainer"><a class="lb-close"></a></div></div></div></div></body></html>