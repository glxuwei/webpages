<!DOCTYPE html>
<!-- saved from url=(0044)http://www.cnblogs.com/wdlhao/p/5801918.html -->
<html lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script async="" src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/5801918"></script>

<meta name="viewport" content="width=device-width, initial-scale=1">
<title>webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园</title>
<link type="text/css" rel="stylesheet" href="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/blog-common.css">
<link id="MainCss" type="text/css" rel="stylesheet" href="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/bundle-Minyx2_Lite.css">
<link id="mobile-style" media="only screen and (max-device-width: 980px)" type="text/css" rel="stylesheet" href="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/bundle-Minyx2_Lite-mobile.css">
<link type="text/css" rel="stylesheet" href="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/227004.css">
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/wdlhao/rss">
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/wdlhao/rsd.xml">
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/wdlhao/wlwmanifest.xml">
<script type="text/javascript" src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/encoder.js"></script><script src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'wdlhao', cb_enable_mathjax=false;var isLogined=false;</script>
<script src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/blog-common.js" type="text/javascript"></script>
<script src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/bundle-Minyx2_Lite.js" language="javascript" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>


<div id="container">
    <a class="minyx" href="http://www.cnblogs.com/">代码改变世界</a>
    <ul id="topMnu">
        <!-- 统计数据 -->
        <li>
            
                <div id="blog_stats">
Posts - 105, 
Articles - 1, 
Comments - 39
<!----></div>
            
        </li>
        <!-- 这边可以增加一些链接 -->
        <!-- 博客园 -->
        <li><a href="http://www.cnblogs.com/">Cnblogs</a></li>
        <!-- 管理 -->
        <li id="topMnu-dashboard">
            <a id="lnkDashboard" href="http://www.cnblogs.com/wdlhao/admin/EditPosts.aspx">Dashboard</a></li>
        <li>
            <a id="lnkLogin" href="http://passport.cnblogs.com/login.aspx?ReturnUrl=http://www.cnblogs.com/wdlhao/p/5801918.html">Login</a></li>
    </ul>

    <script type="text/javascript">
        var m = window.__blog.topMenuRendered;
        if (m) { m(__$("topMnu")); }
    </script>

    <div id="header">
        <ul id="menu">
            <!-- 首页，当前section加上current类 -->
            <li id="menu-home" class="current">
                <a id="lnkHome" href="http://www.cnblogs.com/wdlhao/">Home</a></li>
            <!-- 联系 -->
            <li id="menu-contact">
                <a id="lnkContact" href="http://space.cnblogs.com/msg/send/%e6%b5%81%e6%b5%aa%e7%9a%84%e8%af%97%e4%ba%ba">Contact</a></li>
            <!-- 相册 -->
            <li id="menu-gallary">
                <a id="lnkGallery" href="http://www.cnblogs.com/wdlhao/gallery.html">Gallery</a></li>
            <!-- Rss订阅 -->
            <li id="rss">
                <a id="lnkRss" href="http://www.cnblogs.com/wdlhao/rss">RSS</a></li>
        </ul>
        <div id="newmsg"></div>
        <h1>
            <!-- 主标题 -->
            <a id="lnkBlogTitle" href="http://www.cnblogs.com/wdlhao/">流浪的诗人</a>
            <!-- 子标题 -->
            <small>
                </small>
        </h1>
    </div>

    <script type="text/javascript">
        var m = window.__blog.headerRendered;
        if (m) { m(__$("header")); }
    </script>

    <div id="wrapper">
        <div id="content">
            <script type="text/javascript">
                var m = window.__blog.preRenderPosts;
                if (m) { m(); }
            </script>
            
<div id="post_detail">
<div class="post" id="post">
    <a name="top"></a>
    <h2><a id="cb_post_title_url" href="http://www.cnblogs.com/wdlhao/p/5801918.html">webpack入门和实战(一)：webpack配置及技巧</a></h2>
    <small>2016-08-25 08:53 by 流浪的诗人, <span id="post_view_count">769</span> 阅读, <span id="post_comment_count">3</span> 评论, <a href="http://www.cnblogs.com/wdlhao/p/5801918.html#" onclick="AddToWz(5801918);return false;">收藏</a>,  <a href="https://i.cnblogs.com/EditPosts.aspx?postid=5801918" rel="nofollow">编辑</a></small>
    <div class="entry">
        <div id="cnblogs_post_body"><div class="ptitle">一、全面理解webpack</div>
<div><strong>1、什么是&nbsp;webpack？</strong></div>
<div style="margin-left: 30px;">webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理,它能有Grunt或Gulp所有基本功能。<span style="line-height: 1.5;">webpack的官网是&nbsp;</span><a style="line-height: 1.5;" href="http://webpack.github.io/" target="_blank">http://webpack.github.io/</a><span style="line-height: 1.5;">&nbsp;，文档地址是</span><a href="http://webpack.github.io/docs/" target="_blank">&nbsp;http://webpack.github.io/docs/</a>，官网对webpack的定义是MODULE BUNDLER，他的目的就是把有依赖关系的各种文件打包成一系列的静态资源。 请看下图：</div>
<div style="margin-left: 30px;"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/755150-20160824140711589-1532115812.png" alt=""></div>
<div><strong>2、webpack&nbsp;的优势</strong></div>
<div>其优势主要可以归类为如下几个：</div>
<ol>
<li>webpack&nbsp;是以&nbsp;commonJS&nbsp;的形式来书写脚本滴，但对&nbsp;AMD/CMD&nbsp;的支持也很全面，方便旧项目进行代码迁移。</li>
<li>支持很多模块加载器的调用，可以使模块加载器灵活定制，<span style="line-height: 1.5;">比如babel-loader加载器，该加载器能使我们使用ES6的语法来编写代码;less-loader加载器，可以将less编译成css文件；</span></li>
<li>开发便捷，能替代部分&nbsp;grunt/gulp&nbsp;的工作，比如打包、压缩混淆、图片转base64等。</li>
<li>可以通过配置打包成多个文件，有效的利用浏览器的缓存功能提升性能。</li>
</ol>
<div><strong>3、wepback它的目标是是什么？</strong></div>
<div>webpack它能将依赖的模块转化成可以代表这些包的静态文件</div>
<div>
<ul>
<li>将依赖的模块分片化，并且按需加载</li>
<li>解决大型项目初始化加载慢的问题</li>
<li>每一个静态文件都可以看成一个模块</li>
<li>可以整合第三方库</li>
<li>能够在大型项目中运用</li>
<li>可以自定义切割模块的方式</li>
</ul>
<p><strong>4、webpack较之其他类似工具有什么不同？</strong></p>
<ul>
<li>有同步和异步两种不同的加载方式</li>
<li>Loader,加载器可以将其他资源整合到JS文件中，通过这种方式，可以讲所有的源文件形成一个模块</li>
<li>优秀的语法分析能力，支持&nbsp;CommonJs&nbsp;AMD&nbsp;规范</li>
<li>有丰富的开源插件库，可以根据自己的需求自定义webpack的配置</li>
</ul>
<p><strong>5、webpack为什么要将所有资源放在一个文件里面？</strong></p>
<p>我们知道，对于浏览器来说，加载的资源越少，响应的速度也就越快，所以有时候我们为了优化浏览器的性能，会尽可能的将资源合并到一个主文件app.js里面。但是这导致的很大的缺点：</p>
<ul>
<li>当你的项目十分庞大的时候，不同的页面不能做到按需加载，而是将所有的资源一并加载，耗费时间长，性能降低。</li>
<li>会导致依赖库之间关系的混乱，特别是大型项目时，会变得难以维护和跟踪。比如:哪些文件是需要A模块加载完后才能执行的？哪些页面会受到多个样式表同时影响的？&nbsp;等许多问题。</li>
</ul>
<p>而webpack可以很好的解决以上缺点,因为它是一个十分聪明的模块打包系统，当你正确配置后，它会比你想象中的更强大，更优秀。</p>
<div class="ptitle">二、开启wbpack之旅</div>
<div>安装步骤如下：</div>
<p><strong>1、生成package.json文件；</strong></p>
<div>先装好node和npm，因为webpack是一个基于node的项目。然后首先我们需要在根目录下生成package.json文件，需要进入项目文件内根目录下执行如下命令：npm&nbsp;init</div>
<div><img src="file:///C:/Users/Administrator/AppData/Local/YNote/data/wdlhao2011@163.com/2015ed31e4a74be3a8e7843b5cc20129/clipboard.png" alt="" data-media-type="image" data-attr-org-src-id="DF7FD272C0624AA89113785052DCEC38" data-attr-org-img-file="file:///C:/Users/Administrator/AppData/Local/YNote/data/wdlhao2011@163.com/2015ed31e4a74be3a8e7843b5cc20129/clipboard.png"></div>
<p><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/755150-20160824103254745-1454096583.png" alt=""></p>
<p>如上通过一问一答的方式后会在根目录下生成package.json文件，如下所示：</p>
<p><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/755150-20160824103338901-2021705863.png" alt=""></p>
<div><strong>2&nbsp;.&nbsp;通过全局安装webpack</strong></div>
<div>执行命令如下：npm&nbsp;install&nbsp;-g&nbsp;webpack&nbsp;如下所示：</div>
<div><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/755150-20160824103428714-1563129026.png" alt=""></div>
<div>
<div>在c盘下会生成node_modules文件夹中会包含webpack，此时此刻我们可以使用webpack命令了；</div>
<div>在常规项目中把webpack依赖加入到package.json</div>
npm&nbsp;init&nbsp;npm&nbsp;install&nbsp;webpack&nbsp;--save
<div>更详尽的安装方法个可以参考<a href="https://webpack.github.io/docs/installation.html">webpack安装</a></div>
<div>
<div><strong>3.&nbsp;配置webpack</strong></div>
<div>每个目录下都必须有一个webpack.config.js，它的作用就好比Gulpfile.js、或者&nbsp;Gruntfile.js，就是一个项目配置，告诉webpack需要做什么。</div>
<div>首先先贴上一个比较完整的webpack.config.js的代码，再详细介绍：</div>
<div>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<div class="cnblogs_Highlighter sh-gutter">
<div><div id="highlighter_764280" class="syntaxhighlighter  csharp"><div class="toolbar"><span><a href="http://www.cnblogs.com/wdlhao/p/5801918.html#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div class="line number63 index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div class="line number65 index64 alt2">65</div><div class="line number66 index65 alt1">66</div><div class="line number67 index66 alt2">67</div><div class="line number68 index67 alt1">68</div><div class="line number69 index68 alt2">69</div><div class="line number70 index69 alt1">70</div><div class="line number71 index70 alt2">71</div><div class="line number72 index71 alt1">72</div><div class="line number73 index72 alt2">73</div><div class="line number74 index73 alt1">74</div><div class="line number75 index74 alt2">75</div><div class="line number76 index75 alt1">76</div><div class="line number77 index76 alt2">77</div><div class="line number78 index77 alt1">78</div><div class="line number79 index78 alt2">79</div><div class="line number80 index79 alt1">80</div><div class="line number81 index80 alt2">81</div><div class="line number82 index81 alt1">82</div><div class="line number83 index82 alt2">83</div><div class="line number84 index83 alt1">84</div><div class="line number85 index84 alt2">85</div><div class="line number86 index85 alt1">86</div><div class="line number87 index86 alt2">87</div><div class="line number88 index87 alt1">88</div><div class="line number89 index88 alt2">89</div><div class="line number90 index89 alt1">90</div><div class="line number91 index90 alt2">91</div><div class="line number92 index91 alt1">92</div><div class="line number93 index92 alt2">93</div><div class="line number94 index93 alt1">94</div><div class="line number95 index94 alt2">95</div><div class="line number96 index95 alt1">96</div><div class="line number97 index96 alt2">97</div><div class="line number98 index97 alt1">98</div><div class="line number99 index98 alt2">99</div><div class="line number100 index99 alt1">100</div><div class="line number101 index100 alt2">101</div><div class="line number102 index101 alt1">102</div><div class="line number103 index102 alt2">103</div><div class="line number104 index103 alt1">104</div><div class="line number105 index104 alt2">105</div><div class="line number106 index105 alt1">106</div><div class="line number107 index106 alt2">107</div><div class="line number108 index107 alt1">108</div><div class="line number109 index108 alt2">109</div><div class="line number110 index109 alt1">110</div><div class="line number111 index110 alt2">111</div><div class="line number112 index111 alt1">112</div><div class="line number113 index112 alt2">113</div><div class="line number114 index113 alt1">114</div><div class="line number115 index114 alt2">115</div><div class="line number116 index115 alt1">116</div><div class="line number117 index116 alt2">117</div><div class="line number118 index117 alt1">118</div><div class="line number119 index118 alt2">119</div><div class="line number120 index119 alt1">120</div><div class="line number121 index120 alt2">121</div><div class="line number122 index121 alt1">122</div><div class="line number123 index122 alt2">123</div><div class="line number124 index123 alt1">124</div><div class="line number125 index124 alt2">125</div><div class="line number126 index125 alt1">126</div><div class="line number127 index126 alt2">127</div><div class="line number128 index127 alt1">128</div><div class="line number129 index128 alt2">129</div><div class="line number130 index129 alt1">130</div><div class="line number131 index130 alt2">131</div><div class="line number132 index131 alt1">132</div><div class="line number133 index132 alt2">133</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp comments">//详细的webpack.config.js结构分析：</code></div><div class="line number2 index1 alt1"><code class="csharp keyword">var</code> <code class="csharp plain">path = require(</code><code class="csharp string">'path'</code><code class="csharp plain">);</code></div><div class="line number3 index2 alt2"><code class="csharp keyword">var</code> <code class="csharp plain">webpack = require(</code><code class="csharp string">'webpack'</code><code class="csharp plain">);</code></div><div class="line number4 index3 alt1"><code class="csharp keyword">var</code> <code class="csharp plain">HtmlWebpackPlugin = require(</code><code class="csharp string">'html-webpack-plugin'</code><code class="csharp plain">);</code></div><div class="line number5 index4 alt2"><code class="csharp keyword">var</code> <code class="csharp plain">TransferWebpackPlugin = require(</code><code class="csharp string">'transfer-webpack-plugin'</code><code class="csharp plain">);</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="csharp plain">module.exports = {</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">devtool: </code><code class="csharp string">'source-map'</code><code class="csharp plain">,</code><code class="csharp comments">//由于打包后的代码是合并以后的代码，不利于排错和定位，只需要在config中添加，这样出错以后就会采用source-map的形式直接显示你出错代码的位置。</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//noParse:[/jquery/],//表示跳过jquery,不对其进行编译,这样可以提高打包的速度</code></div><div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//页面入口文件配置</code></div><div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">entry: {</code></div><div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">page1: </code><code class="csharp string">"./src/index.js"</code><code class="csharp plain">,</code></div><div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//page2: ["./src/index.js", "./src/main.js"],支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出</code></div><div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">},</code></div><div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//入口文件输出配置</code></div><div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">output: {</code></div><div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">path: </code><code class="csharp string">"dist/js/page"</code><code class="csharp plain">,</code></div><div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">filename: </code><code class="csharp string">"[name].bundle.js"</code><code class="csharp plain">,</code><code class="csharp comments">// page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下。</code></div><div class="line number19 index18 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">publicPath: </code><code class="csharp string">"/dist/"</code>&nbsp;&nbsp;&nbsp; <code class="csharp comments">//网站运行时的访问路径。</code></div><div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">},</code></div><div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">resolveLoader: {</code></div><div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//指定默认的loader路径，否则依赖走到上游会找不到loader</code></div><div class="line number23 index22 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">root: path.</code><code class="csharp keyword">join</code><code class="csharp plain">(__dirname, </code><code class="csharp string">'node_modules'</code><code class="csharp plain">),</code></div><div class="line number24 index23 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">alias: {</code><code class="csharp comments">//给自己写的loader设置别名</code></div><div class="line number25 index24 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"seajs-loader"</code><code class="csharp plain">: path.resolve( __dirname, </code><code class="csharp string">"./web_modules/seajs-loader.js"</code> <code class="csharp plain">)</code></div><div class="line number26 index25 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number27 index26 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">},</code></div><div class="line number28 index27 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//新建一个开发服务器，并且当代码更新的时候自动刷新浏览器。</code></div><div class="line number29 index28 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">devServer: {</code></div><div class="line number30 index29 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">historyApiFallback: </code><code class="csharp keyword">true</code><code class="csharp plain">,</code></div><div class="line number31 index30 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">noInfo: </code><code class="csharp keyword">true</code><code class="csharp plain">,</code></div><div class="line number32 index31 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">hot: </code><code class="csharp keyword">true</code><code class="csharp plain">,</code></div><div class="line number33 index32 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">inline: </code><code class="csharp keyword">true</code><code class="csharp plain">,</code></div><div class="line number34 index33 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">progress: </code><code class="csharp keyword">true</code><code class="csharp plain">,</code></div><div class="line number35 index34 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">port:9090 </code><code class="csharp comments">//端口你可以自定义</code></div><div class="line number36 index35 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">},</code></div><div class="line number37 index36 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">module: {</code></div><div class="line number38 index37 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">// module.loaders 是最关键的一块配置。它告知 webpack每一种文件都需要使用什么加载器来处理：</code></div><div class="line number39 index38 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">loaders: [</code></div><div class="line number40 index39 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.css$/, loader: </code><code class="csharp string">'style-loader!css-loader'</code> <code class="csharp plain">},</code><code class="csharp comments">//.css 文件使用 style-loader 和 css-loader 来处理.</code></div><div class="line number41 index40 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//{ test: /\.css$/, loader: 'style!css' },其他写法1、"-loader"其实是可以省略不写的，多个loader之间用“!”连接起来。</code></div><div class="line number42 index41 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//{ test: /\.css$/, loaders: ["style", "css"] }，其他写法2、用loaders数组形式;</code></div><div class="line number43 index42 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理。</code></div><div class="line number44 index43 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//在chrome中我们通过sourcemap可以直接调试less、sass源文件文件</code></div><div class="line number45 index44 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.scss$/, loader: </code><code class="csharp string">'style!css!sass?sourceMap'</code><code class="csharp plain">},</code></div><div class="line number46 index45 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.less$/, loader: </code><code class="csharp string">'style!css!less?sourceMap'</code><code class="csharp plain">},</code><code class="csharp comments">//.less 文件使用 style-loader、css-loader 和 less-loader 来编译处理</code></div><div class="line number47 index46 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//.js 文件使用babel-loader来编译处理,设置exclude用来排除node_modules这个文件夹中的代码</code></div><div class="line number48 index47 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.js$/, loader: </code><code class="csharp string">'babel!jsx'</code><code class="csharp plain">,exclude: /node_modules/ },&nbsp;</code></div><div class="line number49 index48 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.jsx$/, loader: </code><code class="csharp string">"jsx-loader?harmony"</code> <code class="csharp plain">},</code><code class="csharp comments">//.jsx 文件使用 jsx-loader 来编译处理</code></div><div class="line number50 index49 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.json$/,loader: </code><code class="csharp string">'json'</code><code class="csharp plain">},</code></div><div class="line number51 index50 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//{ test: /\.(png|jpg|jpeg|gif)$/, loader: 'url-loader?limit=8192'},&nbsp;//图片文件使用 url-loader 来处理，小于8kb的直接转为base64</code></div><div class="line number52 index51 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{test: /\.(png|jpg|gif|svg)$/,loader: </code><code class="csharp string">'url'</code><code class="csharp plain">,</code></div><div class="line number53 index52 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">query: {limit: 10000,name: </code><code class="csharp string">'[name].[ext]?[hash]'</code><code class="csharp plain">}</code><code class="csharp comments">//设置图片名称扩展名</code></div><div class="line number54 index53 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">},</code></div><div class="line number55 index54 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.jade$/, loader: </code><code class="csharp string">"jade-loader"</code> <code class="csharp plain">},</code><code class="csharp comments">//.jade 文件使用 jade-loader 来编译处理</code></div><div class="line number56 index55 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.ejs$/, loader: </code><code class="csharp string">"ejs-loader"</code> <code class="csharp plain">},</code><code class="csharp comments">//.ejs 文件使用 ejs-loader 来编译处理 </code></div><div class="line number57 index56 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.handlebars$/, loader: </code><code class="csharp string">"handlebars-loader"</code> <code class="csharp plain">},</code><code class="csharp comments">//.handlebars 文件使用handlebars-loader来编译处理handlebars模板文件</code></div><div class="line number58 index57 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.dot$/, loader: </code><code class="csharp string">"dot-loader"</code> <code class="csharp plain">},</code><code class="csharp comments">//.dot 文件使用 dot-loader 来编译处理dot模板文件</code></div><div class="line number59 index58 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.vue$/, loader: </code><code class="csharp string">"vue-loader"</code> <code class="csharp plain">},</code><code class="csharp comments">//.vue 文件使用 vue-loader 来编译处理</code></div><div class="line number60 index59 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.coffee$/, loader: </code><code class="csharp string">'coffee-loader'</code> <code class="csharp plain">},</code><code class="csharp comments">//.coffee 文件使用 coffee-loader 来编译处理</code></div><div class="line number61 index60 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.html$/,loader: </code><code class="csharp string">'vue-html'</code><code class="csharp plain">},</code></div><div class="line number62 index61 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.woff$/,loader: </code><code class="csharp string">"url?limit=10000&amp;minetype=application/font-woff"</code><code class="csharp plain">},</code></div><div class="line number63 index62 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.ttf$/,loader: </code><code class="csharp string">"file"</code><code class="csharp plain">},</code></div><div class="line number64 index63 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.eot$/,loader: </code><code class="csharp string">"file"</code><code class="csharp plain">},</code></div><div class="line number65 index64 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{ test: /\.svg$/,loader: </code><code class="csharp string">"file"</code><code class="csharp plain">}</code></div><div class="line number66 index65 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">]</code></div><div class="line number67 index66 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">},</code></div><div class="line number68 index67 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//分内置插件和外置插件</code></div><div class="line number69 index68 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">plugins: [</code></div><div class="line number70 index69 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个common.js来方便多页面之间进行复用。</code></div><div class="line number71 index70 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">webpack.optimize.CommonsChunkPlugin(</code><code class="csharp string">'common.js'</code><code class="csharp plain">),</code></div><div class="line number72 index71 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">webpack.optimize.UglifyJsPlugin({</code><code class="csharp comments">//压缩文件</code></div><div class="line number73 index72 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">compressor: {</code></div><div class="line number74 index73 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">warnings: </code><code class="csharp keyword">false</code><code class="csharp plain">,</code><code class="csharp comments">//supresses warnings, usually from module minification</code></div><div class="line number75 index74 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">},</code></div><div class="line number76 index75 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">except: [</code><code class="csharp string">'$super'</code><code class="csharp plain">, </code><code class="csharp string">'$'</code><code class="csharp plain">, </code><code class="csharp string">'exports'</code><code class="csharp plain">, </code><code class="csharp string">'require'</code><code class="csharp plain">]&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">//排除关键字(可选)</code></div><div class="line number77 index76 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}),</code></div><div class="line number78 index77 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">webpack.DefinePlugin({</code><code class="csharp comments">// definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串</code></div><div class="line number79 index78 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">__DEV__: JSON.stringify(JSON.parse(process.env.BUILD_DEV || </code><code class="csharp string">'true'</code><code class="csharp plain">)),</code></div><div class="line number80 index79 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">__PRERELEASE__: JSON.stringify(JSON.parse(process.env.BUILD_PRERELEASE || </code><code class="csharp string">'false'</code><code class="csharp plain">))</code></div><div class="line number81 index80 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}),</code></div><div class="line number82 index81 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">webpack.ProvidePlugin({</code><code class="csharp comments">//把一个全局变量插入到所有的代码中,支持jQuery plugin的使用;使用ProvidePlugin加载使用频率高的模块</code></div><div class="line number83 index82 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//provide $, jQuery and window.jQuery to every script</code></div><div class="line number84 index83 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">$: </code><code class="csharp string">"jquery"</code><code class="csharp plain">,</code></div><div class="line number85 index84 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">jQuery: </code><code class="csharp string">"jquery"</code><code class="csharp plain">,</code></div><div class="line number86 index85 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">"window.jQuery"</code><code class="csharp plain">: </code><code class="csharp string">"jquery"</code></div><div class="line number87 index86 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}),</code></div><div class="line number88 index87 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">webpack.NoErrorsPlugin(), </code><code class="csharp comments">//允许错误不打断程序</code></div><div class="line number89 index88 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">TransferWebpackPlugin([ </code><code class="csharp comments">//把指定文件夹下的文件复制到指定的目录</code></div><div class="line number90 index89 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code><code class="csharp keyword">from</code><code class="csharp plain">: </code><code class="csharp string">'www'</code><code class="csharp plain">}</code></div><div class="line number91 index90 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">], path.resolve(__dirname,</code><code class="csharp string">"src"</code><code class="csharp plain">)),</code></div><div class="line number92 index91 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">HtmlwebpackPlugin({</code><code class="csharp comments">//用于生产符合要求的html文件;</code></div><div class="line number93 index92 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">title: </code><code class="csharp string">'Hello World app'</code><code class="csharp plain">,</code></div><div class="line number94 index93 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">filename: </code><code class="csharp string">'assets/admin.html'</code></div><div class="line number95 index94 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">})</code></div><div class="line number96 index95 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">],</code></div><div class="line number97 index96 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//其它解决方案配置</code></div><div class="line number98 index97 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">resolve: {</code></div><div class="line number99 index98 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">root: </code><code class="csharp string">'E:/github/flux-example/src'</code><code class="csharp plain">, </code><code class="csharp comments">//绝对路径, 查找module的话从这里开始查找(可选)</code></div><div class="line number100 index99 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">extensions: [</code><code class="csharp string">''</code><code class="csharp plain">, </code><code class="csharp string">'.js'</code><code class="csharp plain">, </code><code class="csharp string">'.html'</code><code class="csharp plain">, </code><code class="csharp string">'.css'</code><code class="csharp plain">, </code><code class="csharp string">'.scss'</code><code class="csharp plain">], </code><code class="csharp comments">//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</code></div><div class="line number101 index100 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">alias: {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="csharp comments">//模块别名定义，方便后续直接引用别名，无须多写长长的地址//后续直接 require('AppStore') 即可</code></div><div class="line number102 index101 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">AppStore : </code><code class="csharp string">'js/stores/AppStores.js'</code><code class="csharp plain">,</code></div><div class="line number103 index102 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">ActionType : </code><code class="csharp string">'js/actions/ActionType.js'</code><code class="csharp plain">,</code></div><div class="line number104 index103 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">AppAction : </code><code class="csharp string">'js/actions/AppAction.js'</code></div><div class="line number105 index104 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">},</code></div><div class="line number106 index105 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">modulesDirectories: [</code><code class="csharp comments">//取相对路径，所以比起 root ，所以会多很多路径。查找module(可选)</code></div><div class="line number107 index106 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">'node_modules'</code><code class="csharp plain">,</code></div><div class="line number108 index107 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">'bower_components'</code><code class="csharp plain">,</code></div><div class="line number109 index108 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">'lib'</code><code class="csharp plain">,</code></div><div class="line number110 index109 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">'src'</code></div><div class="line number111 index110 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">]</code></div><div class="line number112 index111 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number113 index112 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number114 index113 alt1"><code class="csharp plain">};</code></div><div class="line number115 index114 alt2">&nbsp;</div><div class="line number116 index115 alt1"><code class="csharp keyword">if</code> <code class="csharp plain">(process.env.NODE_ENV === </code><code class="csharp string">'production'</code><code class="csharp plain">) {</code></div><div class="line number117 index116 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">module.exports.devtool = </code><code class="csharp string">'#source-map'</code></div><div class="line number118 index117 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp comments">// http://vue-loader.vuejs.org/en/workflow/production.html</code></div><div class="line number119 index118 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">module.exports.plugins = (module.exports.plugins || []).concat([</code></div><div class="line number120 index119 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">webpack.DefinePlugin({</code></div><div class="line number121 index120 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp string">'process.env'</code><code class="csharp plain">: {</code></div><div class="line number122 index121 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">NODE_ENV: </code><code class="csharp string">'"production"'</code></div><div class="line number123 index122 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number124 index123 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}),</code></div><div class="line number125 index124 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">webpack.optimize.UglifyJsPlugin({</code></div><div class="line number126 index125 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">compress: {</code></div><div class="line number127 index126 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">warnings: </code><code class="csharp keyword">false</code></div><div class="line number128 index127 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></div><div class="line number129 index128 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}),</code></div><div class="line number130 index129 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp comments">//为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</code></div><div class="line number131 index130 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp keyword">new</code> <code class="csharp plain">webpack.optimize.OccurenceOrderPlugin()</code></div><div class="line number132 index131 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">])</code></div><div class="line number133 index132 alt2"><code class="csharp plain">}</code></div></div></td></tr></tbody></table></div></div>
</div>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>plugins中包含很多的内置插件和外部插件，它们都有各自的功能，用来处理相关的文件，这里只是罗列了部分，具体用法请看<a href="http://www.cnblogs.com/wdlhao/p/5807157.html" target="_blank">webpack入门和实战(二)：全面理解和运用plugins和loader</a>。</p>
</div>
<div>
<div>就像我在前面提到的，webpack.config.js的写法和在Node里的写法相同，我们主要看的就是文件中的module.exports里面的内容</div>
<ul>
<li><strong>entry&nbsp;</strong>是指入口文件的配置项，它是一个数组的原因是webpack允许多个入口点。</li>
<li><strong>output</strong>是指输出文件的配置项</li>
<ul>
<li>path&nbsp;－&nbsp;表示输出文件的路径</li>
<li>filename&nbsp;-&nbsp;表示输出文件的文件名</li>
</ul>
</ul>
<ul>
<li><strong>plugins&nbsp;</strong>顾名思义，使用插件可以给webpack添加更多的功能，使webpack更加的灵活和强大,webpack有两种类型的插件:
<ul>
<li>webpack内置的插件</li>
</ul>
</li>
</ul>
<div>//&nbsp;首先要先安装webpack模块</div>
<div>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #0000ff;">var</span> webpack = require(<span style="color: #800000;">"</span><span style="color: #800000;">webpack</span><span style="color: #800000;">"</span><span style="color: #000000;">);
module.exports </span>=<span style="color: #000000;"> {
    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> webpack.optimize.UglifyJsPlugin({
      compressor: {
        warnings: </span><span style="color: #0000ff;">false</span><span style="color: #000000;">,
      },
    })
};</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div></div>
<ul>
<li style="list-style-type: none;">
<ul>
<li>&nbsp;webpack外置插件</li>
</ul>
</li>
</ul>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008000;">//</span><span style="color: #008000;">npm install component-webpack-plugin 先要在安装该模版</span>
<span style="color: #0000ff;">var</span> ComponentPlugin = require(<span style="color: #800000;">"</span><span style="color: #800000;">component-webpack-plugin</span><span style="color: #800000;">"</span><span style="color: #000000;">);
module.exports </span>=<span style="color: #000000;"> {
    plugins: [
        </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> ComponentPlugin()
    ]
}</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>更多的插件以及插件的用法，大家可以到<a href="https://webpack.github.io/docs/list-of-plugins.html">webpack的插件</a>上查看。</p>
</div>
<ul>
<li><strong>module&nbsp;</strong>配置处理文件的选项</li>
</ul>
<ul>
<ul>
<li>loaders&nbsp;一个含有wepback中能处理不同文件的加载器的数组</li>
</ul>
</ul>
<ul>
<ul>
<ul>
<li>test&nbsp;用来匹配相对应文件的正则表达式</li>
<li>loaders&nbsp;告诉webpack要利用哪种加载器来处理test所匹配的文件</li>
</ul>
</ul>
</ul>
<ul>
<ul>
<li>loaders&nbsp;的安装方法</li>
</ul>
</ul>
<div>　　　　　　　　$&nbsp;npm&nbsp;install&nbsp;xxx-loader&nbsp;--save-dev</div>
<div>
<ul>
<li><strong>resolve：</strong>其它解决方案配置；</li>
</ul>
</div>
<div>
<ul>
<li style="list-style-type: none;">
<ul>
<li>resolve.root,绝对路径,&nbsp;查找module的话从这里开始查找(可选)</li>
<li>resolve.modulesDirectories,取相对路径，所以比起&nbsp;root&nbsp;，所以会多&nbsp;parse&nbsp;很多路径。查找module(可选)</li>
<li>resolve.extensions,自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</li>
<li>resolve.alias,模块别名定义，方便后续直接引用别名，无须多写长长的地址</li>
</ul>
</li>
</ul>
</div>
<div class="ptitle">三、利用webpack实现在页面上合理使用打包过后的js文件和图片</div>
<div>示例如下：</div>
<div><span style="color: #333333; font-family: Consolas; font-size: small;">webpack_test目录结构如下：</span></div>
<div><span style="color: #333333; font-family: Consolas; font-size: small;"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/755150-20160824105448620-817351138.png" alt="">最终完成版的目录结构为：<img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/755150-20160824111019839-1897504084.jpg" alt=""></span></div>
</div>
<div>&nbsp;index.html代码如下：</div>
<div>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre>&lt;!DOCTYPE html&gt;
&lt;html lang=<span style="color: #800000;">"</span><span style="color: #800000;">en</span><span style="color: #800000;">"</span>&gt;
&lt;head&gt;
    &lt;meta charset=<span style="color: #800000;">"</span><span style="color: #800000;">UTF-8</span><span style="color: #800000;">"</span>&gt;
    &lt;title&gt;demo1&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=<span style="color: #800000;">"</span><span style="color: #800000;">content</span><span style="color: #800000;">"</span>&gt;&lt;/div&gt;
    &lt;img src=<span style="color: #800000;">"</span><span style="color: #800000;">./build/img/demo.png</span><span style="color: #800000;">"</span>&gt;
    &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">./build/js/index.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>index.js代码如下：</p>
<div class="cnblogs_code">
<pre>require(<span style="color: #800000;">'</span><span style="color: #800000;">./index.css</span><span style="color: #800000;">'</span>);</pre>
</div>
<p>index.css代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">#content{
    width:121px;
    height:140px;
    background</span>-<span style="color: #000000;">color: red;
}</span></pre>
</div>
<div>demo.png自己随便找一张即可；</div>
<div>根据webpack.config.js的配置情况，操作步骤如下:</div>
<ul>
<li>全局安装webpack,npm install webpack -g</li>
<li>进入到webpack_test目录下，初始化生成package.json文件,npm init</li>
<li>需要安装的loader有css-loader、style-loader、url-loader,webpack, npm install css-loader style-loader url-loader webpack--save-dev</li>
<li>执行webpack,生成打包过后的build/js/index.js,build/img/demo.png</li>
<li>在index.html中引入即可</li>
</ul>
<p>效果如下：</p>
<p><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/755150-20160824105838042-1036901460.png" alt=""></p>
</div>
<div>&nbsp;源码地址为：<a href="http://download.csdn.net/detail/wdlhao/9612173" target="_blank">http://download.csdn.net/detail/wdlhao/9612173</a>，有需要的同学可以自行下载练习；</div>
<div class="ptitle">&nbsp;四、理解webpack支持commonJS和AMD/CMD两种模块机制进行打包</div>
<div>
<div>&nbsp;<strong>1.AMD/CMD模式：</strong></div>
<div>&nbsp; &nbsp; &nbsp;AMD&nbsp;规范在这里：<a href="file://link.zhihu.com/?target=https%3A//github.com/amdjs/amdjs-api/wiki/AMD">https://github.com/amdjs/amdjs-api/wiki/AMD</a>，CMD&nbsp;规范在这里：<a href="file://link.zhihu.com/?target=https%3A//github.com/seajs/seajs/issues/242">https://github.com/seajs/seajs/issues/242</a></div>
<div>
<ul>
<li>AMD(Asynchronous&nbsp;Module&nbsp;Definition)&nbsp;是&nbsp;RequireJS&nbsp;在推广过程中对模块定义的规范化产出。(即RequireJS模块规范)</li>
</ul>
</div>
<blockquote>
<div>RequireJS是一个工具库，主要用于客户端的模块管理。它可以让客户端的代码分成一个个模块，实现异步或动态加载，从而提高代码的性能和可维护性。它的模块管理遵守<a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD规范</a>（Asynchronous&nbsp;Module&nbsp;Definition）。RequireJS的基本思想是，通过define方法，将代码定义为模块；通过require方法，实现代码的模块加载。首先，将require.js嵌入网页，然后就能在网页中进行模块化编程了。&lt;script&nbsp;data-main="scripts/main"&nbsp;src="scripts/require.js"&gt;&lt;/script&gt;上面代码的data-main属性不可省略，用于指定主代码所在的脚本文件，在上例中为scripts子目录下的main.js文件。用户自定义的代码就放在这个main.js文件中。</div>
</blockquote>
<div>
<ul>
<li>CMD(Common&nbsp;Module&nbsp;Definition&nbsp;)是&nbsp;SeaJS&nbsp;在推广过程中对模块定义的规范化产出。(即SeaJS模块规范)</li>
</ul>
</div>
<blockquote>
<div>SeaJS是一个遵循CMD规范的JavaScript模块加载框架，可以实现JavaScript的模块化开发及加载机制。</div>
</blockquote>
<div>
<ul>
<li>CommonJS&nbsp;Modules/2.0&nbsp;规范，是&nbsp;BravoJS&nbsp;在推广过程中对模块定义的规范化产出。</li>
</ul>
</div>
<blockquote>
<div>CommonJS&nbsp;API定义很多普通应用程序（主要指非浏览器的应用）使用的API，从而填补了这个空白。它的终极目标是提供一个类似Python，Ruby和Java标准库。这样的话，开发者可以使用CommonJS&nbsp;API编写应用程序，然后这些应用可以运行在不同的JavaScript解释器和不同的主机环境中。在兼容CommonJS的系统中，你可以实用JavaScript程序开发：</div>
<ul>
<li>服务器端JavaScript应用程序</li>
<li>命令行工具</li>
<li>图形界面应用程序</li>
<li>混合应用程序（如，Titanium或Adobe&nbsp;AIR）</li>
</ul>
<p>还有不少⋯⋯这些规范的目的都是为了&nbsp;JavaScript&nbsp;的模块化开发，特别是在浏览器端的。目前这些规范的实现都能达成浏览器端模块化开发的目的。</p>
</blockquote>
<p><strong>&nbsp;2、AMD/CMD模式区别</strong></p>
<p style="margin-left: 30px;"><strong>2.1从官方推荐的写法上面得出：</strong></p>
<p style="margin-left: 30px;">CMD ----- 依赖就近</p>
<div class="cnblogs_code" style="margin-left: 30px;"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #000000;">Js代码 
</span><span style="color: #008000;">//</span><span style="color: #008000;">CMD </span>
<span style="color: #000000;">define(function(require,exports,module){ 
</span><span style="color: #0000ff;">   var</span> a = require(<span style="color: #800000;">'</span><span style="color: #800000;">./a</span><span style="color: #800000;">'</span><span style="color: #000000;">); 
   a.doSomthing(); 
});</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p style="margin-left: 30px;">AMD ----- 依赖前置</p>
<div class="cnblogs_code" style="margin-left: 30px;"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #000000;">Js代码 
</span><span style="color: #008000;">//</span><span style="color: #008000;">AMD </span>
define([<span style="color: #800000;">'</span><span style="color: #800000;">./a</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">./b</span><span style="color: #800000;">'</span><span style="color: #000000;">],function(a,b){ 
</span><span style="color: #008000;">//</span><span style="color: #008000;">...... </span>
<span style="color: #000000;">a.doSomthing(); 
</span><span style="color: #008000;">//</span><span style="color: #008000;">...... </span>
<span style="color: #000000;">b.doSomthing(); 
})</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p style="margin-left: 30px;">当然AMD也支持CMD的写法。</p>
<p style="margin-left: 30px;"><strong>2.2、执行顺序上：</strong></p>
<ul>
<li style="list-style-type: none;">
<ul>
<li>CMD是延迟执行,推崇的是as&nbsp;lazy&nbsp;as&nbsp;possible</li>
<li>AMD是提前执行,requireJS从2.0开始可以延迟执行</li>
</ul>
</li>
</ul>
<div style="margin-left: 30px;"><strong>2.3、api设计角度：</strong></div>
<ul>
<li style="list-style-type: none;">
<ul>
<li>CMD的API推崇职责单一，没有全局的require</li>
</ul>
</li>
</ul>
<ul>
<li style="list-style-type: none;">
<ul>
<li>AMD的API默认是一个当多个用：比如require有全局的和局部的</li>
</ul>
</li>
</ul>
</div>
</div>
</div>
<div>&nbsp;</div>
<p>&nbsp;</p>
</div></div><div id="MySignature" style="display: block;"><div style="width: 97%; height: 200px; border: 1px dashed #00bfff; line-height: 32px; font-size: 16px; padding: 10px 20px 0;">
<p>你的关注和支持是对我最大的动力~</p>
<p>书山有路群[一个非常活跃的读书分享群,每周都有新书分享]：452450927</p>
<p>微博：<a href="http://weibo.com/u/2241641312">http://weibo.com/u/2241641312</a></p>
<p>出处：<a href="http://www.cnblogs.com/wdlhao/">http://www.cnblogs.com/wdlhao/</a></p>
<p>github:<a href="https://github.com/wdlhao">https://github.com/wdlhao</a></p>
本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面
</div></div>
        <div class="clear"></div>
        <div id="blog_post_info_block">
        <div id="blog_post_info"><div id="green_channel">
        <a href="javascript:void(0);" id="green_channel_digg" onclick="DiggIt(5801918,cb_blogId,1);green_channel_success(this,&#39;谢谢推荐！&#39;);">好文要顶</a>
            <a id="green_channel_follow" onclick="follow(&#39;1ef84f86-97f5-e411-b908-9dcfd8948a71&#39;);" href="javascript:void(0);">关注我</a>
    <a id="green_channel_favorite" onclick="AddToWz(cb_entryId);return false;" href="javascript:void(0);">收藏该文</a>
    <a id="green_channel_weibo" href="javascript:void(0);" title="分享至新浪微博" onclick="ShareToTsina()"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/icon_weibo_24.png" alt=""></a>
    <a id="green_channel_wechat" href="javascript:void(0);" title="分享至微信" onclick="shareOnWechat()"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/wechat.png" alt=""></a>
</div>
<div id="author_profile">
    <div id="author_profile_info" class="author_profile_info">
            <a href="http://home.cnblogs.com/u/wdlhao/" target="_blank"><img src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/20150509131333.png" class="author_avatar" alt=""></a>
        <div id="author_profile_detail" class="author_profile_info">
            <a href="http://home.cnblogs.com/u/wdlhao/">流浪的诗人</a><br>
            <a href="http://home.cnblogs.com/u/wdlhao/followees">关注 - 11</a><br>
            <a href="http://home.cnblogs.com/u/wdlhao/followers">粉丝 - 49</a>
        </div>
    </div>
    <div class="clear"></div>
    <div id="author_profile_honor"></div>
    <div id="author_profile_follow">
                <a href="javascript:void(0);" onclick="follow(&#39;1ef84f86-97f5-e411-b908-9dcfd8948a71&#39;);return false;">+加关注</a>
    </div>
</div>
<div id="div_digg">
    <div class="diggit" onclick="votePost(5801918,&#39;Digg&#39;)">
        <span class="diggnum" id="digg_count">9</span>
    </div>
    <div class="buryit" onclick="votePost(5801918,&#39;Bury&#39;)">
        <span class="burynum" id="bury_count">0</span>
    </div>
    <div class="clear"></div>
    <div class="diggword" id="digg_tips">
    </div>
</div>
</div>
        <div class="clear"></div>
        <div id="post_next_prev"><a href="http://www.cnblogs.com/wdlhao/p/5764456.html" class="p_n_p_prefix">« </a> 上一篇：<a href="http://www.cnblogs.com/wdlhao/p/5764456.html" title="发布于2016-08-12 12:08">熟练掌握js中this的用法,解析this在不同应用场景的作用</a><br><a href="http://www.cnblogs.com/wdlhao/p/5807157.html" class="p_n_p_prefix">» </a> 下一篇：<a href="http://www.cnblogs.com/wdlhao/p/5807157.html" title="发布于2016-08-26 08:43">webpack入门和实战(二)：全面理解和运用loader和plugins</a><br></div>
    </div>
</div>
    <ul class="postmetadata">
        <li class="icon_cat" id="BlogPostCategory">分类: <a href="http://www.cnblogs.com/wdlhao/category/872064.html" target="_blank">webpack</a></li>
        <li class="icon_bullet" id="EntryTag">标签: <a href="http://www.cnblogs.com/wdlhao/tag/grunt/">grunt</a>, <a href="http://www.cnblogs.com/wdlhao/tag/webpack/">webpack</a>, <a href="http://www.cnblogs.com/wdlhao/tag/gulp/">gulp</a>, <a href="http://www.cnblogs.com/wdlhao/tag/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/">打包工具</a>, <a href="http://www.cnblogs.com/wdlhao/tag/%E6%A8%A1%E5%9D%97%E5%8C%96/">模块化</a></li>
    </ul>
</div>
<script type="text/javascript">var allowComments=true,cb_blogId=227004,cb_entryId=5801918,cb_blogApp=currentBlogApp,cb_blogUserGuid='1ef84f86-97f5-e411-b908-9dcfd8948a71',cb_entryCreatedDate='2016/8/25 8:53:00';loadViewCount(cb_entryId);</script>
<script type="text/javascript">
    var m = window.__blog.postRendered;
    if (m) { m(__$("post")); }
</script>
<script type="text/javascript">
    var m = window.__blog.postRenderPosts;
    if (m) { m(); }
</script>
</div><a name="!comments"></a><div id="blog-comments-placeholder"><div id="comments_pager_top"></div>
<a class="addcomment" href="http://www.cnblogs.com/wdlhao/p/5801918.html#comment_tip">Add your comment</a>
<h3 id="comments"></h3>
<div class="feedbackNoItems"></div>


<ol class="commentlist" id="commentList">	

		<li class="alt">
			<h5>
				<cite><a href="http://www.cnblogs.com/wdlhao/p/5801918.html#3496082" class="layer">#1楼</a><a name="3496082" id="comment_anchor_3496082"></a></cite> <a id="a_comment_author_3496082" href="http://www.cnblogs.com/llqfront/" target="_blank">Taching</a> <a href="http://msg.cnblogs.com/send/Taching" title="发送站内短消息" class="sendMsg2This">&nbsp;</a><small> <span class="comment_date">2016-08-25 09:49</span></small>
			</h5>
			<div id="comment_body_3496082" class="blog_comment_body">顶！！！！<br><br>web前端传送门<br>官网：<a href="http://www.xhanglu.com/" target="_blank">http://www.xhanglu.com/</a></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3496082,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3496082,&#39;Bury&#39;,this)">反对(0)</a></div><span id="comment_3496082_avatar" style="display:none;">http://pic.cnblogs.com/face/661203/20160815183638.png</span>
			<div class="opt_comment"><span class="comment_actions"></span></div>
		</li>
	
		<li class="alt">
			<h5>
				<cite><a href="http://www.cnblogs.com/wdlhao/p/5801918.html#3497542" class="layer">#2楼</a><a name="3497542" id="comment_anchor_3497542"></a></cite> <a id="a_comment_author_3497542" href="http://www.cnblogs.com/bottles/" target="_blank">爱情漂流瓶</a> <a href="http://msg.cnblogs.com/send/%E7%88%B1%E6%83%85%E6%BC%82%E6%B5%81%E7%93%B6" title="发送站内短消息" class="sendMsg2This">&nbsp;</a><small> <span class="comment_date">2016-08-26 17:47</span></small>
			</h5>
			<div id="comment_body_3497542" class="blog_comment_body">感觉挺详细的    mark！</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3497542,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3497542,&#39;Bury&#39;,this)">反对(0)</a></div><span id="comment_3497542_avatar" style="display:none;">http://pic.cnblogs.com/face/659845/20150824171132.png</span>
			<div class="opt_comment"><span class="comment_actions"></span></div>
		</li>
	
		<li class="alt">
			<h5>
				<cite><a href="http://www.cnblogs.com/wdlhao/p/5801918.html#3498069" class="layer">#3楼</a><a name="3498069" id="comment_anchor_3498069"></a><span id="comment-maxId" style="display:none;">3498069</span><span id="comment-maxDate" style="display:none;">2016/8/28 2:37:59</span></cite> <a id="a_comment_author_3498069" href="http://www.cnblogs.com/leee/" target="_blank">lk_</a> <a href="http://msg.cnblogs.com/send/lk_" title="发送站内短消息" class="sendMsg2This">&nbsp;</a><small> <span class="comment_date">2016-08-28 02:37</span></small>
			</h5>
			<div id="comment_body_3498069" class="blog_comment_body">学习</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3498069,&#39;Digg&#39;,this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3498069,&#39;Bury&#39;,this)">反对(0)</a></div><span id="comment_3498069_avatar" style="display:none;">http://pic.cnblogs.com/face/607624/20160318134133.png</span>
			<div class="opt_comment"><span class="comment_actions"></span></div>
		</li>
	
</ol>

<div id="comments_pager_bottom"></div></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="http://www.cnblogs.com/wdlhao/p/5801918.html#" onclick="return RefreshPage();">刷新页面</a><a href="http://www.cnblogs.com/wdlhao/p/5801918.html#top">返回顶部</a></div>
<div id="comment_form_container"><div class="login_tips">注册用户登录后才能发表评论，请 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return login(&#39;commentform&#39;);">登录</a> 或 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return register();">注册</a>，<a href="http://www.cnblogs.com/">访问</a>网站首页。</div></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="ad_t2"><a href="http://www.ucancode.com/index.htm" target="_blank">【推荐】50万行VC++源码: 大型组态工控、电力仿真CAD与GIS源码库</a><br><a href="https://group.cnblogs.com/topic/75389.html" target="_blank">【活动】优达学城正式发布“无人驾驶车工程师”课程</a><br><a href="http://www.rongcloud.cn/live" target="_blank">【推荐】移动直播百强八成都在用融云即时通讯云</a><br><a href="http://www.gcpowertools.com.cn/products/componentone_studio_enterprise.htm?utm_source=cnblogs&amp;utm_medium=blogpage&amp;utm_term=bottom&amp;utm_content=C1&amp;utm_campaign=community" target="_blank">【推荐】别再闷头写代码！找对工具，事半功倍，全能开发工具包用起来</a><br><a href="http://netease.im/promotion/1013?hmsr=bky10&amp;from=bky10" target="_blank">【福利】网易云信1周年接入开发者突破10万，送红包活动火热开展中</a><br></div>
<div id="opt_under_post"></div>
<div id="ad_c1" class="c_ad_block"><a href="http://q.cnblogs.com/" target="_blank"><img width="300" height="250" src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/q-cnblogs-com-20160923.png" alt=""></a></div>
<div id="under_post_news"><div class="itnews c_ad_block"><b>最新IT新闻</b>:<br> ·  <a href="http://news.cnblogs.com/n/555151/" target="_blank">一张图读懂共享单车领域的资本狂欢，以及摩拜和ofo们的盈利隐忧</a><br> ·  <a href="http://news.cnblogs.com/n/555150/" target="_blank">网友说马云昨天的《好久不见》跟王健林的歌声有得一拼！</a><br> ·  <a href="http://news.cnblogs.com/n/555149/" target="_blank">百度推出「杀手级」AI疾病诊断APP</a><br> ·  <a href="http://news.cnblogs.com/n/555148/" target="_blank">Pinterest月活用户突破 1.5 亿，其中60%是女性</a><br> ·  <a href="http://news.cnblogs.com/n/555147/" target="_blank">亚马逊反击甲骨文：你数据做假 云计算我仍是老大！</a><br>» <a href="http://news.cnblogs.com/" title="IT新闻" target="_blank">更多新闻...</a></div></div>
<div id="ad_c2" class="c_ad_block"><a href="https://www.jiguang.cn/devservice/?from=cnblogs01" target="_blank"><img width="468" height="60" src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/24442-20161011141820868-1378717477.jpg" alt=""></a></div>
<div id="under_post_kb"><div class="itnews c_ad_block" id="kb_block"><b>最新知识库文章</b>:<br><div id="kb_recent"> ·  <a href="http://kb.cnblogs.com/page/553682/" target="_blank">陈皓：什么是工程师文化？</a><br> ·  <a href="http://kb.cnblogs.com/page/551422/" target="_blank">没那么难，谈CSS的设计模式</a><br> ·  <a href="http://kb.cnblogs.com/page/550625/" target="_blank">程序猿媳妇儿注意事项</a><br> ·  <a href="http://kb.cnblogs.com/page/540529/" target="_blank">可是姑娘，你为什么要编程呢？</a><br> ·  <a href="http://kb.cnblogs.com/page/549631/" target="_blank">知其所以然（以算法学习为例）</a><br></div>» <a href="http://kb.cnblogs.com/" target="_blank">更多知识库文章...</a></div></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverAdT2();
    deliverAdC1();
    deliverAdC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);   
</script>
</div>


        </div>

        <script type="text/javascript">
            var m = window.__blog.contentRendered;
            if (m) { m(__$("content")); }
        </script>

        <div id="sidebar">
            
<div id="about">
<div>
<h2 id="about_title">About</h2>
<div id="about_body">
<div id="blog-news"><div class="about">
   <table>
     <tbody><tr><td>新浪微博</td><td>gitHub</td></tr>
     <tr>
       <td>
<a href="http://weibo.com/2241641312/profile" target="_blank"><img border="0" src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/weibo.gif"></a>
      </td>
       <td>
<a href="https://github.com/wdlhao" target="_blank"><img border="0" src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/github.gif"></a>
      </td>
     </tr>
   </tbody></table>
  <p>
    <span class="title">qq邮箱：</span>
    <a href="http://www.cnblogs.com/wdlhao/p/5801918.html#">906144643@qq.com</a>
  </p>
  <p>
    <span class="title">书山有路群：</span>
    <a href="http://www.cnblogs.com/wdlhao/p/5801918.html#">452450927</a>
  </p>
</div><div id="profile_block">昵称：<a href="http://home.cnblogs.com/u/wdlhao/">流浪的诗人</a><br>园龄：<a href="http://home.cnblogs.com/u/wdlhao/" title="入园时间：2015-05-08">1年5个月</a><br>粉丝：<a href="http://home.cnblogs.com/u/wdlhao/followers/">49</a><br>关注：<a href="http://home.cnblogs.com/u/wdlhao/followees/">11</a><div id="p_b_follow"><a href="javascript:void(0);" onclick="follow(&#39;1ef84f86-97f5-e411-b908-9dcfd8948a71&#39;)">+加关注</a></div></div></div>
<script type="text/javascript">loadBlogNews();</script>
</div>
</div>
</div>

            <script type="text/javascript">
                var m = window.__blog.aboutRendered;
                if (m) { m(__$("about")); }
            </script>
            
<div id="mySearchWrapper">
    <div id="mySearch">
        <input type="image" src="./webpack入门和实战(一)：webpack配置及技巧 - 流浪的诗人 - 博客园_files/btnsearch.gif" id="btnZzk" class="submit" onclick="zzk_go();return false;">
        <label class="lb_search"><input type="text" id="q" onkeydown="return zzk_go_enter(event);" class="keyword"></label>
    </div>
</div>

            <script type="text/javascript">
                var m = window.__blog.searchFormRendered;
                if (m) { m(__$("searchform")); }
            </script>
            <div id="sideMain">
            <div id="side-recent-posts">
        <h2>最新随笔</h2>
        <ul class="bullet">
                <li><a href="http://www.cnblogs.com/wdlhao/p/5900360.html">npm常用命令小结</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/p/5853867.html">详解javascript,ES5标准中新增的几种高效Object操作方法</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/p/5811310.html">git入门学习(二)：新建分支/上传代码/删除分支</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/p/5810955.html">git入门学习(一)：github for windows上传本地项目到github</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/p/5807157.html">webpack入门和实战(二)：全面理解和运用loader和plugins</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/p/5801918.html">webpack入门和实战(一)：webpack配置及技巧</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/p/5764456.html">熟练掌握js中this的用法,解析this在不同应用场景的作用</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/p/5751211.html">用css3绘制你需要的几何图形</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/p/5743770.html">js中Prototype属性解释及常用方法</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/p/5733884.html">Nodejs之MEAN栈开发（九）---- 用户评论的增加/删除/修改</a></li>
        </ul>
    </div><div id="side-recent-comments">
        <h2>最新评论</h2>
        <ul class="voice">
                <li>
                    <a href="http://www.cnblogs.com/wdlhao/p/5853867.html#3506625">Re:详解javascript,ES5标准中新增的几种高效Object操作方法</a>
                    <br>
                    <a class="child" href="http://www.cnblogs.com/wdlhao/p/5853867.html#3506625">
                        非常有用的静态方法~
                        -- 幻天芒
                    </a>
                </li>
                <li>
                    <a href="http://www.cnblogs.com/wdlhao/p/5810955.html#3498756">Re:git入门学习(一)：github for windows上传本地项目到github</a>
                    <br>
                    <a class="child" href="http://www.cnblogs.com/wdlhao/p/5810955.html#3498756">
                        正需要这样一篇文章，谢谢
                        -- WesTward
                    </a>
                </li>
                <li>
                    <a href="http://www.cnblogs.com/wdlhao/p/5810955.html#3498488">Re:git入门学习(一)：github for windows上传本地项目到github</a>
                    <br>
                    <a class="child" href="http://www.cnblogs.com/wdlhao/p/5810955.html#3498488">
                        刚刚看了，有用。赞一个。
                        -- 一树繁花
                    </a>
                </li>
                <li>
                    <a href="http://www.cnblogs.com/wdlhao/p/5810955.html#3498426">Re:git入门学习(一)：github for windows上传本地项目到github</a>
                    <br>
                    <a class="child" href="http://www.cnblogs.com/wdlhao/p/5810955.html#3498426">
                        直接git-bash，或者TortoiseGit，亦或者编辑器插件方便一些
                        -- unofficial
                    </a>
                </li>
                <li>
                    <a href="http://www.cnblogs.com/wdlhao/p/5801918.html#3498069">Re:webpack入门和实战(一)：webpack配置及技巧</a>
                    <br>
                    <a class="child" href="http://www.cnblogs.com/wdlhao/p/5801918.html#3498069">
                        学习
                        -- lk_
                    </a>
                </li>
        </ul>
    </div></div>
            <div id="sideRight">
            <div id="side-archives">
        <h2>随笔档案</h2>
        <ul class="date">
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2016/09.html">2016年9月(2)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2016/08.html">2016年8月(9)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2016/06.html">2016年6月(6)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2016/05.html">2016年5月(9)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2016/04.html">2016年4月(2)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2016/03.html">2016年3月(11)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2016/02.html">2016年2月(1)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2016/01.html">2016年1月(15)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2015/12.html">2015年12月(11)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2015/11.html">2015年11月(20)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2015/10.html">2015年10月(2)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2015/06.html">2015年6月(2)</a></li>
                <li><a href="http://www.cnblogs.com/wdlhao/archive/2015/05.html">2015年5月(15)</a></li>
        </ul>
    </div>    
    
    
    
    


</div>
            <div id="sideLeft">
            <div id="side-calendar">
        <h2>日历</h2>
        <div id="blog-calendar"><table id="blogCalendar" class="Cal" cellspacing="0" cellpadding="0" title="日历">
	<tbody><tr><td colspan="7"><table class="CalTitle" cellspacing="0">
		<tbody><tr><td class="CalNextPrev"><a href="javascript:void(0);" onclick="loadBlogCalendar(&#39;2016/09/01&#39;);return false;">&lt;</a></td><td align="center">2016年10月</td><td class="CalNextPrev" align="right"><a href="javascript:void(0);" onclick="loadBlogCalendar(&#39;2016/11/01&#39;);return false;">&gt;</a></td></tr>
	</tbody></table></td></tr><tr><th class="CalDayHeader" align="center" abbr="日" scope="col">日</th><th class="CalDayHeader" align="center" abbr="一" scope="col">一</th><th class="CalDayHeader" align="center" abbr="二" scope="col">二</th><th class="CalDayHeader" align="center" abbr="三" scope="col">三</th><th class="CalDayHeader" align="center" abbr="四" scope="col">四</th><th class="CalDayHeader" align="center" abbr="五" scope="col">五</th><th class="CalDayHeader" align="center" abbr="六" scope="col">六</th></tr><tr><td class="CalOtherMonthDay" align="center">25</td><td class="CalOtherMonthDay" align="center">26</td><td class="CalOtherMonthDay" align="center">27</td><td class="CalOtherMonthDay" align="center">28</td><td class="CalOtherMonthDay" align="center">29</td><td class="CalOtherMonthDay" align="center">30</td><td class="CalWeekendDay" align="center">1</td></tr><tr><td class="CalWeekendDay" align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td class="CalWeekendDay" align="center">8</td></tr><tr><td class="CalWeekendDay" align="center">9</td><td align="center">10</td><td align="center">11</td><td align="center">12</td><td align="center">13</td><td class="CalTodayDay" align="center">14</td><td class="CalWeekendDay" align="center">15</td></tr><tr><td class="CalWeekendDay" align="center">16</td><td align="center">17</td><td align="center">18</td><td align="center">19</td><td align="center">20</td><td align="center">21</td><td class="CalWeekendDay" align="center">22</td></tr><tr><td class="CalWeekendDay" align="center">23</td><td align="center">24</td><td align="center">25</td><td align="center">26</td><td align="center">27</td><td align="center">28</td><td class="CalWeekendDay" align="center">29</td></tr><tr><td class="CalWeekendDay" align="center">30</td><td align="center">31</td><td class="CalOtherMonthDay" align="center">1</td><td class="CalOtherMonthDay" align="center">2</td><td class="CalOtherMonthDay" align="center">3</td><td class="CalOtherMonthDay" align="center">4</td><td class="CalOtherMonthDay" align="center">5</td></tr>
</tbody></table></div>
    </div><div id="side-categories">
        <h2>随笔分类</h2>
        <ul class="folder">
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/853258.html">AngularJS(4)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/873376.html">git(2)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/688081.html">html5 &amp;&amp; css3(22)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/688079.html">javascript(56)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/688080.html">jquery(13)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/758657.html">Linux(1)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/776312.html">lua(2)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/827709.html">mobile phone(2)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/886192.html">NodeJs(1)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/688085.html">php(1)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/872064.html">webpack(2)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/757783.html">web服务器(6)</a>
                </li>
                <li>
                    
                    <a href="http://www.cnblogs.com/wdlhao/category/790149.html">新的blogs链接(1)</a>
                </li>
        </ul>
    </div><div id="side-top-posts-custom">
    <h2>推荐排行榜</h2>
    <div id="TopDiggPostsBlock"><ul><li><a href="http://www.cnblogs.com/wdlhao/p/5751211.html">1. 用css3绘制你需要的几何图形(24)</a></li><li><a href="http://www.cnblogs.com/wdlhao/p/5623957.html">2. 全面理解JavaScript中的闭包的含义及用法(14)</a></li><li><a href="http://www.cnblogs.com/wdlhao/p/5603570.html">3. 区别和详解：jQuery extend()和jQuery.fn.extend()(14)</a></li><li><a href="http://www.cnblogs.com/wdlhao/p/5801918.html">4. webpack入门和实战(一)：webpack配置及技巧(9)</a></li><li><a href="http://www.cnblogs.com/wdlhao/p/5807157.html">5. webpack入门和实战(二)：全面理解和运用loader和plugins(6)</a></li></ul></div>
</div><div id="side-top-posts">
    <h2>阅读排行榜</h2>
    <div id="TopViewPostsBlock"><ul><li><a href="http://www.cnblogs.com/wdlhao/p/4519343.html">1. layer.msg(msg, time, parme)设置图标问题(2772)</a></li><li><a href="http://www.cnblogs.com/wdlhao/p/5599296.html">2. H5基于iScroll实现下拉刷新，上拉加载更多....(2240)</a></li><li><a href="http://www.cnblogs.com/wdlhao/p/5751211.html">3. 用css3绘制你需要的几何图形(1897)</a></li><li><a href="http://www.cnblogs.com/wdlhao/p/5810955.html">4. git入门学习(一)：github for windows上传本地项目到github(812)</a></li><li><a href="http://www.cnblogs.com/wdlhao/p/5801918.html">5. webpack入门和实战(一)：webpack配置及技巧(769)</a></li></ul></div>
</div></div>
            
                <div id="sideContainer"></div>
                <script type="text/javascript">
                    $.ajax({
                        url: '/' + currentBlogApp + '/mvc/blog/Minyx2_Lite_SideColumn.aspx',
                        data: '{}',
                        type: 'post',
                        dataType: 'text',
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            if (data) {
                                $("#sideContainer").html(data);
                                loadBlogDefaultCalendar();
                                loadBlogSideBlocks();
                                var m = window.__blog.sideContainerRendered;
                                if (m) { m(__$("sideContainer")); }
                                window.__blog.sidebar.__layout();
                            }
                        }
                    });

                </script>
            
        </div>

        <script type="text/javascript">
            var m = window.__blog.sidebarRendered;
            if (m) { m(__$("sidebar")); }
        </script>

        <div id="footer">
            
<p id="logoFoot">
    <a href="http://www.spiga.com.mx/" title="Agencia Interactiva Spiga">www.spiga.com.mx</a>
</p>
<div class="footText">
<p>
Copyright ©2016 流浪的诗人
</p>
<p>
<a href="http://www.cnblogs.com/">博客园</a>
</p>
</div>
        </div>
    </div>

    <script type="text/javascript">
        var m = window.__blog.wrapperRendered;
        if (m) { m(__$("wrapper")); }
    </script>

</div>
<script type="text/javascript">
    var m = window.__blog.containerRendered;
    if (m) { m(__$("container")); }
</script>
<!--PageEndHtml Block Begin-->
<div id="MySignature">
<p class="footer"> 
你的关注和支持是我写作的最大动力~ <br>
书山有路群：452450927<br>
出处：<a href="http://www.cnblogs.com/wdlhao/" target="_blank">http://www.cnblogs.com/wdlhao/</a><br>
github:<a href="https://github.com/wdlhao">https://github.com/wdlhao</a><br>
本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面
</p>
</div>
<!--PageEndHtml Block End-->


</body></html>