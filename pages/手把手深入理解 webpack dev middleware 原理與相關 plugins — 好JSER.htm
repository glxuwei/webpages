<!DOCTYPE html>
<!-- saved from url=(0034)http://hao.jser.com/archive/10637/ -->
<html class="no-js" lang="zh-CN"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	
  	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
	<title>手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER</title>
  	<!--[if lt IE 9]>
  	<script src="http://7xaw6e.com1.z0.glb.clouddn.com/wp-content/themes/alexis/js/html5.js"></script>
  	<![endif]-->
	<link rel="stylesheet" id="wp-pagenavi-css" href="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/pagenavi-css.css" type="text/css" media="all">
<link rel="stylesheet" id="alexis-style-css" href="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/style.css" type="text/css" media="all">
<link rel="stylesheet" id="fontawesome-css" href="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/font-awesome.css" type="text/css" media="all">
<link rel="stylesheet" id="google-fonts-css" href="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/css" type="text/css" media="all">
<script async="" src="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/analytics.js"></script><script type="text/javascript">
var duoshuoQuery = {"short_name":"haojser","sso":{"login":"http:\/\/hao.jser.com\/wp-login.php?action=duoshuo_login","logout":"http:\/\/hao.jser.com\/wp-login.php?action=logout&_wpnonce=39dcfa42c4"},"theme":"default","stylePatch":"wordpress\/Alexis"};
duoshuoQuery.sso.login += '&redirect_to=' + encodeURIComponent(window.location.href);
duoshuoQuery.sso.logout += '&redirect_to=' + encodeURIComponent(window.location.href);
</script>
<script type="text/javascript" src="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/embed.js" charset="UTF-8" async="async"></script>
<script type="text/javascript" src="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/jquery.min.js"></script>
<script type="text/javascript" src="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/jquery-migrate.min.js"></script>
<link rel="prev" title="zepto.cutphoto 头像裁剪小工具" href="http://hao.jser.com/archive/10636/">
<link rel="next" title="React开发——这个坑，反正我是爬上来了！" href="http://hao.jser.com/archive/10638/">
<link rel="canonical" href="http://hao.jser.com/archive/10637/">
<link rel="shortlink" href="http://hao.jser.com/?p=10637">
	<!--custom CSS--> 
	<style type="text/css">	    	    	  
		.header, 
		.menu .menu-item  a,
		.menu .menu-item a:hover,
		.sub-item .menu-item a,  
		.sub-item .menu-item a:hover, 
		.menu-click:hover, 
		.label.right,
		input[type="submit"] { 
			background-color: #3683c5; 
		}

		.header a { 
			color: #fff; 
		}
		
		a,
		a:hover,
		.widget_categories li, 
		.widget_archive li { 
			color: #3683c5; 
		}

		.pagination a, 
		.entry-tags a, 
		input[type="submit"]:hover { 
			color: #3683c5!important; 
		}

		.pagination a, 
		.pagination a:hover,  
		.entry-tags a, 
		.comment-reply-link,  
		a:hover[class^='tag-link-'],
		input[type="submit"], 
		input[type="submit"]:hover { 
			border:1px solid #3683c5; 
		}

		.pagination a:hover, 
		.entry-tags a:hover, 
		.comment-reply-link:hover { 
			background-color: #3683c5!important; 
			color: #fff!important;   
		}

		blockquote { 
			border-left: 2px solid #3683c5; 
		}

		input[type="submit"]:hover { 
			background: transparent!important; 
		}

		.menu-click:hover { 
			border-top:1px solid rgba(255,255,255,0.2); 
		}	
		
		::selection {
    		background-color:#3683c5;

		}
		::-moz-selection {
    		background-color:#3683c5;
		}
	</style>
	<!--/custom CSS-->
      <link type="text/css" rel="stylesheet" href="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/embed.default.css"></head>
<body class="single single-post postid-10637 single-format-standard">
	<!--start:NAVIGATION -->
	<header class="header">
		<div class="logo">
			<h1><a href="http://hao.jser.com/" title="好JSER">好JSER</a></h1>
		</div>
		<a class="hamburger" href="http://hao.jser.com/archive/10637/#menu"><i class="fa fa-bars"></i></a>
		<nav class="menu" role="navigation">
			<ul class="menu-list"><li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-4953"><a href="http://hao.jser.com/">首页</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-4955"><a href="http://hao.jser.com/category/uncategorized/">未分类</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-4956"><a href="http://hao.jser.com/category/jquery/">jQuery专栏</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-4957"><a href="http://hao.jser.com/category/js-basis/">javascript基础知识</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-4958"><a href="http://hao.jser.com/category/js-advance/">javascript进阶知识</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-4959"><a href="http://hao.jser.com/category/os-libs/">开源库类</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-4999"><a href="http://hao.jser.com/category/nodejs/">node.js</a></li>
</ul>		</nav>
	</header>
	<!--end: NAVIGATION -->		
	<!--start:CONTAINER -->
	<div class="container">		<div class="row" role="main">
			<div class="col-8">
							
								<article class="post-10637 post type-post status-publish format-standard hentry category-uncategorized" id="post-10637">
					<h1 class="entry-title">手把手深入理解 webpack dev middleware 原理與相關 plugins</h1>
					<p class="entry-meta">2016年6月1日 / by <a href="http://hao.jser.com/author/segmentfault/" title="由segmentfault发布" rel="author">segmentfault</a></p>
					<hr>
					<div class="entry-content">
						<p>                    </p>
<p>本文將對 webpack 周邊的 middleware 與 plugin 套件等作些介紹，若您對於 webpack 還不了解可以參考這篇<a href="http://andyyou.github.io/javascript/2015/07/23/webpack.html">彙整的翻譯</a></p>
<h3>webpack dev server 是什麼?</h3>
<p><code>webpack dev server</code> 是一個開發伺服器，內建 webpack 使用的 live reloading 功能。</p>
<h3>那 webpack dev middleware 是啥?</h3>
<p>它就是一個用來組織包裝 webpack 使其可以變成中介軟體，或稱中間件的容器。回想一下 express 你大概可以明白關於 middleware 的用途，就是在輸入到輸出的過程中 <code>加工</code> 的一種手段。單純說 middleware 的話我們可以想成一系列<code>任務, 動作</code>(actions stack)，不只 express 有，在 Ruby 中的 rake 也具備這種機制。</p>
<p>先看看<a href="https://webpack.github.io/docs/webpack-dev-server.html">web dev server</a>的說明</p>
<blockquote><p>The webpack-dev-server is a little node.js Express server, which uses the webpack-dev-middleware to serve a webpack bundle.</p>
</blockquote>
<p>從頭說起的話就是 <code>webpack</code> 本身只負責打包編譯的功能 <code>bundle</code>, <code>webpack-dev-server</code> 當然就是協助我們開發的伺服器，這個伺服器底層是靠 express 來實作的，接著思考一下我們要如何更新(live reload)呢? 當然是需要取得 webpack 編好的資料啊，於是就需要在從 <code>request</code> 到 <code>response</code> 的過程中透過 express 的 middleware 取得資料，而方法就是透過 webpack-dev-middleware 。</p>
<p>比起直接編譯成檔案，webpack-dev-middleware 這個套件還多了一些好處:</p>
<ul>
<li>
<p>不需要一直寫入磁碟，所有產生的結果會直接存在記憶體</p>
</li>
<li>
<p>在監視模式(watch mode)下如果檔案發生異動，middleware 會馬上停止提供舊版的 bundle 並且會延遲請求的回應直到編譯完成，如此一來我們就不需要去<code>觀察編譯是否結束了</code></p>
</li>
</ul>
<h3>webpack hot middleware 是什麼?</h3>
<p>我們都知道 webpack dev server 有提供一種<code>Hot Module Replacement/Hot Reloading</code> 熱替換的功能。在一般 <code>webpack-dev-server</code> 的時候我們會在 <code>webpack.config.js</code> 加入 <code>new webpack.HotModuleReplacementPlugin()</code> 或設定來啟用。<br>而 <strong>webpack hot middleware</strong> 是給 <code>webpack-dev-middleware</code> 用的。就是讓我們在一般的 server 上加上熱替換的功能，總結來說就是 <code>webpack-dev-middleware</code> + <code>webpack-hot-middleware</code> 即可讓我們用 express 客製一個有熱替換功能的 webpack 開發伺服器。</p>
<h3>使用 webpack-dev-server 當中介軟體</h3>
<p>webpack 提供了 express 的 middleware 讓我們可以處理一些靜態資源檔而不是使用 <code>express.static</code>。要達成這項功能，我們需要安裝 <code>webpack-dev-middleware</code> 和 <code>webpack-hot-middleware</code></p>
<pre><code>$ npm i webpack express webpack-dev-middleware webpack-hot-middleware -D</code></pre>
<p>安裝完成套件之後，首先我們需要設定一個 <code>webpack.dev.config.js</code> 檔案，並且在 <code>entry</code> 中加上 <code>webpack/hot/dev-server</code> 和 <code>webpack-hot-middleware/client</code></p>
<pre><code>entry: [
  'webpack/hot/dev-server',
  'webpack-hot-middleware/client',
  'client/index.js'
]</code></pre>
<p>這個 <code>webpack.config</code> 主要是給開發伺服器用的，由於這時的匯出都會存在記憶體中，因此 <code>path</code> 可以直接設為根</p>
<pre><code>output: {
  path: '/',
  publicPath: 'http://localhost:8080/scripts/',
  filename: 'bundle.js'
}</code></pre>
<p>最後補上任何您所需要的 loaders，最重要的是記得。</p>
<pre><code>plugins: [
  new webpack.HotModuleReplacementPlugin()
]</code></pre>
<p>接著下來我們開始來撰寫這個開發環境的設定檔和 express 程式。<br>我們會匯入 webpack，webpack-dev-middleware， webpack-hot-middleware 和 express。</p>
<blockquote><p>若需要搭配樣板引擎請自行安裝 ejs 或 jade</p>
</blockquote>
<pre><code>var express = require('express')
var webpack = require('webpack')
var WebpackDevMiddleware = require('webpack-dev-middleware')
var WebpackHotMiddleware = require('webpack-hot-middleware')</code></pre>
<p>載入套件之後，使用 express 建立一個 http 應用程式與路由</p>
<pre><code>app = express()
router = express.Router()

router.get('/', MainController)
app.use(router)</code></pre>
<p>上面只是一個一般的 Server 應用，為了達成 webpack 的神奇黑魔法我們需要匯入 webpack 的設定</p>
<pre><code>var config = require('./webpack.dev.config')</code></pre>
<p>webpack 的角色就是我們的編譯器，透過下面的程式碼建立編譯器的 instance</p>
<pre><code>var compiler = webpack(config)</code></pre>
<p>重點來了，我們有了伺服器 express，有了編譯核心 webpack，接著我們需要 wrapper 來打包 webpack 將其合進 express 的 middleware stack 中。</p>
<pre><code>app.use(WebpackDevMiddleware(compiler, {
  publicPath: config.output.publicPath,
  stats: { colors: true }
}))</code></pre>
<p><code>publicPath</code> 就是我們想要存取前端 bundle 的網址，路徑，位置。<br>然後我們要再加上 webpack-hot-middleware 使其具備熱替換的功能。</p>
<pre><code>app.use(WebpackHotMiddleware(compiler, {
  log: console.log
}))</code></pre>
<p>最後則是 express 的監聽事件</p>
<pre><code>app.listen(8080, function () {
  console.log('Listening on 8080')
})</code></pre>
<p>完整的 server 程式碼如下</p>
<pre><code>var express = require('express')
var webpack = require('webpack')
var WebpackDevMiddleware = require('webpack-dev-middleware')
var WebpackHotMiddleware = require('webpack-hot-middleware')
var config = require('./config/webpack.dev.config')
var compiler = webpack(config)

app = express()
app.set('views', './views')
app.set('view engine', 'ejs')
app.use(express.static('public'));

app.use(WebpackDevMiddleware(compiler, {
  publicPath: config.output.publicPath,
  stats: { colors: true }
}))
app.use(WebpackHotMiddleware(compiler))

var router = express.Router()
router.get('/', function (req, res, next) {
  res.render('index', { message: 'Hey there!'});
})
app.use(router)

app.listen(8080, function () {
  console.log('Listening on 8080')
})</code></pre>
<h3>換個思路</h3>
<p>假設我們並不是要實作一個全站 SPA 的站，實務上我們的確會遇到需要拆分為許多 view <code>.html</code> 的狀況，這種情況下我們會希望自己客製的這個 server 就像 <code>webpack-dev-server</code> 一樣，當然，這邊只是要指出做法，如果一樣您當然就直接用 webpack-dev-server 就好了。</p>
<p>根據上面這個需求最簡單的方式就是透過 <code>express.static(__dirname)</code> 讓 express 直接 return raw 檔案。</p>
<h3>html-webpack-plugin</h3>
<p>小弟認為在學習的過程中，最重要的就是搞懂動機，而這個 <code>html-webpack-plugin</code> 插件，其用途就是簡化建立 html 的過程。<br>先回頭看看上一小節，很直覺的，我們會依據需求建立<code>不同的頁面(.html)</code>，因為在開發過程中很多時候前端只需要注重那些<code>互動介面的邏輯</code>，<code>樣式</code>，<code>樣板</code>，<code>標籤結構</code> ，那我們的重點只有 client 端的 html, js, css 就不在話下了吧！再如果我們又以<code>元件</code>為思路中心來設計實踐的話，那麼 html 裡面大部分的東西都會往元件的 template 搬。依據 SPA 的思路，html 的責任就只是把我們的 bundle 載入並掛載 <code>root component</code>。</p>
<p>如果照著這樣的想法，不斷的新增 html 結果大部分的內容都是重複的那就不太靠譜啦。我們就需要一種簡化工作的方式。</p>
<p>這個套件如上面所說就是簡化<code>建立載入 bundle 的 html</code>的步驟，用在 webpack 打包的檔案包含每次編譯都會更新的 hash 時特方便。<br>我們可以讓套件幫我們產生 html 或者搭配 loaders 與其他樣版引擎。</p>
<h3>基本的用法</h3>
<p>第一種最簡單的用途就是為我們的 bundle 包上一層 html</p>
<pre><code>plugins: [
  new HtmlWebpackPlugin({
    filename: 'i_love_this_file.html'
  })
]</code></pre>
<p>如果我們有多個 <code>entry</code> 進入點，那麼所有的 bundle 都會被加進這個自動產生的 HTML 中。<br>如果我們透過 webpack 匯出了 css 資源檔(例如 extract-text-plugin) 那麼這些檔案也會透過 <code>&lt;link&gt;</code> 被加入 HTML 中。</p>
<h3>html-webpack-plugin 的設定</h3>
<p>當然這個套件也有一些參數，讓我們可以透過設定提供其他的功能。</p>
<ul>
<li>
<p><code>title</code>: 設定該 html  的 <code>&lt;title&gt;</code> 標籤</p>
</li>
<li>
<p><code>filename</code>: html 檔名，也當作路徑存取。預設是 <code>index.html</code></p>
</li>
<li>
<p><code>template</code>: 樣板的路徑，也就是說我們可以先組織 HTML 在載入讓 <code>html-webpack-plugin</code> 幫我們注入(inject) bundle。此部分要注意相對路徑是從 server 程式檔案出發。</p>
</li>
<li>
<p><code>inject</code>: 將所有的資源檔注入 <code>template</code> 或 <code>templateContent</code>，當值是 <code>true</code>, <code>'body'</code> 的時候所有的 js 資源檔都會被注入 <code>&lt;/body&gt;</code> 之前，<code>'head'</code> 則是 <code>&lt;head&gt;</code> 之間，<code>false</code> 自然就是關閉</p>
<ul>
<li>
<p>true: Boolean</p>
</li>
<li>
<p>false: Boolean</p>
</li>
<li>
<p>head: String</p>
</li>
<li>
<p>body: String</p>
</li>
</ul>
</li>
<li>
<p><code>favicon</code>: 替 HTML 加上 favicon 路徑</p>
</li>
<li>
<p><code>minify</code>: 傳入 <a href="https://github.com/kangax/html-minifier#options-quick-reference">html-minifier</a> 參數物件，壓縮輸出。</p>
<ul>
<li>
<p>options: Object</p>
</li>
<li>
<p>false: Boolean</p>
</li>
</ul>
</li>
<li>
<p><code>hash</code>: <code>true</code> 時替 webpack 編譯的檔案或結果路徑結尾補上 hash，這麼做的用意是在開發時期當檔案有異動時可以避免瀏覽器快取</p>
<ul>
<li>
<p>true: Boolean</p>
</li>
<li>
<p>false: Boolean</p>
</li>
</ul>
</li>
<li>
<p><code>cache</code>: 預設是 <code>true</code> 快取檔案，除非檔案有異動</p>
<ul>
<li>
<p>true: Boolean</p>
</li>
<li>
<p>false: Boolean</p>
</li>
</ul>
</li>
<li>
<p><code>showErrors</code>: 預設 <code>true</code> 例外或錯誤資訊會寫入 html 頁面</p>
<ul>
<li>
<p>true: Boolean</p>
</li>
<li>
<p>false: Boolean</p>
</li>
</ul>
</li>
<li>
<p><code>chunks</code>: 允許我們加入一些程式碼片段，例如單元測試</p>
</li>
<li>
<p><code>chunksSortMode</code>: 控制 chunks 排序</p>
<ul>
<li>
<p>none: String</p>
</li>
<li>
<p>auto: String</p>
</li>
<li>
<p>dependency: String</p>
</li>
<li>
<p>{}: Function</p>
</li>
</ul>
</li>
<li>
<p><code>excludeChunks</code>: 略過部分 chunk 程式碼片段</p>
</li>
<li>
<p><code>xhtml</code>: 設定為 <code>true</code> 的話 <code>link</code> 標籤會是 self-closing ，預設是 <code>false</code></p>
<ul>
<li>
<p>true: Boolean</p>
</li>
<li>
<p>false: Boolean</p>
</li>
</ul>
</li>
</ul>
<h3>腦力激盪 – 如果要多個頁面搭配各自的 bundle?</h3>
<p>webapck 難就難在其靈活之中伴隨著複雜，不同的思路有著不同的做法。這一小節目的是為了不讓我們對 webpack 使用上僵化而提出的一個小題目。</p>
<p>要達成這個需求，我們可以先使用 webpack.config 中 <code>[name]</code> 的功能拆分我們的 bundle</p>
<pre><code>{
  entry: {
    a: './path/src/a',
    b: './path/src/b',
    c: './path/src/c'
  },
  output: {
    filename: '[name].bundle.js'
  }
}</code></pre>
<p>接著透過 <code>html-webpack-plugin</code> 的參數，把 <code>inject: false</code> 然後 <code>template</code> 在各自的 template 中使用 bundle。</p>
<h3>
<a href="https://github.com/jaketrent/html-webpack-template">html-webpack-template</a> – 更牛的方式</h3>
<p>照著上面的方式你可能又跟我抱怨，那不是又要產一堆 HTML 了嗎? 對啊！原本這個架構就是針對 SPA 設計的嘛。不過透過這樣來來回回的思考動機與流程我相信對於您日後使用 webpack 與閱讀設定有很大的幫助。現在的問題是 – 你覺得產一大堆 HTML 不是很靠譜，於是我們就有了 <code>html-webpack-template</code> 的產生啦</p>
<p>這個東西大略的用法就是</p>
<pre><code>plugins: [
  new HtmlWebpackPlugin({
    title: 'Sample',
    filename: 'sample.html'
  }),
  new HtmlWebpackPlugin({
    inject: false, // 必須
    template: require('html-webpack-template'), // 必須
    filename: 'sp.html', // 存取的路徑

    // 只需要特定 bundle 可以這樣設定
    chunks: ['vender'],
    title: 'OH My Gosh',
    // 可以參考 html-webpack-template 的參數設定
    // 下面為提供 GA
    googleAnalytics: {
      trackingId: 'UA-XXXX-XX',
      pageViewOnLoad: true
    }
  })
]</code></pre>
<h3>html-webpack-plugin 事件</h3>
<p>特地介紹此套件的事件也是因為挺有可能會需要一些時間點對 html 動些手腳，有了事件的機制我們就可以讓<code>其他套件</code>修改產生的 html</p>
<p>非同步事件:</p>
<ul>
<li>
<p><code>html-webpack-plugin-before-html-generation</code></p>
</li>
<li>
<p><code>html-webpack-plugin-before-html-processing</code></p>
</li>
<li>
<p><code>html-webpack-plugin-after-html-processing</code></p>
</li>
<li>
<p><code>html-webpack-plugin-after-emit</code></p>
</li>
</ul>
<p>同步事件:</p>
<ul>
<li>
<p><code>html-webpack-plugin-alter-chunks</code></p>
</li>
</ul>
<p>大略的用法就是在透過 hook event 綁定的事件做些處理</p>
<pre><code>compiler.plugin('compilation', function(compilation) {
  console.log('The compiler is starting a new compilation...');

  compilation.plugin('html-webpack-plugin-before-html-processing', function(htmlPluginData, callback) {
    htmlPluginData.html += 'The magic footer';
    callback(null, htmlPluginData);
  });
});</code></pre>
<h3>webpack-hot-middleware</h3>
<p><code>webpack-hot-middleware</code> 這個套件只能搭配 <code>webpack-dev-middleware</code> 使用，其實就是把熱替換的功能加到一般 server 應用。<br>這個模組只專注在處理 webpack 和瀏覽器溝通的機制。這個中介軟體會去訂閱監聽開發伺服器，當更新或異動發生的時候它就透過 webpack 的 HMR API 來更新。實際上讓您的程式能無縫的使用熱替換已超過本文範圍，在這部分通常會靠其他模組來處理。</p>
<p>安裝完套件與在伺服器 app 中套用之外，要記得 webpack.config 的 plugin 也要加上 <code>HotModuleReplacementPlugin</code></p>
<pre><code>plugins: [
  // Webpack 1.0
  new webpack.optimize.OccurenceOrderPlugin(),
  // Webpack 2.0 fixed this mispelling
  // new webpack.optimize.OccurrenceOrderPlugin(),
  new webpack.HotModuleReplacementPlugin(),
  new webpack.NoErrorsPlugin()
]</code></pre>
<p>簡短地介紹一下 <code>OccurrenceOrderPlugin</code> 部份，您應該知道 webapck 會給編譯好的程式碼片段一個 id 以用來辨別。<br>透過上面的這個 plugin 可以讓 webpack 在 id 的分派上優化並保持一致性。</p>
<p>接著要在 entry point 加上 <code>webpack-hot-middleware/client</code> 這隻檔案會連到 server 目的是當 server 重新編譯好檔案時收到通知然後更新 client 的檔案。</p>
<h3>如何撰寫 plugin</h3>
<p>為什麼要了解怎麼寫 plugin 呢? 因為某些 plugin 可以擴展支援其他 plugin 相互傳遞資料或需要客製後續任務，所以稍微明白 plugin 的寫法可以讓我們對於 plugin 的設定更加清楚。</p>
<p>plugin 的架構設計促使第三方開發者讓 webpack 核心發揮出無限的潛力。在不同建置階段執行 callback ，開發者可以自訂出特有的行為。<br>當然建置 plugin 比起開發 loader 是較進階的議題，因為我們必須要理解 webpack 內部的一些 hook 事件</p>
<h5>編譯器與編譯結果</h5>
<p>要開發 plugin 第一步就是先了解其中最重要的兩個角色 <code>compiler</code> 和 <code>compilation</code> 物件</p>
<ul>
<li>
<p><code>compiler</code> 編譯器物件代表一個完整設定的 webpack 環境。這個物件在 webpack 發動之後就會被建置，而且只會建置一次。然後它會配置所有可以操作的設定包含 <code>loaders</code>, <code>plugins</code>。當我們套用一個 plugin 這個 plugin 會收到 <code>compiler</code> 的參考透過存取這個<code>參考 reference</code>就可以取得 webpack 環境</p>
</li>
<li>
<p><code>compilation</code> 編譯成果這個物件代表的是<code>某個版本的編譯後的資源檔</code>，在運行 webpack dev middleware 期間每當檔案發生異動就會產生一個新的 <code>compilation</code> 也就是產生新的編譯結果。這個<code>編譯結果</code>包含的訊息包含 module 模組的狀態，編譯後的資源檔，發生異動的檔案，被觀察的相依套件等。這個編譯結果物件也提供一些執行 callback 的機會讓我們可以在過程中客製一些自己想要的行為。</p>
</li>
</ul>
<p>任何 webpack plugin 都必須依靠這兩者來完成，所以有需要對其原始碼有些大概的了解</p>
<ul>
<li>
<p><a href="https://github.com/webpack/webpack/blob/master/lib/Compiler.js">Compiler Source</a></p>
</li>
<li>
<p><a href="https://github.com/webpack/webpack/blob/master/lib/Compilation.js">Compilation Source</a></p>
</li>
</ul>
<h3>基本 plugin 架構</h3>
<p>本質上來說 plugin 只是一個物件實例具有 apply 方法，這個 <code>apply</code> 會在安裝時期被 <code>webpack compiler</code> 執行一次。<br>透過這一次的執行呢我們就可以繫結許多事件，直接來看看程式碼您就明白了。</p>
<pre><code>function MyPlugin(options) {
  // 設定參數
  this.options = options
}

MyPlugin.prototype.apply = function(compiler) {
  compiler.plugin('done', function() {
    // 當 plugin 安裝完成就會...
    console.log('Hello World!');
  })

  // 我們自然需要拿到編譯的結果
  compiler.plugin("compilation", function(compilation) {
    console.log(compilation.assets)

    compilation.plugin("optimize", function() {
      console.log("Assets are being optimized.");
    });
 });
}</code></pre>
<p>OK! 我們現在並不是要開發套件所以點到這邊我想就足夠了，剩下的您可以自行參考相關文件。<br> text.forEach is not a function</p>
<ul>
<li>
<p><a href="https://github.com/webpack/docs/wiki/plugins">詳細 plugin API</a></p>
</li>
</ul>
<h3>extract-text-webpack-plugin</h3>
<p>顧名思義這個 plugin 的用途就是把 text 類型的結果匯出成一個檔案，先說這不是非常精確的描述，但概念來說 text 類型指的就是<code>不會</code>輸出成 <code>module.exports</code> 或 <code>json</code> 的資料。而像是 CSS 這類的資源檔 webpack 其實最終就是在 JS 中幫我們建個 style tag 的  dom 然後整包放進去。<code>file-loader</code>, <code>raw-loader</code> 等等這類內容大略就屬於 text 類型。<a href="https://webpack.github.io/docs/loader-conventions.html">查閱各種 loaders 回傳資料類型</a></p>
<p>於是乎以 entry point 為單位過程中解析的 text 內容就會被抽出來匯出成一個檔案。最常見的用法就是把 css 抽出來:</p>
<pre><code>var ExtractTextPlugin = require("extract-text-webpack-plugin")

module.exports = {
  module: {
    loaders: [
      { test: //.css$/, loader: ExtractTextPlugin.extract("style", "css") }
    ]
  },
  plugins: [
    // 注意: 這邊的副檔名如果亂下是會造成瀏覽器行為不符合預期的，例如不給副檔名那瀏覽器就會當作 binary 下載
    new ExtractTextPlugin("styles.css")
  ]
}</code></pre>
<p>如果想要拆分多個檔案，那麼就先初始化 instance</p>
<pre><code>let ExtractTextPlugin = require('extract-text-webpack-plugin');

// multiple extract instances
let cssExtractor = new ExtractTextPlugin('stylesheets/[name].css');
let lessExtractor = new ExtractTextPlugin('stylesheets/[name].less');

module.exports = {
  module: {
    loaders: [
      {test: //.scss$/i, loader: cssExtractor.extract(['css','sass'])},
      {test: //.less$/i, loader: lessExtractor.extract(['css','less'])},
      ...
    ]
  },
  plugins: [
    cssExtractor,
    lessExtractor
  ]
}</code></pre>
<h3>HMR 熱替換</h3>
<p>Hot Module Replacement (HRM) 又稱熱替換，功能就是在程式運行中交換，移除，增加模組且不會使頁面重新載入。這跟我們伺服器的熱插拔差不多概念。</p>
<h5>它是怎麼運作的?</h5>
<p>webpack 在 bundle 中即我們的 js 裡加入了一個小型的 HMR 執行環境，在編譯過程中這個 runtime 會在我們的 app 中運行。<br>當建置完成時 webpack 也不會消失反而會持續存在，繼續監控原始碼檔案是否發生修改。一旦 webpack 發現程式有改變他就會去重新編譯那些有修改的模組，不全部重建。根據設定要嘛就是 webpack 把訊號丟給 HRM runtime 要嘛就是 HRM 自己更新異動資訊。不管哪種方式反正重點就是 HRM runtime 會取得修改的模組，接著就試著在運行的狀態下更新模組。首先會先檢查更新的模組是否能 <code>self-accept</code>。</p>
<p>關於 <code>self-accept</code> 先看看<a href="https://github.com/webpack/hot-node-example/blob/master/index.js">範例</a>和<a href="https://github.com/webpack/webpack/tree/master/test/hotCases/runtime">原始碼</a>，意思是要<code>支援熱替換的模組或說編譯結果</code>基本上是應該要實作 <code>module.hot.accept</code> 和遵循其他熱替換的規則。<br>如果沒有辦法自己確認自己可以直接被更新，那就往上傳，通知那些 require 匯入使用自己的模組更新，就這樣層層往上。直到有人可以 accept 或到頂，不過一旦到根就表示熱替換失敗。</p>
<p>讀到這邊你可能通了，為什麼當我們要讓 React 支援 Hot Mode 的時候需要一個 <code>react-hot-loader</code>。以及因為要和 HRM 執行環境溝通的關係我們需要在 bundle 的 entry point 加上 <code>webpack/hot/dev-server</code>, <code>webpack-hot-middleware/client</code> 之類的東西。</p>
<h5>從 App 的角度</h5>
<p><img data-src="/image?src=http://i.imgur.com/HziHPQ0.png&amp;objectId=1190000005614604&amp;token=8bc7d10ebe65338439e846a0a6057f21" alt="手把手深入理解 webpack dev middleware 原理與相關 plugins"></p>
<p>當 App 程式開始執行(就是載入 bundle) HMR runtime 執行環境就會啟用，接下來程式就會要求 HMR runtime 幫我們檢查是否需要更新。HMR 會幫我們下載更新然後通知 App 程式有哪些更新可用。</p>
<h5>從編譯器(webpack/compiler)的角度</h5>
<p>除了一般的資源檔像是圖片，css，編譯器還需要觸發<code>更新事件</code>讓程式碼可以完成新舊替換。這個”更新”包含兩個部分</p>
<ol>
<li>
<p>更新的 Manifest 支援配置文件(json)</p>
</li>
<li>
<p>一或多個更新的<code>chunks</code>程式片段(js)</p>
</li>
</ol>
<p>支援配置文件包含更新後編譯結果的 hash 和新的 chunks 程式碼片段的列表。而新的 chunks 則包含更新後模組的程式碼或 <code>flag</code><br>編譯器同時也會確保模組和片段 ID 是一致的，透過一個 <code>records</code> 的 json 檔案來儲存相關資訊。</p>
<h5>從模組角度</h5>
<p>HMR 是選擇性的功能，所以只有在模組包含 HRM 程式碼才會被影響作用。也就是在模組中使用文件有提供的 API。一般來說模組的開發者 handler 會在模組相依的部分更新時被執行。當然也可以寫一個 handler 在這個模組更新時被呼叫。<br>在大部分的情況並不需要為每一個模組都撰寫<code>支援 HMR 的程式碼</code>，當一個模組沒有遵循處理規則時就會往上層傳遞事件，意味著只有上方有一個 handler 可以處理就好，但不要讓這個冒泡事件一路冒到頂喔。</p>
<h5>從 HMR runtime 角度</h5>
<p>模組系統的執行環境其實是額外加入的程式，用來追蹤模組之間的父子關係。</p>
<pre><code>if(module.hot) {
    ...
}</code></pre>
<p>從管理的角度，這個執行環境 runtime 支援 <code>check</code> 和 <code>apply</code> 兩個方法。<br><code>check</code> 的功能是發出 HTTP request 用來取得上面提到的 Manifest，當 request 失敗時就等於沒有任何更新。否則就會依照得到的<code>更新列表</code>去比對 chunks。<br>對每個已載入的 chunk 都會有對應更新的程式碼要被下載。所有模組更新會被存在 runtime 中準備拿來更新。當執行環境切換成 <code>ready</code> 狀態就表示更新的程式碼都被下載完成了隨時可以套用。</p>
<p>接著 <code>apply</code> 方法會將所有已更新的模組的 <code>flag</code> 標記為 <code>invalid</code> 無效，然後無效的模組需要 update 的 handler 處理函式，這個 handler 會在模組中或者父節點上。只要沒有這個 handler 就會持續往上曾傳遞並標註為 <code>invalid</code>，一旦冒泡機制冒到頂端即 <code>entry point</code> 就表示熱替換失敗。</p>
<p>所有被標記為無效的模組都會透過 <code>module.hot.dispose</code> 卸載，然後更新 hash，再來所有 <code>module.hot.accept</code> 的 handlers 會被調用。<br>執行環境切回 <code>idle</code> 狀態表示所有更新都完成了。</p>
<p>講這麼多其實簡單來說就是我們的模組要補一些 hot mode 的邏輯</p>
<pre><code>var app = require("./app");

// 模擬每 5 秒更新一次
setInterval(function() {
    console.log(app(new Date()));
}, 5000);

if(module.hot) {
    module.hot.accept("./app", function() {
        app = require("./app");
    });
}</code></pre>
<h6>檔案的更新流程</h6>
<p>左邊表示初始化時編譯器產生的結構，右邊則是當模組 4 和 9 更新時的流程。<br>方塊表示從 Entry 開始，webpack 幫我們編譯產生的部份從 Entry 然後轉換成 Chunk 0 – 4</p>
<p><img data-src="/image?src=http://webpack.github.io/assets/HMR.svg&amp;objectId=1190000005614604&amp;token=bc452cf27e130336db9500d5b2b4c851" alt="手把手深入理解 webpack dev middleware 原理與相關 plugins"></p>
<h1>資源參考</h1>
<ul>
<li>
<p><a href="https://github.com/ampedandwired/html-webpack-plugin">html-webpack-plugin</a></p>
</li>
<li>
<p><a href="http://madole.github.io/blog/2015/08/26/setting-up-webpack-dev-middleware-in-your-express-application/">webpack dev middleware 說明</a></p>
</li>
</ul>
<h1>備註</h1>
<p>部分內容可能理解不夠精確若有錯誤歡迎指教留言</p>
<p></p>
					</div>
					<div class="pagelink"></div>
					<p class="entry-tags"></p>
					<hr>
					<div class="pagelink">
                    <span class="nav-left"><a href="http://hao.jser.com/archive/10636/" rel="prev"><i class="fa fa-angle-left"></i> zepto.cutphoto 头像裁剪小工具</a></span>                    <span class="nav-right"><a href="http://hao.jser.com/archive/10638/" rel="next">React开发——这个坑，反正我是爬上来了！ <i class="fa fa-angle-right"></i></a></span>                    </div>
				</article>
				<div style="margin: 30px 0;">
<ul id="tags_related">
<li>* 暂无相关文章</li></ul></div>
<!--
				<div class="author-bio">
					<h4><a href="http://hao.jser.com/author/segmentfault/" title="由segmentfault发布" rel="author">segmentfault</a></h4>
					<p><a rel="nofollow" target="_blank" href="http://segmentfault.com/a/1190000005614604">http://segmentfault.com/a/1190000005614604</a></p>
				</div>-->
				<a name="comments"></a>

<div class="ds-thread" data-thread-key="10637" data-author-key="13" data-title="手把手深入理解 webpack dev middleware 原理與相關 plugins" data-url="http://hao.jser.com/archive/10637/" id="ds-thread"><div id="ds-reset"><div class="ds-comments-info"><div class="ds-sort"><a class="ds-order-desc">最新</a><a class="ds-order-asc ds-current">最早</a><a class="ds-order-hot">最热</a></div><ul class="ds-comments-tabs"><li class="ds-tab"><a class="ds-comments-tab-duoshuo ds-current" href="javascript:void(0);">0条评论</a></li>  </ul></div><ul class="ds-comments"><li class="ds-post ds-post-placeholder">还没有评论，沙发等你来抢</li></ul><div class="ds-paginator" style="display: none;"><div class="ds-border"></div><a data-page="1" href="javascript:void(0);" class="ds-current">1</a></div><a name="respond"></a><div class="ds-login-buttons"><p>社交帐号登录:</p><div class="ds-social-links"><ul class="ds-service-list"><li><a href="http://haojser.duoshuo.com/login/weixin/?sso=1&amp;redirect_uri=http%3A%2F%2Fhao.jser.com%2Fwp-login.php%3Faction%3Dduoshuo_login%26redirect_to%3Dhttp%253A%252F%252Fhao.jser.com%252Farchive%252F10637%252F" rel="nofollow" class="ds-service-link ds-weixin">微信</a></li><li><a href="http://haojser.duoshuo.com/login/weibo/?sso=1&amp;redirect_uri=http%3A%2F%2Fhao.jser.com%2Fwp-login.php%3Faction%3Dduoshuo_login%26redirect_to%3Dhttp%253A%252F%252Fhao.jser.com%252Farchive%252F10637%252F" rel="nofollow" class="ds-service-link ds-weibo">微博</a></li><li><a href="http://haojser.duoshuo.com/login/qq/?sso=1&amp;redirect_uri=http%3A%2F%2Fhao.jser.com%2Fwp-login.php%3Faction%3Dduoshuo_login%26redirect_to%3Dhttp%253A%252F%252Fhao.jser.com%252Farchive%252F10637%252F" rel="nofollow" class="ds-service-link ds-qq">QQ</a></li><li><a href="http://haojser.duoshuo.com/login/renren/?sso=1&amp;redirect_uri=http%3A%2F%2Fhao.jser.com%2Fwp-login.php%3Faction%3Dduoshuo_login%26redirect_to%3Dhttp%253A%252F%252Fhao.jser.com%252Farchive%252F10637%252F" rel="nofollow" class="ds-service-link ds-renren">人人</a></li><li><a class="ds-more-services" href="javascript:void(0)">更多»</a></li></ul><ul class="ds-service-list ds-additional-services"><li><a href="http://haojser.duoshuo.com/login/douban/?sso=1&amp;redirect_uri=http%3A%2F%2Fhao.jser.com%2Fwp-login.php%3Faction%3Dduoshuo_login%26redirect_to%3Dhttp%253A%252F%252Fhao.jser.com%252Farchive%252F10637%252F" rel="nofollow" class="ds-service-link ds-douban">豆瓣</a></li><li><a href="http://haojser.duoshuo.com/login/kaixin/?sso=1&amp;redirect_uri=http%3A%2F%2Fhao.jser.com%2Fwp-login.php%3Faction%3Dduoshuo_login%26redirect_to%3Dhttp%253A%252F%252Fhao.jser.com%252Farchive%252F10637%252F" rel="nofollow" class="ds-service-link ds-kaixin">开心</a></li><li><a href="http://haojser.duoshuo.com/login/baidu/?sso=1&amp;redirect_uri=http%3A%2F%2Fhao.jser.com%2Fwp-login.php%3Faction%3Dduoshuo_login%26redirect_to%3Dhttp%253A%252F%252Fhao.jser.com%252Farchive%252F10637%252F" rel="nofollow" class="ds-service-link ds-baidu">百度</a></li><li><a href="http://haojser.duoshuo.com/login/google/?sso=1&amp;redirect_uri=http%3A%2F%2Fhao.jser.com%2Fwp-login.php%3Faction%3Dduoshuo_login%26redirect_to%3Dhttp%253A%252F%252Fhao.jser.com%252Farchive%252F10637%252F" rel="nofollow" class="ds-service-link ds-google">谷歌</a></li></ul></div></div><div class="ds-replybox"><a class="ds-avatar" href="javascript:void(0);" onclick="return false"><img src="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/noavatar_default.png" alt=""></a><form method="post"><input type="hidden" name="thread_id" value="6291215747112764162">
<input type="hidden" name="parent_id" value="">
<input type="hidden" name="nonce" value="5805e6a39a7f2"><div class="ds-textarea-wrapper ds-rounded-top"><textarea name="message" title="Ctrl+Enter快捷提交" placeholder="说点什么吧…"></textarea><pre class="ds-hidden-text"></pre></div><div class="ds-post-toolbar"><div class="ds-post-options ds-gradient-bg"><span class="ds-sync"></span></div><button class="ds-post-button" type="submit">发布</button><div class="ds-toolbar-buttons"><a class="ds-toolbar-button ds-add-emote" title="插入表情"></a></div></div></form></div><p class="ds-powered-by"><a href="http://duoshuo.com/" target="_blank" rel="nofollow">好JSER正在使用多说</a></p></div></div>

<script type="text/javascript">
	if (typeof DUOSHUO !== 'undefined')
		DUOSHUO.EmbedThread('.ds-thread');
</script>
							</div>	
			<!--start:SIDEBAR -->
<aside class="col-4" role="complementary">	    
	<div id="search-2" class="widget widget_search"><form role="search" method="get" id="searchform" action="http://hao.jser.com/">
	<input type="search" name="s" id="s" class="search" value="type &amp; press ENTER" onfocus="if (this.value == &#39;type &amp; press ENTER&#39;) { this.value = &#39;&#39;;}" onblur="if (this.value == &#39;&#39;) { this.value = &#39;type &amp; press ENTER&#39;;}" autocomplete="off">
</form></div>		<div id="recent-posts-2" class="widget widget_recent_entries">		<h4 class="widget-title">近期文章</h4>		<ul>
					<li>
				<a href="http://hao.jser.com/archive/12446/">Chrome扩展程序开发</a>
						</li>
					<li>
				<a href="http://hao.jser.com/archive/12444/">JavaScript函数式真正的浅析</a>
						</li>
					<li>
				<a href="http://hao.jser.com/archive/12443/">（DOM） offsetHeight、clientHeight 与 scrollHeight</a>
						</li>
					<li>
				<a href="http://hao.jser.com/archive/12442/">（DOM） HTMLElement 中的 offset- 属性</a>
						</li>
					<li>
				<a href="http://hao.jser.com/archive/12441/">React Native填坑之旅–class（番外篇）</a>
						</li>
					<li>
				<a href="http://hao.jser.com/archive/12440/">利用webpack处理开发与线上环境静态资源切换问题</a>
						</li>
					<li>
				<a href="http://hao.jser.com/archive/12439/">切图崽的自我修养－进一步认知viewModel</a>
						</li>
					<li>
				<a href="http://hao.jser.com/archive/12438/">angular开发中问题记录–启动过程初探</a>
						</li>
					<li>
				<a href="http://hao.jser.com/archive/12445/">Surikate – Choosing Correct Way Cpa Offer Try With Admobilereviews Service</a>
						</li>
					<li>
				<a href="http://hao.jser.com/archive/12437/">项目总结：游船管理系统</a>
						</li>
				</ul>
		</div><div id="tag_cloud-3" class="widget widget_tag_cloud"><h4 class="widget-title">标签</h4><div class="tagcloud"><a href="http://hao.jser.com/tag/chinese-font/" class="tag-link-51" title="10个话题" style="font-size: 10.162601626016pt;">中文字体</a>
<a href="http://hao.jser.com/tag/event/" class="tag-link-81" title="18个话题" style="font-size: 12.894308943089pt;">事件</a>
<a href="http://hao.jser.com/tag/animation/" class="tag-link-132" title="7个话题" style="font-size: 8.5691056910569pt;">动画</a>
<a href="http://hao.jser.com/tag/prototype/" class="tag-link-120" title="6个话题" style="font-size: 8pt;">原型</a>
<a href="http://hao.jser.com/tag/%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/" class="tag-link-185" title="14个话题" style="font-size: 11.756097560976pt;">学习笔记</a>
<a href="http://hao.jser.com/tag/data-struct/" class="tag-link-146" title="7个话题" style="font-size: 8.5691056910569pt;">数据结构</a>
<a href="http://hao.jser.com/tag/%e6%95%b0%e7%bb%84/" class="tag-link-186" title="19个话题" style="font-size: 13.121951219512pt;">数组</a>
<a href="http://hao.jser.com/tag/module/" class="tag-link-21" title="6个话题" style="font-size: 8pt;">模块化</a>
<a href="http://hao.jser.com/tag/algorithm/" class="tag-link-147" title="6个话题" style="font-size: 8pt;">算法</a>
<a href="http://hao.jser.com/tag/threading/" class="tag-link-273" title="8个话题" style="font-size: 9.1382113821138pt;">线程</a>
<a href="http://hao.jser.com/tag/inheritance/" class="tag-link-70" title="6个话题" style="font-size: 8pt;">继承</a>
<a href="http://hao.jser.com/tag/design-pattern/" class="tag-link-63" title="29个话题" style="font-size: 15.170731707317pt;">设计模式</a>
<a href="http://hao.jser.com/tag/closure/" class="tag-link-33" title="8个话题" style="font-size: 9.1382113821138pt;">闭包</a>
<a href="http://hao.jser.com/tag/interview/" class="tag-link-4" title="43个话题" style="font-size: 16.991869918699pt;">面试</a>
<a href="http://hao.jser.com/tag/ajax/" class="tag-link-216" title="9个话题" style="font-size: 9.7073170731707pt;">ajax</a>
<a href="http://hao.jser.com/tag/android/" class="tag-link-48" title="8个话题" style="font-size: 9.1382113821138pt;">Android</a>
<a href="http://hao.jser.com/tag/angular/" class="tag-link-20" title="13个话题" style="font-size: 11.414634146341pt;">angular</a>
<a href="http://hao.jser.com/tag/backbone/" class="tag-link-129" title="36个话题" style="font-size: 16.19512195122pt;">backbone</a>
<a href="http://hao.jser.com/tag/cheap-jerseys/" class="tag-link-280" title="8个话题" style="font-size: 9.1382113821138pt;">cheap jerseys</a>
<a href="http://hao.jser.com/tag/cocos2d-js/" class="tag-link-125" title="15个话题" style="font-size: 11.983739837398pt;">cocos2d-js</a>
<a href="http://hao.jser.com/tag/coffeescript/" class="tag-link-173" title="13个话题" style="font-size: 11.414634146341pt;">coffeescript</a>
<a href="http://hao.jser.com/tag/console/" class="tag-link-277" title="6个话题" style="font-size: 8pt;">console</a>
<a href="http://hao.jser.com/tag/css/" class="tag-link-13" title="6个话题" style="font-size: 8pt;">css</a>
<a href="http://hao.jser.com/tag/css3/" class="tag-link-54" title="10个话题" style="font-size: 10.162601626016pt;">css3</a>
<a href="http://hao.jser.com/tag/dom/" class="tag-link-121" title="25个话题" style="font-size: 14.373983739837pt;">dom</a>
<a href="http://hao.jser.com/tag/ecmascript/" class="tag-link-3" title="32个话题" style="font-size: 15.626016260163pt;">ECMAScript</a>
<a href="http://hao.jser.com/tag/express/" class="tag-link-267" title="8个话题" style="font-size: 9.1382113821138pt;">express</a>
<a href="http://hao.jser.com/tag/html5/" class="tag-link-5" title="120个话题" style="font-size: 22pt;">html5</a>
<a href="http://hao.jser.com/tag/ie6/" class="tag-link-268" title="13个话题" style="font-size: 11.414634146341pt;">ie6</a>
<a href="http://hao.jser.com/tag/javascript-good-parts/" class="tag-link-179" title="6个话题" style="font-size: 8pt;">JavaScript语言精粹</a>
<a href="http://hao.jser.com/tag/jquery/" class="tag-link-19" title="16个话题" style="font-size: 12.325203252033pt;">jquery</a>
<a href="http://hao.jser.com/tag/knockout/" class="tag-link-52" title="11个话题" style="font-size: 10.617886178862pt;">Knockout</a>
<a href="http://hao.jser.com/tag/mvc/" class="tag-link-56" title="19个话题" style="font-size: 13.121951219512pt;">mvc</a>
<a href="http://hao.jser.com/tag/node-js/" class="tag-link-136" title="22个话题" style="font-size: 13.80487804878pt;">node.js</a>
<a href="http://hao.jser.com/tag/npm/" class="tag-link-135" title="7个话题" style="font-size: 8.5691056910569pt;">npm</a>
<a href="http://hao.jser.com/tag/php/" class="tag-link-111" title="18个话题" style="font-size: 12.894308943089pt;">php</a>
<a href="http://hao.jser.com/tag/promise/" class="tag-link-219" title="6个话题" style="font-size: 8pt;">promise</a>
<a href="http://hao.jser.com/tag/r-lang/" class="tag-link-264" title="8个话题" style="font-size: 9.1382113821138pt;">R语言</a>
<a href="http://hao.jser.com/tag/react-js/" class="tag-link-126" title="12个话题" style="font-size: 10.959349593496pt;">react.js</a>
<a href="http://hao.jser.com/tag/settimeout/" class="tag-link-234" title="10个话题" style="font-size: 10.162601626016pt;">setTimeout</a>
<a href="http://hao.jser.com/tag/sizzle/" class="tag-link-188" title="7个话题" style="font-size: 8.5691056910569pt;">sizzle</a>
<a href="http://hao.jser.com/tag/swift/" class="tag-link-158" title="11个话题" style="font-size: 10.617886178862pt;">swift</a>
<a href="http://hao.jser.com/tag/this/" class="tag-link-115" title="10个话题" style="font-size: 10.162601626016pt;">this</a>
<a href="http://hao.jser.com/tag/underscore/" class="tag-link-178" title="8个话题" style="font-size: 9.1382113821138pt;">underscore</a>
<a href="http://hao.jser.com/tag/zepto/" class="tag-link-276" title="12个话题" style="font-size: 10.959349593496pt;">zepto</a></div>
</div><div id="text-2" class="widget widget_text"><h4 class="widget-title">推荐</h4>			<div class="textwidget"><p><a href="http://learn.jser.com/" target="_blank">全栈教程</a><br><br>
<a href="http://run.jser.com/" target="_blank">在线执行代码</a><br></p>
</div>
		</div>		                
</aside>
<!--END: SIDEBAR -->
		</div> <!-- row -->				
	</div>
	<!--end: CONTAINER -->	
	<!--start:FOOTER -->
	<footer id="footer" class="row" role="contentinfo">
		<div class="col-6">		
			Powered by <a href="http://wordpress.org/">WordPress</a> /			<a href="http://www.jser.com/">Jser</a>			
		</div>
  		<div class="col-6 text-right">
			<a href="http://hao.jser.com/" rel="home">好JSER</a> 
			© 2013
  		</div>
	</footer>
	<!--end: FOOTER -->
	<script type="text/javascript" src="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/comment-reply.min.js"></script>
<script type="text/javascript" src="./手把手深入理解 webpack dev middleware 原理與相關 plugins — 好JSER_files/global.js"></script>

<script type="text/javascript">
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-50180202-1', 'jser.com');
  ga('send', 'pageview');

</script>

<!--43 queries in 0.193 seconds.-->




<!-- cached at 2016-10-16 09:27:54 --></body></html>