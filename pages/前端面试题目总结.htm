<!DOCTYPE html>
<!-- saved from url=(0106)http://front-end.leanote.com/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93 -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="keywords" content="leanote,leanote.com">
<meta name="description" content="leanote, not only a notebook">
<meta name="author" content="leanote">

<title>

	前端面试题目总结

    
</title>

<link href="./前端面试题目总结_files/bootstrap.css" rel="stylesheet">

<link href="./前端面试题目总结_files/font-awesome.css" rel="stylesheet">
<link href="./前端面试题目总结_files/style.css" rel="stylesheet">

<script>
function log(o) {
}
</script>
<style>

</style>
<script type="text/javascript" src="./前端面试题目总结_files/MathJax.js"></script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
<body style="zoom: 1;"><div id="MathJax_Message" style="display: none;"></div>

<div id="headerAndNav">
	
	<div id="headerContainer" class="container">
		
		<div id="header">
	
			<h1>
				<a href="http://front-end.leanote.com/" id="logo">
    				
    				<div class="blog-logo">
    				    <img src="./前端面试题目总结_files/01c9bc4235d3a8b234ad8bc1c9f39cd5.jpg" title="note by lfkid">
    				</div>
    				
    				<div>
    				    note by lfkid
    				</div>
				</a>
			</h1>
			<div id="blogDesc">
				要学的还有很多，一路折腾，一路前行
			</div>
		</div>
	</div>

	
	<div class="navbar navbar-default" id="nav">
	
        <div class="menu" id="menu">
    	    <i class="fa fa-bars"></i>
    	</div>
			
	    <div class="container nav-container" id="nav-container">
	      
	    <div class="clearfix nav-search">
	    <div class="navbar-header">
	      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
	        <span class="sr-only">Toggle navigation</span>
	        <span class="icon-bar"></span>
	        <span class="icon-bar"></span>
	        <span class="icon-bar"></span>
	      </button>
	      <a class="navbar-brand" href="http://front-end.leanote.com/">
	      	
	      	
			<img src="./前端面试题目总结_files/01c9bc4235d3a8b234ad8bc1c9f39cd5.jpg" title="note by lfkid">
			
	      </a>
	    </div>
	    <div class="navbar-collapse collapse">
	      <ul class="nav navbar-nav">
	      	
	    	<li class=""><a href="http://front-end.leanote.com/">主页</a></li>
		    
		   	
				<li class="">
					<a href="http://front-end.leanote.com/cate/JavaScript">JavaScript</a>
				</li>
			
				<li class="">
					<a href="http://front-end.leanote.com/cate/HTML-CSS">HTML &amp; CSS</a>
				</li>
			
				<li class="">
					<a href="http://front-end.leanote.com/cate/DS-Algorithms">DS &amp; Algorithms </a>
				</li>
			
				<li class="">
					<a href="http://front-end.leanote.com/cate/Tools">Tool</a>
				</li>
			
			
			
			    <li class="">
					<a href="http://front-end.leanote.com/single/About-Me">About Me</a>
				</li>
			
			
			
			<li class="">
				<a href="http://front-end.leanote.com/archives">归档</a>
			</li>
			<li class="">
				<a href="http://front-end.leanote.com/tags">标签</a>
			</li>
			
	      </ul>
	      <form class="navbar-form navbar-left" id="search" onsubmit="search(event);return false;">
	      	<div class="input-group">
		        <input type="text" placeholder="search" id="searchInput" class="form-control" value="">
		  	</div>
	      </form>
	    </div>
	    </div>
	  </div>
	</div>
</div>

<div id="postsContainer">
	<div id="posts">
		<div class="each-post">
			<div class="title">
				前端面试题目总结
			</div>
			<div class="created-time">
				<i class="fa fa-bookmark-o"></i>
    			
    				无
    			
    			&nbsp;&nbsp;
    			<i class="fa fa-clock-o"></i> 2016-04-13 18:49:52 
    			&nbsp;&nbsp;
    			<span class="fa fa-eye"></span> 21
    			&nbsp;&nbsp;
    			<span class="fa fa-thumbs-o-up"></span> 0
    			&nbsp;&nbsp;
    			<span class="fa fa-comments-o"></span> 0
			</div>
			
			
			<div class="mobile-created-time">
			
				<img src="./前端面试题目总结_files/c9b16cb21777284040aeb6dfe6b997cf.jpg" id="userLogo">
			
			lfkid
	
			
			</div>
			
			<div class="desc markdown-content" id="content"><h3 id="title">提示与建议</h3>

<ul>
<li><p>拥有一颗强大无比的内心，保持自信，无论何时何地都要相信自己，不要放弃。</p></li>
<li><p>有一份用心、精致的简历。</p></li>
<li><p>在自己总结的学习中，对于一个问题最好理清思路这样面试的时候更加有条理。最好学会发散思维，联系知识点。</p></li>
<li><p>可以从以下几个方面来回答。是什么！！！优点！！缺点！（基本上从这几个方面入手，面试官也没什么问题了，剩下的就是问题的扩展）</p></li>
</ul>

<hr>

<h3 id="title-1">前端</h3>

<p>以下两个问题很关键，这将是一条很长的路…</p>

<ul>
<li>为什么选择前端？</li>
<li>前端是什么？</li>
</ul>

<hr>

<h3 id="title-2">HTML</h3>

<h4 id="title-3">1. HTML5 ，以及与html的差别</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">语义化标签</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> </span><span class="pun">支持视频和音频</span></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="typ">Doctype</span><span class="pun">类型－简单，它能在每一个浏览器中正常工作即使是名声狼藉的</span><span class="pln">IE6</span><span class="pun">。</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">离线存储</span><span class="pln"> </span><span class="pun">－</span><span class="pln"> localStorage</span><span class="pun">和</span><span class="pln">sessionStorage</span></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">5.</span><span class="pln"> </span><span class="pun">互动效果</span></code></li><li class="L5"><code><span class="pln">        a</span><span class="pun">.</span><span class="pln"> canvas</span></code></li><li class="L6"><code><span class="pln">        b</span><span class="pun">.</span><span class="pln"> </span><span class="pun">更多</span><span class="pln">API</span><span class="pun">支持更好的用户体验－</span><span class="pln"> </span><span class="pun">拖拽、地图、利用</span><span class="typ">Native</span></code></li><li class="L7"><code><span class="pln">    </span><span class="lit">6.</span><span class="pln"> </span><span class="pun">丰富的表单控件</span><span class="pln"> </span><span class="pun">如</span><span class="pln"> calendar</span><span class="pun">、</span><span class="pln">date</span><span class="pun">、</span><span class="pln">time</span><span class="pun">、</span><span class="pln">email</span><span class="pun">、</span><span class="pln">url</span><span class="pun">、</span><span class="pln">search</span></code></li><li class="L8"><code><span class="pln">    </span><span class="lit">7.</span><span class="pln"> </span><span class="pun">移动端－摆脱对平台依赖</span></code></li></ol></pre>

<h4 id="p">2. doctype(文档类型) 的作用是什么</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">现代浏览器包括不同的呈现模式，目的是既支持遵循标准的网页，也支持为老式浏览器而设计的网页。其中，</span><span class="pln"> </span><span class="typ">Standards</span><span class="pln"> </span><span class="pun">（标准）模式（也就是严格呈现模式）用于呈现遵循最新标准的网页，而</span><span class="pln"> </span><span class="typ">Quirks</span><span class="pln"> </span><span class="pun">（包容）模式（也就是松散呈现模式或者兼容模式）用于呈现为传统浏览器而设计的网页。另外，注意</span><span class="typ">Mozilla</span><span class="pun">/</span><span class="typ">Netscape</span><span class="pln"> </span><span class="lit">6</span><span class="pun">新增了一种</span><span class="pln"> </span><span class="typ">Almost</span><span class="pln"> </span><span class="typ">Standards</span><span class="pln"> </span><span class="pun">（近似标准）模式，用于支持为标准的某个老版本而设计的网页。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    doctype</span><span class="pun">声明指出阅读程序应该用什么规则集来解释文档中的标记。在</span><span class="typ">Web</span><span class="pun">文档的情况下，“阅读程序”通常是浏览器或者校验器这样的一个程序，“规则”则是</span><span class="pln">W3C</span><span class="pun">所发布的一个文档类型定义（</span><span class="pln">DTD</span><span class="pun">）中包含的规则。</span></code></li></ol></pre>

<h4 id="title-4">3. localStorage和sessionStorage</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    localStorage</span><span class="pun">有效期为永久，</span><span class="pln">sessionStorage</span><span class="pun">有效期为顶层窗口关闭前同源文档可以读取并修改</span><span class="pln">localStorage</span><span class="pun">数据，</span><span class="pln">sessionStorage</span><span class="pun">只允许同一个窗口下的文档访问，如通过</span><span class="pln">iframe</span><span class="pun">引入的同源文档。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="typ">Storage</span><span class="pun">对象通常被当做普通</span><span class="pln">javascript</span><span class="pun">对象使用：通过设置属性来存取字符串值，也可以通过</span><span class="pln">setItem</span><span class="pun">(</span><span class="pln">key</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">)设置，</span><span class="pln">getItem</span><span class="pun">(</span><span class="pln">key</span><span class="pun">)读取，</span><span class="pln">removeItem</span><span class="pun">(</span><span class="pln">key</span><span class="pun">)删除，</span><span class="pln">clear</span><span class="pun">()删除所有数据，</span><span class="pln">length</span><span class="pun">表示已存储的数据项数目，</span><span class="pln">key</span><span class="pun">(</span><span class="pln">index</span><span class="pun">)返回对应索引的</span><span class="pln">key</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pun">代码如下：</span></code></li><li class="L5"><code><span class="pln">    localStorage</span><span class="pun">.</span><span class="pln">setItem</span><span class="pun">(</span><span class="str">'x'</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln"> </span><span class="com">// storge x-&gt;1</span></code></li><li class="L6"><code><span class="pln">    localStorage</span><span class="pun">.</span><span class="pln">getItem</span><span class="pun">(</span><span class="str">'x); // return value of x</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="str">    // 枚举所有存储的键值对</span></code></li><li class="L9"><code><span class="str">    for (var i = 0, len = localStorage.length; i &lt; len; ++i ) {</span></code></li><li class="L0"><code><span class="str">        var name = localStorage.key(i);</span></code></li><li class="L1"><code><span class="str">        var value = localStorage.getItem(name);</span></code></li><li class="L2"><code><span class="str">    }</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="str">    localStorage.removeItem('</span><span class="pln">x</span><span class="str">'); // remove x</span></code></li><li class="L5"><code><span class="str">    localStorage.clear();  // remove all data</span></code></li></ol></pre>

<h4 id="title-5">4. 应用程序存储和离线web应用</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">HTML5</span><span class="pun">新增应用程序缓存，允许</span><span class="pln">web</span><span class="pun">应用将应用程序自身保存到用户浏览器中，用户离线状态也能访问。</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">为</span><span class="pln">html</span><span class="pun">元素设置</span><span class="pln">manifest</span><span class="pun">属性:&lt;</span><span class="pln">html manifest</span><span class="pun">=</span><span class="str">"myapp.appcache"</span><span class="pun">&gt;，其中后缀名只是一个约定，真正识别方式是通过</span><span class="pln">text</span><span class="pun">/</span><span class="pln">cache</span><span class="pun">-</span><span class="pln">manifest</span><span class="pun">作为</span><span class="pln">MIME</span><span class="pun">类型。所以需要配置服务器保证设置正确</span><span class="pln"> </span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> manifest</span><span class="pun">文件首行为</span><span class="pln">CACHEMANIFEST</span><span class="pun">，其余就是要缓存的</span><span class="pln">URL</span><span class="pun">列表，每个一行，相对路径都相对于</span><span class="pln">manifest</span><span class="pun">文件的</span><span class="pln">url</span><span class="pun">。注释以#开头</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> url</span><span class="pun">分为三种类型：</span><span class="pln">CACHE</span><span class="pun">:为默认类型。</span><span class="pln">NETWORK</span><span class="pun">：表示资源从不缓存。</span><span class="pln"> FALLBACK</span><span class="pun">:每行包含两个</span><span class="pln">url</span><span class="pun">，第二个</span><span class="pln">URL</span><span class="pun">是指需要加载和存储在缓存中的资源，</span><span class="pln"> </span><span class="pun">第一个</span><span class="pln">URL</span><span class="pun">是一个前缀。任何匹配该前缀的</span><span class="pln">URL</span><span class="pun">都不会缓存，如果从网络中载入这样的</span><span class="pln">URL</span><span class="pun">失败的话，就会用第二个</span><span class="pln">URL</span><span class="pun">指定的缓存资源来替代。以下是一个文件例子：</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    CACHE MANIFEST</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    CACHE</span><span class="pun">:</span></code></li><li class="L0"><code><span class="pln">    myapp</span><span class="pun">.</span><span class="pln">html</span></code></li><li class="L1"><code><span class="pln">    myapp</span><span class="pun">.</span><span class="pln">css</span></code></li><li class="L2"><code><span class="pln">    myapp</span><span class="pun">.</span><span class="pln">js</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    FALLBACK</span><span class="pun">:</span></code></li><li class="L5"><code><span class="pln">    videos</span><span class="pun">/</span><span class="pln"> offline_help</span><span class="pun">.</span><span class="pln">html</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    NETWORK</span><span class="pun">:</span></code></li><li class="L8"><code><span class="pln">    cgi</span><span class="pun">/</span></code></li></ol></pre>

<h4 id="title-6">5. 简述一下你对HTML语义化的理解</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">用正确的标签做正确的事情。</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> html</span><span class="pun">语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;</span></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="pun">及时在没有样式</span><span class="pln">CCS</span><span class="pun">情况下也以一种文档格式显示，并且是容易阅读的;</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">搜索引擎的爬虫也依赖于</span><span class="pln">HTML</span><span class="pun">标记来确定上下文和各个关键字的权重，利于</span><span class="pln">SEO</span><span class="pun">;</span></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">5.</span><span class="pln"> </span><span class="pun">使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</span></code></li></ol></pre>

<hr>

<h3 id="title-7">CSS</h3>

<h4 id="title-8">1. 盒子模型</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">标准盒子模型：盒子模型范围包括了</span><span class="pln">margin\border\padding\content</span><span class="pun">.但</span><span class="pln">content</span><span class="pun">(</span><span class="pln">width</span><span class="pun">)不包括其他部分。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    IE</span><span class="pun">的盒子模型的</span><span class="pln">content</span><span class="pun">(</span><span class="pln">width</span><span class="pun">)包括了</span><span class="pln">border</span><span class="pun">和</span><span class="pln">padding</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">目前</span><span class="pln">css3</span><span class="pun">中属性</span><span class="pln">box</span><span class="pun">-</span><span class="pln">sizing</span><span class="pun">可以解决</span><span class="pln">IE7</span><span class="pun">以上的问题。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">重新定义盒子大小，解决盒模型在不同的浏览器中表现不一致的问题。</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    box</span><span class="pun">-</span><span class="pln">sizing</span><span class="pun">:</span><span class="pln"> content</span><span class="pun">-</span><span class="pln">box </span><span class="pun">|</span><span class="pln"> border</span><span class="pun">-</span><span class="pln">box</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">    content</span><span class="pun">-</span><span class="pln">box </span><span class="pun">:</span><span class="pln">  </span><span class="pun">定义的</span><span class="pln">width</span><span class="pun">和</span><span class="pln">height</span><span class="pun">就直接是内容的宽度</span></code></li><li class="L0"><code><span class="pln">    border</span><span class="pun">-</span><span class="pln">box</span><span class="pun">:</span><span class="pln"> </span><span class="pun">内容的宽度是</span><span class="pln"> width </span><span class="pun">-边框的宽度－</span><span class="pln">padding</span></code></li></ol></pre>

<h4 id="title-9">2. CSS定位</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pun">*</span><span class="pln"> </span><span class="pun">定位机制</span></code></li><li class="L1"><code><span class="pln">    CSS </span><span class="pun">有三种基本的定位机制：普通流、浮动和绝对定位。</span></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">普通流：元素的位置由它在</span><span class="pln">HTML</span><span class="pun">中的位置决定的。</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">块级框：从上到下，一个接一个，垂直距离由框的垂直空白边决定的</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">行内框：水平布置。可使用水平填充，边框可调节水平间距。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pun">*</span><span class="pln"> position</span><span class="pun">属性</span></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">相对定位的盒子仍在标准流中，相对于它原本的位置，通过偏移（</span><span class="pln">left</span><span class="pun">、</span><span class="pln">right</span><span class="pun">）指定的距离，到达新的位置。它对父块没有任何影响。</span><span class="pln"> </span></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">使用绝对定位的盒子以它的“最近”的一个“已经定位”的“祖先元素”为基准进行偏移。如果没有已经定位的祖先元素，那么会以浏览器窗口为基准进行定位。</span></code></li></ol></pre>

<h4 id="title-10">3. 元素选择器，优先级及匹配原理</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    CSS</span><span class="pun">匹配原理</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">从最右边的选择符开始向左进行匹配规则。只要当前选择符的左边还有其他选择符，样式系统就会继续向左移动，直到找到和规则匹配的元素，或者因为不匹配而退出。所以在使用</span><span class="pln">less</span><span class="pun">的时候要防止层叠过多。</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    CSS</span><span class="pun">权重</span></code></li><li class="L4"><code><span class="pln">        </span><span class="pun">通配选择符的权值</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">标签的权值为</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">1</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">类的权值为</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">1</span><span class="pun">,</span><span class="lit">0</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">属性选择的权值为</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">1</span><span class="pun">,</span><span class="lit">1</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">1</span><span class="pun">,</span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">伪类选择的权值为</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">1</span><span class="pun">,</span><span class="lit">0</span></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">伪对象选择的权值为</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">1</span></code></li><li class="L0"><code><span class="pln">        ID</span><span class="pun">的权值为</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="lit">1</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span></code></li><li class="L1"><code><span class="pln">        important</span><span class="pun">的权值为最高</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">使用的规则也很简单，就是</span><span class="pln"> </span><span class="pun">选择器的权值加到一起，大的优先；如果权值相同，后定义的优先</span><span class="pln"> </span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">从上面我们可以得出两个关键的因素：</span></code></li><li class="L6"><code><span class="pln">        </span><span class="lit">1.</span><span class="pun">权值的大小跟选择器的类型和数量有关</span></code></li><li class="L7"><code><span class="pln">        </span><span class="lit">2.</span><span class="pun">样式的优先级跟样式的定义顺序有关</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">总结：比较同一级别的个数，数量多的优先级高，如果相同即比较下一级别的个数</span><span class="pln"> </span><span class="pun">，至于各级别的优先级，大家应该已经很清楚了，就是：</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">!</span><span class="pln">important </span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">内联</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> ID </span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">类</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">标签</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="pun">伪类</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="pun">属性选择</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">伪对象</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">继承</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">通配符</span><span class="pln"> </span><span class="pun">通配符</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">继承</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    ID</span><span class="pun">选择器的效率是最高，而伪类选择器的效率则是最低</span></code></li></ol></pre>

<h4 id="title-11">4. CSS水平居中</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">基础布局对以后的开发很有作用。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">自动空白边居中</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">缺点：</span><span class="pln">IE5</span><span class="pun">/</span><span class="lit">6</span><span class="pun">不支持，需要</span><span class="pln">hack</span><span class="pun">，并需要对两个元素添加样式</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">        </span><span class="str">&lt;body&gt;</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">div id</span><span class="pun">=</span><span class="str">"wrapper"</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">&lt;</span><span class="str">/div&gt;&lt;/</span><span class="pln">body</span><span class="pun">&gt;</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">        body</span><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">            text</span><span class="pun">-</span><span class="pln">align</span><span class="pun">:</span><span class="pln"> center</span><span class="pun">;</span><span class="pln"> </span><span class="com">/*text-align:center让IE中的元素居中*/</span></code></li><li class="L9"><code><span class="pln">            min</span><span class="pun">-</span><span class="pln">width</span><span class="pun">:</span><span class="pln"> </span><span class="lit">760px</span><span class="pun">;</span><span class="pln"> </span></code></li><li class="L0"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">.</span><span class="pln">wrapper</span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">            margin</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="kwd">auto</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">            width</span><span class="pun">:</span><span class="pln"> </span><span class="lit">720px</span><span class="pun">;</span></code></li><li class="L4"><code><span class="pln">            text</span><span class="pun">-</span><span class="pln">align</span><span class="pun">:</span><span class="pln"> left</span><span class="pun">;</span><span class="pln">       </span><span class="com">/* 防止继承父类 */</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> </span><span class="pun">使用定位和负值空白边</span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">.</span><span class="pln">wrapper</span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">            position</span><span class="pun">:</span><span class="pln"> relative</span><span class="pun">;</span></code></li><li class="L0"><code><span class="pln">            width</span><span class="pun">:</span><span class="pln"> </span><span class="lit">720px</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">            left</span><span class="pun">:</span><span class="pln"> </span><span class="lit">50</span><span class="pun">%;</span></code></li><li class="L2"><code><span class="pln">            margin</span><span class="pun">-</span><span class="pln">left</span><span class="pun">:</span><span class="pln"> </span><span class="pun">-</span><span class="lit">360px</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">            </span><span class="com">//对应的垂直居中也好处理了</span></code></li><li class="L4"><code><span class="pln">            top</span><span class="pun">:</span><span class="pln"> </span><span class="lit">50</span><span class="pun">%;</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="pun">神奇的弹性盒子</span><span class="pln"> flex</span></code></li><li class="L8"><code><span class="pln">        IE10</span><span class="pun">+，</span><span class="typ">Android2</span><span class="lit">.1+</span><span class="pln"> </span><span class="pun">,</span><span class="pln">IOS safire3</span><span class="pun">.</span><span class="lit">2</span><span class="pun">(添加-</span><span class="pln">webkit</span><span class="pun">-)兼容，所以目前移动端可以大量使用。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">        body</span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">            display</span><span class="pun">:</span><span class="pln"> flex</span><span class="pun">;</span></code></li><li class="L2"><code><span class="pln">            justify</span><span class="pun">-</span><span class="pln">content</span><span class="pun">:</span><span class="pln"> center</span><span class="pun">;</span><span class="pln">  </span><span class="com">//水平居中</span></code></li><li class="L3"><code><span class="pln">            </span><span class="com">//垂直居中</span></code></li><li class="L4"><code><span class="pln">            align</span><span class="pun">-</span><span class="pln">items</span><span class="pun">:</span><span class="pln"> center</span><span class="pun">;</span><span class="pln">   </span><span class="com">//当然需要设置容器的高度值</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">}</span></code></li></ol></pre>

<h4 id="title-12">5. BFC</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    BFC</span><span class="pun">(</span><span class="pln">box </span><span class="pun">,</span><span class="pln"> formatting context</span><span class="pun">)，块级格式化上下文，一个创建了新的</span><span class="pln">BFC</span><span class="pun">的盒子是独立布局的，盒子里面的子元素的样式不会影响到外面的元素。在同一个</span><span class="pln"> BFC </span><span class="pun">中的两个毗邻的块级盒在垂直方向（和布局方向有关系）的</span><span class="pln"> margin </span><span class="pun">会发生折叠。它决定了元素如何对其内容进行布局，以及与其他元素的关系和相互作用。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    BFC</span><span class="pun">布局规则</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">内部的</span><span class="typ">Box</span><span class="pun">会在垂直方向，一个接一个地放置。</span></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> </span><span class="typ">Box</span><span class="pun">垂直方向的距离由</span><span class="pln">margin</span><span class="pun">决定。属于同一个</span><span class="pln">BFC</span><span class="pun">的两个相邻</span><span class="typ">Box</span><span class="pun">的</span><span class="pln">margin</span><span class="pun">会发生重叠</span></code></li><li class="L5"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="pun">每个元素的</span><span class="pln">margin box</span><span class="pun">的左边，</span><span class="pln"> </span><span class="pun">与包含块</span><span class="pln">border box</span><span class="pun">的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</span></code></li><li class="L6"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> BFC</span><span class="pun">的区域不会与</span><span class="kwd">float</span><span class="pln"> box</span><span class="pun">重叠。(所以有左边宽度自适应)</span></code></li><li class="L7"><code><span class="pln">    </span><span class="lit">5.</span><span class="pln"> BFC</span><span class="pun">就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</span></code></li><li class="L8"><code><span class="pln">    </span><span class="lit">6.</span><span class="pln"> </span><span class="pun">计算</span><span class="pln">BFC</span><span class="pun">的高度时，浮动元素也参与计算</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">哪些元素会触发</span><span class="pln">BFC</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">根元素</span></code></li><li class="L2"><code><span class="pln">        </span><span class="kwd">float</span><span class="pun">属性不为</span><span class="pln">none</span></code></li><li class="L3"><code><span class="pln">        position</span><span class="pun">为</span><span class="pln">absolute</span><span class="pun">或</span><span class="kwd">fixed</span></code></li><li class="L4"><code><span class="pln">         display</span><span class="pun">为</span><span class="pln">    </span><span class="kwd">inline</span><span class="pun">-</span><span class="pln">block</span><span class="pun">,</span><span class="pln"> table</span><span class="pun">-</span><span class="pln">cell</span><span class="pun">,</span><span class="pln"> table</span><span class="pun">-</span><span class="pln">caption</span><span class="pun">,</span><span class="pln"> flex</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">inline</span><span class="pun">-</span><span class="pln">flex</span></code></li><li class="L5"><code><span class="pln">        overflow</span><span class="pun">不为</span><span class="pln">visible</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    IE</span><span class="pun">如何解决？</span><span class="typ">Layout</span></code></li><li class="L8"><code><span class="pln">        position</span><span class="pun">:</span><span class="pln">absolute</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">        </span><span class="kwd">float</span><span class="pun">:</span><span class="pln"> left</span><span class="pun">|</span><span class="pln">right</span><span class="pun">;</span></code></li><li class="L0"><code><span class="pln">        display</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">inline</span><span class="pun">-</span><span class="pln">block</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">        width</span><span class="pun">:</span><span class="pln"> value</span><span class="pun">;</span></code></li><li class="L2"><code><span class="pln">        height</span><span class="pun">:</span><span class="pln"> value</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">        zoom</span><span class="pun">:</span><span class="pln">value</span><span class="pun">(非</span><span class="pln">normal</span><span class="pun">);</span><span class="pln">  </span><span class="com">//通常zoom:1;</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">具有以上优点，</span><span class="pln">BFC</span><span class="pun">实际中的作用</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">自适应布局、清除浮动、防止</span><span class="pln">margin</span><span class="pun">重叠。</span></code></li></ol></pre>

<h4 id="title-13">6. 布局问题</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">响应式布局原理</span></code></li><li class="L1"><code><span class="pln">       </span><span class="pun">检测设备，根据不同的设备采用不同的</span><span class="pln">css</span><span class="pun">，而且</span><span class="pln">css</span><span class="pun">都是采用的百分比的，而不是固定的宽度。</span></code></li><li class="L2"><code><span class="pln">       </span><span class="pun">因为大屏幕的移动设备越来越普及。而自适应布局已经无法胜任各种浏览需求。响应式设计的目的是尽可能以最好的布局显示您的数据，以实现用户友好的</span><span class="pln"> </span><span class="typ">Web</span><span class="pln"> </span><span class="pun">页面。</span></code></li><li class="L3"><code><span class="pln">       </span><span class="pun">现在</span><span class="pln">CSS3</span><span class="pun">有了个更为实用的</span><span class="pln"> media query</span><span class="pun">。而移动终端的浏览器（都是基于</span><span class="pln">webkit</span><span class="pun">内核的浏览器）基本已经完全支持了</span><span class="pln">css3</span><span class="pun">.他可以为你获取各种终端的数据。</span></code></li><li class="L4"><code><span class="pln">       </span><span class="pun">栅栏系统（响应式）</span></code></li><li class="L5"><code><span class="pln">       </span><span class="pun">响应式图片</span></code></li><li class="L6"><code><span class="pln">       </span><span class="pun">浏览器获取用户终端的屏幕尺寸、分辨率逻辑处理后输出适应的图片，如屏幕分辨率</span><span class="lit">320</span><span class="pun">*</span><span class="lit">480</span><span class="pun">，那么我们匹配给它的是宽度应小于</span><span class="lit">320px</span><span class="pun">的图片。如果终端屏幕的</span><span class="pln">DPI</span><span class="pun">(</span><span class="pln">device pixels</span><span class="pun">)</span><span class="pln">DPI</span><span class="pun">详解值很高，也就是高清屏，那么我们就得输出</span><span class="lit">2</span><span class="pun">倍分辨率的图形(宽:</span><span class="lit">640px</span><span class="pun">)；以保证在高清屏下图形的清晰度。各种移动终端的屏幕参数可通过</span><span class="pln"> http</span><span class="pun">:</span><span class="com">//screensiz.es/phone查询。</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">解决方案：响应式图形的草案：新定义标签&lt;</span><span class="pln">picture</span><span class="pun">&gt;。</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">高清：通常指的是分辨率高，如</span><span class="pln">iphone6</span><span class="pun">的</span><span class="pln">dpr</span><span class="pun">=</span><span class="lit">2</span><span class="pun">,</span><span class="lit">6plus</span><span class="pun">的</span><span class="pln">dpr</span><span class="pun">=</span><span class="lit">3</span><span class="pun">。</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> </span><span class="pun">静态、自适应、流式、响应式四种网页布局有什么区别</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">自适应布局（</span><span class="typ">Adaptive</span><span class="pln"> </span><span class="typ">Layout</span><span class="pun">）</span></code></li><li class="L3"><code><span class="pln">          </span><span class="pun">自适应布局（</span><span class="typ">Adaptive</span><span class="pun">）的特点是分别为不同的屏幕分辨率定义布局。布局切换时页面元素发生改变，但在每个布局中，页面元素不随窗口大小的调整发生变化。</span></code></li><li class="L4"><code><span class="pln">          </span><span class="pun">你可以把自适应布局看作是静态布局的一个系列。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">       </span><span class="pun">流式布局（</span><span class="typ">Liquid</span><span class="pln"> </span><span class="typ">Layout</span><span class="pun">）</span></code></li><li class="L7"><code><span class="pln">          </span><span class="pun">流式布局（</span><span class="typ">Liquid</span><span class="pun">）的特点（也叫</span><span class="str">"Fluid"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">是页面元素的宽度按照屏幕进行适配调整，主要的问题是如果屏幕尺度跨度太大，那么在相对其原始设计而言过小或过大的屏幕上不能正常显示。</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">       </span><span class="pun">响应式布局（</span><span class="typ">Responsive</span><span class="pln"> </span><span class="typ">Layout</span><span class="pun">）</span></code></li><li class="L0"><code><span class="pln">          </span><span class="pun">分别为不同的屏幕分辨率定义布局，同时，在每个布局中，应用流式布局的理念，即页面元素宽度随着窗口调整而自动适配。</span></code></li><li class="L1"><code><span class="pln">          </span><span class="pun">把响应式布局看作是流式布局和自适应布局设计理念的融合</span></code></li></ol></pre>

<h4 id="title-14">7. CSS3新特性</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">选择器，文本、多列布局、渐变效果、</span><span class="pln">css</span><span class="pun">盒子、边框、背景、动画、转换</span></code></li></ol></pre>

<h4 id="title-15">8. CSSHack</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="lit">1.</span><span class="pun">什么是</span><span class="pln">CSS hack</span></code></li><li class="L1"><code><span class="pln">      </span><span class="pun">由于不同厂商的流览器或某浏览器的不同版本（如</span><span class="pln">IE6</span><span class="pun">-</span><span class="pln">IE11</span><span class="pun">,</span><span class="typ">Firefox</span><span class="pun">/</span><span class="typ">Safari</span><span class="pun">/</span><span class="typ">Opera</span><span class="pun">/</span><span class="typ">Chrome</span><span class="pun">等），对</span><span class="pln">CSS</span><span class="pun">的支持、解析不一样，导致在不同浏览器的环境中呈现出不一致的页面展现效果。这时，我们为了获得统一的页面效果，就需要针对不同的浏览器或不同版本写特定的</span><span class="pln">CSS</span><span class="pun">样式，我们把这个针对不同的浏览器/不同版本写相应的</span><span class="pln">CSS code</span><span class="pun">的过程，叫做</span><span class="pln">CSS hack</span><span class="pun">!</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">2.</span><span class="pun">方式</span></code></li><li class="L4"><code><span class="pln">        </span><span class="lit">1</span><span class="pun">).一般是针对</span><span class="pln">IE</span><span class="pun">浏览器处理</span></code></li><li class="L5"><code><span class="pln">                </span><span class="pun">只在</span><span class="pln">IE</span><span class="pun">下生效</span></code></li><li class="L6"><code><span class="pln">                </span><span class="pun">&lt;!--[</span><span class="kwd">if</span><span class="pln"> IE</span><span class="pun">]&gt;</span></code></li><li class="L7"><code><span class="pln">                </span><span class="pun">这段文字只在</span><span class="pln">IE</span><span class="pun">浏览器显示</span></code></li><li class="L8"><code><span class="pln">                </span><span class="pun">&lt;![</span><span class="pln">endif</span><span class="pun">]--&gt;</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">                </span><span class="pun">只在</span><span class="pln">IE6</span><span class="pun">下生效</span></code></li><li class="L1"><code><span class="pln">                </span><span class="pun">&lt;!--[</span><span class="kwd">if</span><span class="pln"> IE </span><span class="lit">6</span><span class="pun">]&gt;</span></code></li><li class="L2"><code><span class="pln">                </span><span class="pun">这段文字只在</span><span class="pln">IE6</span><span class="pun">浏览器显示</span></code></li><li class="L3"><code><span class="pln">                </span><span class="pun">&lt;![</span><span class="pln">endif</span><span class="pun">]--&gt;</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">                </span><span class="pun">只在</span><span class="pln">IE6</span><span class="pun">以上版本生效</span></code></li><li class="L6"><code><span class="pln">                </span><span class="pun">&lt;!--[</span><span class="kwd">if</span><span class="pln"> gte IE </span><span class="lit">6</span><span class="pun">]&gt;</span></code></li><li class="L7"><code><span class="pln">                </span><span class="pun">这段文字只在</span><span class="pln">IE6</span><span class="pun">以上(包括)版本</span><span class="pln">IE</span><span class="pun">浏览器显示</span></code></li><li class="L8"><code><span class="pln">                </span><span class="pun">&lt;![</span><span class="pln">endif</span><span class="pun">]--&gt;</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">                </span><span class="pun">只在</span><span class="pln">IE8</span><span class="pun">上不生效</span></code></li><li class="L1"><code><span class="pln">                </span><span class="pun">&lt;!--[</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">!</span><span class="pln"> IE </span><span class="lit">8</span><span class="pun">]&gt;</span></code></li><li class="L2"><code><span class="pln">                </span><span class="pun">这段文字在非</span><span class="pln">IE8</span><span class="pun">浏览器显示</span></code></li><li class="L3"><code><span class="pln">                </span><span class="pun">&lt;![</span><span class="pln">endif</span><span class="pun">]--&gt;</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">                </span><span class="pun">非</span><span class="pln">IE</span><span class="pun">浏览器生效</span></code></li><li class="L6"><code><span class="pln">                </span><span class="pun">&lt;!--[</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">!</span><span class="pln">IE</span><span class="pun">]&gt;</span></code></li><li class="L7"><code><span class="pln">                </span><span class="pun">这段文字只在非</span><span class="pln">IE</span><span class="pun">浏览器显示</span></code></li><li class="L8"><code><span class="pln">                </span><span class="pun">&lt;![</span><span class="pln">endif</span><span class="pun">]--&gt;</span></code></li></ol></pre>

<p>2).类内属性前缀法</p>

<table>
<thead>
<tr>
  <th>hack</th>
  <th>写法</th>
</tr>
</thead>
<tbody><tr>
  <td>*</td>
  <td>*color</td>
</tr>
<tr>
  <td>+</td>
  <td>+color</td>
</tr>
<tr>
  <td>-</td>
  <td>-color</td>
</tr>
<tr>
  <td>_</td>
  <td>_color</td>
</tr>
<tr>
  <td>#</td>
  <td>color</td>
</tr>
<tr>
  <td>\0</td>
  <td>color:red\0</td>
</tr>
<tr>
  <td>\9\0</td>
  <td>color:red\9\0</td>
</tr>
<tr>
  <td>!important</td>
  <td>color:blue !important;color:green;</td>
</tr>
</tbody></table>


<h4 id="p-1">9. link与@import的区别</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> link</span><span class="pun">是</span><span class="pln">HTML</span><span class="pun">方式，</span><span class="pln"> </span><span class="lit">@import</span><span class="pun">是</span><span class="pln">CSS</span><span class="pun">方式</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> link</span><span class="pun">最大限度支持并行下载，</span><span class="lit">@import</span><span class="pun">过多嵌套导致串行下载，出现</span><span class="pln">FOUC</span></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> link</span><span class="pun">可以通过</span><span class="pln">rel</span><span class="pun">=</span><span class="str">"alternate stylesheet"</span><span class="pun">指定候选样式</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">浏览器对</span><span class="pln">link</span><span class="pun">支持早于</span><span class="lit">@import</span><span class="pun">，可以使用</span><span class="lit">@import</span><span class="pun">对老浏览器隐藏样式</span></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">5.</span><span class="pln"> </span><span class="lit">@import</span><span class="pun">必须在样式规则之前，可以在</span><span class="pln">css</span><span class="pun">文件中引用其他文件</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">总体来说：</span><span class="pln">link</span><span class="pun">优于</span><span class="lit">@import</span></code></li></ol></pre>

<h4 id="p-2">10. display 属性</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pun">主要把以下值区别开:</span></code></li><li class="L1"><code><span class="pln">    display</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">inline</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> block </span><span class="pun">|</span><span class="pln"> </span><span class="kwd">inline</span><span class="pun">-</span><span class="pln">block </span><span class="pun">|</span><span class="pln"> inherit </span><span class="pun">;</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="kwd">inline</span></code></li><li class="L4"><code><span class="pln">        a</span><span class="pun">)</span><span class="pln"> </span><span class="pun">元素显示方式：</span><span class="str">"文本方式"</span><span class="pun">，</span><span class="lit">1</span><span class="pun">个挨着</span><span class="lit">1</span><span class="pun">个，不独自占有</span><span class="lit">1</span><span class="pun">行；高，行高及顶和底边距不可改变；宽度就是它的文字或图片的宽度，不可改变。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">        b</span><span class="pun">)</span><span class="pln"> </span><span class="pun">内嵌的元素也必须是内联元素：如&lt;</span><span class="pln">a</span><span class="pun">&gt;&lt;</span><span class="str">/a&gt;,不能在里面嵌入&lt;div&gt;&lt;/</span><span class="pln">div</span><span class="pun">&gt;等块级元素</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">        c</span><span class="pun">)</span><span class="pln"> </span><span class="pun">常用的标签有：&lt;</span><span class="pln">a</span><span class="pun">&gt;、&lt;</span><span class="pln">input</span><span class="pun">&gt;、&lt;</span><span class="pln">label</span><span class="pun">&gt;、&lt;</span><span class="pln">img</span><span class="pun">&gt;</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> block</span></code></li><li class="L1"><code><span class="pln">        a</span><span class="pun">)</span><span class="pln"> </span><span class="pun">元素显示方式：每个元素独自占有</span><span class="lit">1</span><span class="pun">行，相当于前后都带有换行符；</span></code></li><li class="L2"><code><span class="pln">        b</span><span class="pun">)</span><span class="pln"> </span><span class="pun">内嵌的元素可以是内联或块级元素；</span></code></li><li class="L3"><code><span class="pln">        c</span><span class="pun">)</span><span class="pln"> </span><span class="pun">常用的元素有：&lt;</span><span class="pln">h1</span><span class="pun">&gt;~&lt;</span><span class="pln">h6</span><span class="pun">&gt;、&lt;</span><span class="pln">div</span><span class="pun">&gt;、&lt;</span><span class="pln">hr</span><span class="pun">&gt;等等；</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="kwd">inline</span><span class="pun">-</span><span class="pln">block</span><span class="pun">(</span><span class="pln">IE8</span><span class="pun">+)</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">对象呈递为内联对象，但是对象的内容作为块对象呈递。旁边的内联对象会被呈递在同一行内，允许空格</span></code></li></ol></pre>

<h4 id="p-3">11. display: none;与visibility: hidden;的区别</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">共性：</span><span class="pln"> </span><span class="pun">都能隐藏元素</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">特性：</span></code></li><li class="L2"><code><span class="pln">        </span><span class="lit">1.</span><span class="pln"> display</span><span class="pun">:</span><span class="pln">none</span><span class="pun">;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；</span><span class="pln">visibility</span><span class="pun">:</span><span class="pln"> hidden</span><span class="pun">;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见</span></code></li><li class="L3"><code><span class="pln">        </span><span class="lit">2.</span><span class="pln"> display</span><span class="pun">:</span><span class="pln"> none</span><span class="pun">;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；</span><span class="pln">visibility</span><span class="pun">:</span><span class="pln"> hidden</span><span class="pun">;是继承属性，子孙节点消失由于继承了</span><span class="pln">hidden</span><span class="pun">，通过设置</span><span class="pln">visibility</span><span class="pun">:</span><span class="pln"> visible</span><span class="pun">;可以让子孙节点显式</span></code></li><li class="L4"><code><span class="pln">        </span><span class="lit">3.</span><span class="pln"> </span><span class="pun">修改常规流中元素的</span><span class="pln">display</span><span class="pun">通常会造成文档重排。修改</span><span class="pln">visibility</span><span class="pun">属性只会造成本元素的重绘。</span></code></li><li class="L5"><code><span class="pln">        </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">读屏器不会读取</span><span class="pln">display</span><span class="pun">:</span><span class="pln"> none</span><span class="pun">;元素内容；会读取</span><span class="pln">visibility</span><span class="pun">:</span><span class="pln"> hidden</span><span class="pun">;元素内容</span></code></li></ol></pre>

<h4 id="title-16">12. CSS reset</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">浏览器样式重置。</span><span class="pln">HTML</span><span class="pun">标签在浏览器中都有默认的样式，例如</span><span class="pln">p</span><span class="pun">标签有上下边距，</span><span class="pln">strong</span><span class="pun">标签有字体加粗样式等。不同浏览器的默认样式之间存在差别，例如</span><span class="pln">ul</span><span class="pun">默认带有缩进样式，在</span><span class="pln">IE</span><span class="pun">下，它的缩进是由</span><span class="pln">margin</span><span class="pun">实现的，而在</span><span class="typ">Firefox</span><span class="pun">下却是由</span><span class="pln">padding</span><span class="pun">实现的。开发时浏览器的默认样式可能会给我们带来多浏览器兼容性问题，影响开发效率。现在很流行的解决方法是一开始就将浏览器的默认样式全部覆盖掉，这就是</span><span class="pln">CSS reset</span><span class="pun">。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    YUI</span><span class="pun">为我们提供了一个很好的</span><span class="pln">CSS reset</span><span class="pun">，可以直接下载使用，这段代码很成熟，推荐大家使用。</span><span class="pln">YUI</span><span class="pun">的</span><span class="pln">CSS reset</span><span class="pun">主要做了下面几点：</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">•</span><span class="pln"> </span><span class="pun">白色背景，黑色字体</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">•</span><span class="pln"> margin</span><span class="pun">和</span><span class="pln">padding</span><span class="pun">设为</span><span class="lit">0</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">•</span><span class="pln"> </span><span class="pun">去掉</span><span class="pln">table</span><span class="pun">的边框</span></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">•</span><span class="pln"> </span><span class="pun">去掉列表样式（</span><span class="pln">ol</span><span class="pun">，</span><span class="pln">ul</span><span class="pun">，</span><span class="pln">dl</span><span class="pun">）</span></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">•</span><span class="pln"> </span><span class="pun">所有文字字号设为</span><span class="lit">100</span><span class="pun">%</span></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">•</span><span class="pln"> font</span><span class="pun">-</span><span class="pln">style</span><span class="pun">和</span><span class="pln">font</span><span class="pun">-</span><span class="pln">weight</span><span class="pun">设为</span><span class="pln">normal</span></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">•</span><span class="pln"> </span><span class="pun">更好（但不完全）的表格字体继承</span></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">•</span><span class="pln"> </span><span class="pun">减小</span><span class="pln">sup</span><span class="pun">和</span><span class="kwd">sub</span><span class="pun">对</span><span class="pln">line</span><span class="pun">-</span><span class="pln">height</span><span class="pun">的影响</span></code></li></ol></pre>

<h4 id="title-17">13. 瀑布流</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">实现方式：</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">传统多列浮动</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">*</span><span class="pln">  </span><span class="pun">各列固定宽度，并且左浮动；</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">*</span><span class="pln">  </span><span class="pun">一列中的数据块为一组，列中的每个数据块依次排列即可；</span></code></li><li class="L4"><code><span class="pln">        </span><span class="pun">*</span><span class="pln">  </span><span class="pun">更多数据加载时，需要分别插入到不同的列上；</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">优点:</span></code></li><li class="L6"><code><span class="pln">            </span><span class="pun">布局简单，应该说没啥特别的难点；</span></code></li><li class="L7"><code><span class="pln">            </span><span class="pun">不用明确知道数据块高度，当数据块中有图片时，就不需要指定图片高度。</span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">缺点:</span></code></li><li class="L9"><code><span class="pln">            </span><span class="pun">列数固定，扩展不易，当浏览器窗口大小变化时，只能固定的</span><span class="pln">x</span><span class="pun">列，如果要添加一列，很难调整数据块的排列；</span></code></li><li class="L0"><code><span class="pln">            </span><span class="pun">滚动加载更多数据时，还要指定插入到第几列中，还是不方便。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> CSS3 </span><span class="pun">定义,多列布局</span></code></li><li class="L3"><code><span class="pln">            </span><span class="com">#container {</span></code></li><li class="L4"><code><span class="pln">                    </span><span class="pun">-</span><span class="pln">webkit</span><span class="pun">-</span><span class="pln">column</span><span class="pun">-</span><span class="pln">count</span><span class="pun">:</span><span class="pln"> </span><span class="lit">5</span><span class="pun">；</span></code></li><li class="L5"><code><span class="pln">                    </span><span class="com">/*-webkit-column-gap: 10px；</span></code></li><li class="L6"><code><span class="com">                    -webkit-column-rule: 5px solid #333；</span></code></li><li class="L7"><code><span class="com">                    -webkit-column-width: 210px；*/</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">                    </span><span class="pun">-</span><span class="pln">moz</span><span class="pun">-</span><span class="pln">column</span><span class="pun">-</span><span class="pln">count</span><span class="pun">:</span><span class="pln"> </span><span class="lit">5</span><span class="pun">；</span></code></li><li class="L0"><code><span class="pln">                    </span><span class="com">/*-moz-column-gap: 20px；</span></code></li><li class="L1"><code><span class="com">                    -moz-column-rule: 5px solid #333；</span></code></li><li class="L2"><code><span class="com">                    -moz-column-width: 210px；*/</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">                    column</span><span class="pun">-</span><span class="pln">count</span><span class="pun">:</span><span class="pln"> </span><span class="lit">5</span><span class="pun">；</span></code></li><li class="L5"><code><span class="pln">                    </span><span class="com">/*column-gap: 10px；</span></code></li><li class="L6"><code><span class="com">                    column-rule: 5px solid #333；</span></code></li><li class="L7"><code><span class="com">                    column-width: 210px；*/</span></code></li><li class="L8"><code><span class="pln">            </span><span class="pun">}</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">        column</span><span class="pun">-</span><span class="pln">count </span><span class="pun">为列数；</span><span class="pln"> column</span><span class="pun">-</span><span class="pln">gap </span><span class="pun">为每列间隔距离；</span><span class="pln"> column</span><span class="pun">-</span><span class="pln">rule </span><span class="pun">为间隔边线大小；</span><span class="pln"> column</span><span class="pun">-</span><span class="pln">width </span><span class="pun">为每列宽度；</span><span class="pln"> </span><span class="pun">当只设置</span><span class="pln"> column</span><span class="pun">-</span><span class="pln">width </span><span class="pun">时，浏览器窗口小于一列宽度时，列中内容自动隐藏；</span><span class="pln"> </span><span class="pun">当只设置</span><span class="pln"> column</span><span class="pun">-</span><span class="pln">count </span><span class="pun">时，平均计算每列宽度，列内内容超出则隐藏；</span><span class="pln"> </span><span class="pun">都设了</span><span class="pln"> column</span><span class="pun">-</span><span class="pln">count </span><span class="pun">和</span><span class="pln">column</span><span class="pun">-</span><span class="pln">width</span><span class="pun">，浏览器会根据</span><span class="pln"> count </span><span class="pun">计算宽度和</span><span class="pln"> width </span><span class="pun">比较，取大的那个值作为每列宽度，然后当窗口缩小时，</span><span class="pln">width </span><span class="pun">的值为每列最小宽度。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">优点:</span></code></li><li class="L3"><code><span class="pln">            </span><span class="pun">直接</span><span class="pln"> CSS </span><span class="pun">定义，最方便了；</span></code></li><li class="L4"><code><span class="pln">            </span><span class="pun">扩展方便，直接往容器里添加内容即可。</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">缺点:</span></code></li><li class="L6"><code><span class="pln">            </span><span class="pun">只有高级浏览器中才能使用；</span></code></li><li class="L7"><code><span class="pln">            </span><span class="pun">还有一个缺点，他的数据块排列是从上到下排列到一定高度后，再把剩余元素依次添加到下一列，这个本质上就不一样了；</span></code></li><li class="L8"><code><span class="pln">            </span><span class="pun">鉴于这两个主要缺点，注定了该方法只能局限于高端浏览器，而且，更适合于文字多栏排列。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="pun">绝对定位（最优方案）</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">方便添加数据内容，窗口变化，列数/数据块会自动调整</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">缺点:</span></code></li><li class="L3"><code><span class="pln">            </span><span class="pun">需要实现知道数据块高度，如果其中包含图片，需要知道图片高度；</span></code></li><li class="L4"><code><span class="pln">            JS </span><span class="pun">动态计算数据块位置，当窗口缩放频繁，可能会狂耗性能。</span></code></li></ol></pre>

<h4 id="title-18">14. 什么是FOUC?如何避免</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="typ">Flash</span><span class="pln"> </span><span class="typ">Of</span><span class="pln"> </span><span class="typ">Unstyled</span><span class="pln"> </span><span class="typ">Content</span><span class="pun">：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。同时加载</span><span class="pln">css</span><span class="pun">文件会阻塞文件下载，在</span><span class="pln">FF</span><span class="pun">下，添加&lt;</span><span class="pln">script</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">&lt;/</span><span class="pln">script</span><span class="pun">&gt;(中间有空格)</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">解决方法：把样式表放到文档的</span><span class="pln">head</span></code></li></ol></pre>

<h4 id="title-19">15. 渐进增强和优雅降级</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">渐进增强</span><span class="pln"> </span><span class="pun">：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">优雅降级</span><span class="pln"> </span><span class="pun">：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</span></code></li></ol></pre>

<hr>

<h3 id="p-4">JavaScript</h3>

<h4 id="title-20">1. 数据类型</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">基础数据类型：</span><span class="kwd">null</span><span class="pun">、</span><span class="kwd">undefined</span><span class="pun">、</span><span class="kwd">boolean</span><span class="pun">、</span><span class="kwd">string</span><span class="pun">、</span><span class="pln">number</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">引用数据类型：</span><span class="typ">Object</span><span class="pln"> </span><span class="pun">、</span><span class="typ">Array</span><span class="pln"> </span><span class="pun">、</span><span class="typ">Date</span><span class="pun">、</span><span class="typ">RegExp</span><span class="pln"> </span><span class="pun">、</span><span class="typ">Function</span><span class="pun">、自定义对象</span></code></li></ol></pre>

<h4 id="title-21">2. undefined与null</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="typ">JavaScript</span><span class="pln"> </span><span class="pun">有两个表示‘空’的值，其中比较有用的是</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">的值</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">是一个值为</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">的类型。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">这个语言也定义了一个全局变量，它的值是</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">，这个变量也被称为</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">。</span><span class="pln"> </span><span class="pun">但是这个变量不是一个常量，也不是一个关键字。这意味着它的值可以轻易被覆盖。</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    ES5 </span><span class="pun">提示:</span><span class="pln"> </span><span class="pun">在</span><span class="pln"> </span><span class="typ">ECMAScript</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="pun">的严格模式下，</span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">不再是</span><span class="pln"> </span><span class="pun">可写的了。</span><span class="pln"> </span><span class="pun">但是它的名称仍然可以被隐藏，比如定义一个函数名为</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">下面的情况会返回</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">值：</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">访问未修改的全局变量</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">。</span></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> </span><span class="pun">由于没有定义</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">表达式的函数隐式返回。</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">表达式没有显式的返回任何内容。</span></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">访问不存在的属性。</span></code></li><li class="L5"><code><span class="pln">    </span><span class="lit">5.</span><span class="pln"> </span><span class="pun">函数参数没有被显式的传递值。</span></code></li><li class="L6"><code><span class="pln">    </span><span class="lit">6.</span><span class="pln"> </span><span class="pun">任何被设置为</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">值的变量。</span></code></li><li class="L7"><code><span class="pln">    </span><span class="lit">7.</span><span class="pln"> </span><span class="pun">处理</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">值的改变</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">由于全局变量</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">只是保存了</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">类型实际值的副本，</span><span class="pln"> </span><span class="pun">因此对它赋新值不会改变类型</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">的值。然而，为了方便其它变量和</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">做比较，我们需要事先获取类型</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">的值。</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">为了避免可能对</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">值的改变，一个常用的技巧是使用一个传递到匿名包装器的额外参数。</span><span class="pln"> </span><span class="pun">在调用时，这个参数不会获取任何值。</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">123</span><span class="pun">;</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">something</span><span class="pun">,</span><span class="pln"> foo</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">        </span><span class="com">// 局部作用域里的 undefined 变量重新获得了 `undefined` 值</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">})(</span><span class="str">'Hello World'</span><span class="pun">,</span><span class="pln"> </span><span class="lit">42</span><span class="pun">);</span></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">另外一种达到相同目的方法是在函数内使用变量声明。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">123</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">something</span><span class="pun">,</span><span class="pln"> foo</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">...</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">})(</span><span class="str">'Hello World'</span><span class="pun">,</span><span class="pln"> </span><span class="lit">42</span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">这里唯一的区别是，在压缩后并且函数内没有其它需要使用</span><span class="pln"> </span><span class="kwd">var</span><span class="pln"> </span><span class="pun">声明变量的情况下，这个版本的代码会多出</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="pun">个字节的代码。</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">的用处</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="typ">JavaScript</span><span class="pln"> </span><span class="pun">中的</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">的使用场景类似于其它语言中的</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">，实际上</span><span class="pln"> </span><span class="typ">JavaScript</span><span class="pln"> </span><span class="pun">中的</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">是另外一种数据类型。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">它在</span><span class="pln"> </span><span class="typ">JavaScript</span><span class="pln"> </span><span class="pun">内部有一些使用场景（比如声明原型链的终结</span><span class="pln"> </span><span class="typ">Foo</span><span class="pun">.</span><span class="pln">prototype </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">），但是大多数情况下都可以使用</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">来代替。</span></code></li></ol></pre>

<h4 id="title-22">3. 创建对象-面向对象</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="com">//1.对象字面量</span></code></li><li class="L1"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> newObject1 </span><span class="pun">=</span><span class="pln">  </span><span class="pun">{};</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="com">//原型只能是一个对象或者 null</span></code></li><li class="L4"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> newObject2 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">create</span><span class="pun">(</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">);</span><span class="pln"> </span><span class="com">//null不能少！！！</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="com">//构造器模式</span></code></li><li class="L7"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> newObject3 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">();</span></code></li><li class="L8"><code><span class="pln">    newObject</span><span class="pun">.</span><span class="pln">key </span><span class="pun">=</span><span class="pln"> </span><span class="str">" Hello js "</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">    newObject</span><span class="pun">[</span><span class="pln"> </span><span class="str">"key"</span><span class="pln"> </span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"hello js"</span><span class="pun">;</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="com">//Object.defineProperty与Object.defineProperties</span></code></li><li class="L2"><code><span class="pln">    </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">defineProperty </span><span class="pun">(</span><span class="pln"> obj </span><span class="pun">,</span><span class="pln"> key </span><span class="pun">,</span><span class="pln"> value </span><span class="pun">);</span><span class="pln"> </span><span class="pun">==&gt;</span><span class="pln"> obj</span><span class="pun">[</span><span class="pln">key</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> value</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">    </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">defineProperties</span><span class="pun">(</span><span class="pln"> obj </span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">        </span><span class="str">"key"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">            value </span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">},</span></code></li><li class="L8"><code><span class="pln">        </span><span class="str">"anotherkey"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">            value </span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span></code></li><li class="L0"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">});</span></code></li></ol></pre>

<h4 id="title-23">4. 继承</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="lit">1</span><span class="pun">、原型链继承</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">2</span><span class="pun">、借用构造函数继承</span></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">3</span><span class="pun">、组合继承(原型+借用构造)</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">4</span><span class="pun">、原型式继承</span></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">5</span><span class="pun">、寄生式继承</span></code></li><li class="L5"><code><span class="pln">    </span><span class="lit">6</span><span class="pun">、寄生组合式继承</span></code></li></ol></pre>

<h4 id="title-24">5. 闭包</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">闭包是在某个作用域内定义的函数，它可以访问这个作用域内的所有变量。闭包作用域链通常包括三个部分：</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">*</span><span class="pln"> </span><span class="pun">函数本身作用域。</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">*</span><span class="pln"> </span><span class="pun">闭包定义时的作用域。</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">*</span><span class="pln"> </span><span class="pun">全局作用域。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">闭包常见用途：</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">*</span><span class="pln"> </span><span class="pun">创建特权方法用于访问控制</span></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">*</span><span class="pln"> </span><span class="pun">事件处理程序及回调</span></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">*</span><span class="pln"> </span><span class="pun">模块化代码，减少全局污染</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">缺点：</span></code></li><li class="L3"><code><span class="pln">        </span><span class="lit">1</span><span class="pun">）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在</span><span class="pln">IE</span><span class="pun">中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</span></code></li><li class="L4"><code><span class="pln">        </span><span class="lit">2</span><span class="pun">）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对像（</span><span class="kwd">object</span><span class="pun">）使用，把闭包当作它的公用方法（</span><span class="typ">Public</span><span class="pln"> </span><span class="typ">Method</span><span class="pun">），把内部变量当作它的私有属性（</span><span class="kwd">private</span><span class="pln"> value</span><span class="pun">），这时一定要小心，不要随便改变父函数内部变量的值。</span></code></li></ol></pre>

<h4 id="title-25">6. 模块化</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">使用模块化的原因？恼人的命名冲突,烦琐的文件依赖</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">通过匿名函数的形式来模仿模块化</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(){</span></code></li><li class="L4"><code><span class="pln">        </span><span class="com">//块级作用域</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">})(</span><span class="pln"> </span><span class="pun">);</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">对象形式</span></code></li><li class="L8"><code><span class="pln">     </span><span class="kwd">var</span><span class="pln"> module1 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Objec</span><span class="pun">({</span></code></li><li class="L9"><code><span class="pln">        name </span><span class="pun">:</span><span class="pln"> </span><span class="str">'xhay'</span><span class="pun">,</span></code></li><li class="L0"><code><span class="pln">        m1 </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span></code></li><li class="L1"><code><span class="pln">            </span><span class="pun">...</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">},</span></code></li><li class="L3"><code><span class="pln">        m2 </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span></code></li><li class="L4"><code><span class="pln">            </span><span class="pun">...</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L6"><code><span class="pln">        </span><span class="kwd">return</span><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">            m1</span><span class="pun">:</span><span class="pln">m1</span><span class="pun">,</span></code></li><li class="L8"><code><span class="pln">            m2</span><span class="pun">:</span><span class="pln">m2</span></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">});</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">可扩展的写法</span></code></li><li class="L3"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> module1 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">mod</span><span class="pun">){</span></code></li><li class="L4"><code><span class="pln">        mod</span><span class="pun">.</span><span class="pln">m3 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span></code></li><li class="L5"><code><span class="pln">            </span><span class="pun">...</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code><span class="pln">        </span><span class="kwd">return</span><span class="pln"> mod</span><span class="pun">；</span></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">})(</span><span class="pln">window</span><span class="pun">.</span><span class="pln">module1</span><span class="pun">||{});</span></code></li></ol></pre>

<h4 id="title-26">7. CMD 与AMD &amp; CommonJs</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">      AMD </span><span class="pun">是</span><span class="pln"> </span><span class="typ">RequireJS</span><span class="pln"> </span><span class="pun">在推广过程中对模块定义的规范化产出。</span></code></li><li class="L1"><code><span class="pln">      CMD </span><span class="pun">是</span><span class="pln"> </span><span class="typ">SeaJS</span><span class="pln"> </span><span class="pun">在推广过程中对模块定义的规范化产出。</span></code></li><li class="L2"><code><span class="pln">      </span><span class="pun">类似的还有</span><span class="pln"> </span><span class="typ">CommonJS</span><span class="pln"> </span><span class="typ">Modules</span><span class="pun">/</span><span class="lit">2.0</span><span class="pln"> </span><span class="pun">规范，是</span><span class="pln"> </span><span class="typ">BravoJS</span><span class="pln"> </span><span class="pun">在推广过程中对模块定义的规范化产出。还有不少⋯⋯</span></code></li><li class="L3"><code><span class="pln">      </span><span class="pun">这些规范的目的都是为了</span><span class="pln"> </span><span class="typ">JavaScript</span><span class="pln"> </span><span class="pun">的模块化开发，特别是在浏览器端的。</span></code></li><li class="L4"><code><span class="pln">      </span><span class="pun">目前这些规范的实现都能达成浏览器端模块化开发的目的。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">      commonJs</span><span class="pun">是应用在</span><span class="typ">NodeJs</span><span class="pun">，是一种同步的模块机制.</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">大致写法：</span></code></li><li class="L8"><code><span class="pln">            </span><span class="kwd">var</span><span class="pln"> firstModule </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">require</span><span class="pun">(</span><span class="str">"firstModule"</span><span class="pun">);</span></code></li><li class="L9"><code><span class="pln">            </span><span class="com">//your code...</span></code></li><li class="L0"><code><span class="pln">            </span><span class="kwd">module</span><span class="pun">.</span><span class="kwd">export</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> anotherModule </span></code></li><li class="L1"><code><span class="pln">       npm</span><span class="pun">成为主流的</span><span class="typ">JavaScript</span><span class="pun">组件发布平台，也越来越多会依赖。</span><span class="pln"> </span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pun">区别：</span></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">对于依赖的模块，</span><span class="pln">AMD </span><span class="pun">是提前执行，</span><span class="pln">CMD </span><span class="pun">是延迟执行。不过</span><span class="pln"> </span><span class="typ">RequireJS</span><span class="pln"> </span><span class="pun">从</span><span class="pln"> </span><span class="lit">2.0</span><span class="pln"> </span><span class="pun">开始，也改成可以延迟执行（根据写法不同，处理方式不同）。</span><span class="pln">CMD </span><span class="pun">推崇</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> lazy </span><span class="kwd">as</span><span class="pln"> possible</span><span class="pun">.</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> CMD </span><span class="pun">推崇依赖就近，</span><span class="pln">AMD </span><span class="pun">推崇依赖前置。看代码：</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">        </span><span class="com">// CMD</span></code></li><li class="L9"><code><span class="pln">        define</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="kwd">require</span><span class="pun">,</span><span class="pln"> exports</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">module</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code><span class="pln">            </span><span class="kwd">var</span><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">require</span><span class="pun">(</span><span class="str">'./a'</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pln">            a</span><span class="pun">.</span><span class="pln">doSomething</span><span class="pun">()</span></code></li><li class="L2"><code><span class="pln">            </span><span class="com">// 此处略去 100 行</span></code></li><li class="L3"><code><span class="pln">            </span><span class="kwd">var</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">require</span><span class="pun">(</span><span class="str">'./b'</span><span class="pun">)</span><span class="pln"> </span><span class="com">// 依赖可以就近书写</span></code></li><li class="L4"><code><span class="pln">            b</span><span class="pun">.</span><span class="pln">doSomething</span><span class="pun">()</span></code></li><li class="L5"><code><span class="pln">            </span><span class="com">// ...</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">})</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">        </span><span class="com">// AMD 默认推荐的是</span></code></li><li class="L9"><code><span class="pln">        define</span><span class="pun">([</span><span class="str">'./a'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'./b'</span><span class="pun">],</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">// 依赖必须一开始就写好</span></code></li><li class="L0"><code><span class="pln">            a</span><span class="pun">.</span><span class="pln">doSomething</span><span class="pun">()</span></code></li><li class="L1"><code><span class="pln">            </span><span class="com">// 此处略去 100 行</span></code></li><li class="L2"><code><span class="pln">            b</span><span class="pun">.</span><span class="pln">doSomething</span><span class="pun">()</span></code></li><li class="L3"><code><span class="pln">            </span><span class="pun">...</span></code></li><li class="L4"><code><span class="pln">        </span><span class="pun">})</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">虽然</span><span class="pln"> AMD </span><span class="pun">也支持</span><span class="pln"> CMD </span><span class="pun">的写法，同时还支持将</span><span class="pln"> </span><span class="kwd">require</span><span class="pln"> </span><span class="pun">作为依赖项传递，但</span><span class="pln"> </span><span class="typ">RequireJS</span><span class="pln"> </span><span class="pun">的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> AMD </span><span class="pun">的</span><span class="pln"> API </span><span class="pun">默认是一个当多个用，</span><span class="pln">CMD </span><span class="pun">的</span><span class="pln"> API </span><span class="pun">严格区分，推崇职责单一。比如</span><span class="pln"> AMD </span><span class="pun">里，</span><span class="kwd">require</span><span class="pln"> </span><span class="pun">分全局</span><span class="pln"> </span><span class="kwd">require</span><span class="pln"> </span><span class="pun">和局部</span><span class="pln"> </span><span class="kwd">require</span><span class="pun">，都叫</span><span class="pln"> </span><span class="kwd">require</span><span class="pun">。</span><span class="pln">CMD </span><span class="pun">里，没有全局</span><span class="pln"> </span><span class="kwd">require</span><span class="pun">，而是根据模块系统的完备性，提供</span><span class="pln"> seajs</span><span class="pun">.</span><span class="kwd">use</span><span class="pln"> </span><span class="pun">来实现模块系统的加载启动。</span><span class="pln">CMD </span><span class="pun">里，每个</span><span class="pln"> API </span><span class="pun">都简单纯粹。</span></code></li></ol></pre>

<h4 id="title-27">8. 原型链</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">在</span><span class="pln"> javaScript </span><span class="pun">中，每个对象都有一个指向它的原型（</span><span class="pln">prototype</span><span class="pun">）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（</span><span class="pln">prototype chain</span><span class="pun">）。</span></code></li></ol></pre>

<h4 id="title-28">9. 作用域与作用域链</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在</span><span class="typ">JavaScript</span><span class="pun">中，变量的作用域有全局作用域和局部作用域两种。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">全局作用域</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">（</span><span class="lit">1</span><span class="pun">）最外层函数和在最外层函数外面定义的变量拥有全局作用域。</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">（</span><span class="lit">2</span><span class="pun">）所有末定义直接赋值的变量自动声明为拥有全局作用域</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">（</span><span class="lit">3</span><span class="pun">）所有</span><span class="pln">window</span><span class="pun">对象的属性拥有全局作用域</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">局部作用域</span></code></li><li class="L8"><code><span class="pln">      </span><span class="pun">局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部。也为函数作用域。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">作用域链</span></code></li><li class="L1"><code><span class="pln">      </span><span class="pun">函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供</span><span class="typ">JavaScript</span><span class="pun">引擎访问的内部属性。其中一个内部属性是[[</span><span class="typ">Scope</span><span class="pun">]]，由</span><span class="pln">ECMA</span><span class="pun">-</span><span class="lit">262</span><span class="pun">标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链。</span></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">每个执行环境都有一个与之关联的变量对象，而每个函数都有自己的执行环境。</span></code></li></ol></pre>

<h4 id="title-29">10. 事件模型与实现机制</h4>

<p><img src="./前端面试题目总结_files/07132637-3ecf3bb32e3b45968f27d21bf1fe3aa5.png" alt="盗图" title=""></p>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">在传递到目标元素后，如果它有子元素并不会停还是会往下传。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">事件模型：</span><span class="pln"> </span><span class="pun">原生事件模型、标准事件模型、</span><span class="pln">IE</span><span class="pun">事件模型</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">1.</span><span class="pun">基础事件处理</span></code></li><li class="L4"><code><span class="pln">        a</span><span class="pun">).</span><span class="pln">HTML</span><span class="pun">标签的事件</span></code></li><li class="L5"><code><span class="pln">            </span><span class="pun">&lt;</span><span class="pln">div onmouseover </span><span class="pun">=</span><span class="pln"> </span><span class="str">"f(this,event)"</span><span class="pun">&gt;</span></code></li><li class="L6"><code><span class="pln">        b</span><span class="pun">).</span><span class="pln">javascript</span><span class="pun">事件处理</span></code></li><li class="L7"><code><span class="pln">            element</span><span class="pun">.</span><span class="pln">onmouseover </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){}</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="lit">2.</span><span class="pun">高级事件</span></code></li><li class="L0"><code><span class="pln">        </span><span class="pun">事件传播：事件冒泡，事件捕获</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">标准事件：既能冒泡传播也能捕获传播</span></code></li><li class="L2"><code><span class="pln">            addEventListener</span><span class="pun">(</span><span class="str">"click"</span><span class="pun">,</span><span class="pln">f</span><span class="pun">,</span><span class="kwd">false</span><span class="pun">/</span><span class="kwd">true</span><span class="pun">);</span></code></li><li class="L3"><code><span class="pln">            </span><span class="com">//可以注册多个事件处理函数</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">        IE</span><span class="pun">事件模型</span></code></li><li class="L6"><code><span class="pln">            </span><span class="pun">只支持事件冒泡传播</span></code></li><li class="L7"><code><span class="pln">            attachEvent</span><span class="pun">(</span><span class="str">"onclick"</span><span class="pun">,</span><span class="pln">f</span><span class="pun">);</span></code></li><li class="L8"><code><span class="pln">            </span><span class="pun">同时</span><span class="pln">IE</span><span class="pun">的</span><span class="typ">Event</span><span class="pun">对象是</span><span class="pln">window</span><span class="pun">的全局对象，只有事件发生时可以访问。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">事件冒泡是否想起了冒泡算法，即由最具体的元素（文档嵌套最深节点）接收，然后逐步上传至</span><span class="pln">document</span><span class="pun">。</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">事件捕获会由最先接收到事件的元素然后传向最里边（我们可以将元素想象成一个盒子装一个盒子，而不是一个积木堆积）</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    DOM</span><span class="pun">事件流</span></code></li><li class="L4"><code><span class="pln">    DOM2</span><span class="pun">级事件规定事件包括三个阶段：</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">①</span><span class="pln"> </span><span class="pun">事件捕获阶段</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">②</span><span class="pln"> </span><span class="pun">处于目标阶段</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">③</span><span class="pln"> </span><span class="pun">事件冒泡阶段</span></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">停止冒泡，阻止事件的默认行为</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">不冒泡的事件：</span><span class="pln">load</span><span class="pun">,</span><span class="pln"> change</span><span class="pun">,</span><span class="pln"> submit</span><span class="pun">,</span><span class="pln"> focus</span><span class="pun">,</span><span class="pln"> blur</span></code></li></ol></pre>

<h4 id="title-30">11.  HTML DOM 事件（不同浏览器）</h4>

<table>
<thead>
<tr>
  <th>IE事件</th>
  <th>标准事件</th>
</tr>
</thead>
<tbody><tr>
  <td>srcElement</td>
  <td>target</td>
</tr>
<tr>
  <td>cancelBubble=false</td>
  <td>stopPropagation()</td>
</tr>
<tr>
  <td>detachEvent(“name”, fn)</td>
  <td>addEventListener(“name”, fn ,false)</td>
</tr>
<tr>
  <td>returnValue=false</td>
  <td>preventDefault()</td>
</tr>
</tbody></table>


<h4 id="p-5">12.  深度克隆函数deepClone与浅克隆</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">浅克隆是简单的复制对象，如果对象其中一个属性是引用型变量，就会出现这种情况，因为引用型变量保存的是内存地址。</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">深克隆就是在克隆的时候判断一下属性的类型是不是引用型变量，如果是的话就用递归方法让它一层一层进去复制自己</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> deepClone</span><span class="pun">(</span><span class="pln">obj</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> _toString </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">prototype</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">;</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">        </span><span class="com">// null, undefined, non-object, function</span></code></li><li class="L7"><code><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">obj </span><span class="pun">||</span><span class="pln"> </span><span class="kwd">typeof</span><span class="pln"> obj </span><span class="pun">!==</span><span class="pln"> </span><span class="str">'object'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">            </span><span class="kwd">return</span><span class="pln"> obj</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">        </span><span class="com">// DOM Node</span></code></li><li class="L2"><code><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">obj</span><span class="pun">.</span><span class="pln">nodeType </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="str">'cloneNode'</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> obj</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code><span class="pln">            </span><span class="kwd">return</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">cloneNode</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span></code></li><li class="L4"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">        </span><span class="com">// Date</span></code></li><li class="L7"><code><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">_toString</span><span class="pun">.</span><span class="pln">call</span><span class="pun">(</span><span class="pln">obj</span><span class="pun">)</span><span class="pln"> </span><span class="pun">===</span><span class="pln"> </span><span class="str">'[object Date]'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">            </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">(</span><span class="pln">obj</span><span class="pun">.</span><span class="pln">getTime</span><span class="pun">());</span></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">        </span><span class="com">// RegExp</span></code></li><li class="L2"><code><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">_toString</span><span class="pun">.</span><span class="pln">call</span><span class="pun">(</span><span class="pln">obj</span><span class="pun">)</span><span class="pln"> </span><span class="pun">===</span><span class="pln"> </span><span class="str">'[object RegExp]'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code><span class="pln">            </span><span class="kwd">var</span><span class="pln"> flags </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span></code></li><li class="L4"><code><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">obj</span><span class="pun">.</span><span class="kwd">global</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> flags</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="str">'g'</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span></code></li><li class="L5"><code><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">obj</span><span class="pun">.</span><span class="pln">multiline</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> flags</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="str">'m'</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span></code></li><li class="L6"><code><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">obj</span><span class="pun">.</span><span class="pln">ignoreCase</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> flags</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="str">'i'</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">            </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RegExp</span><span class="pun">(</span><span class="pln">obj</span><span class="pun">.</span><span class="pln">source</span><span class="pun">,</span><span class="pln"> flags</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="str">''</span><span class="pun">));</span></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Array</span><span class="pun">.</span><span class="pln">isArray</span><span class="pun">(</span><span class="pln">obj</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="pun">[]</span><span class="pln"> </span><span class="pun">:</span></code></li><li class="L2"><code><span class="pln">            obj</span><span class="pun">.</span><span class="pln">constructor </span><span class="pun">?</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">constructor</span><span class="pun">()</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">{};</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> key </span><span class="kwd">in</span><span class="pln"> obj </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">            result</span><span class="pun">[</span><span class="pln">key</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> deepClone</span><span class="pun">(</span><span class="pln">obj</span><span class="pun">[</span><span class="pln">key</span><span class="pun">]);</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">        </span><span class="kwd">return</span><span class="pln"> result</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> A</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">a </span><span class="pun">=</span><span class="pln"> a</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">        name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'qiu'</span><span class="pun">,</span></code></li><li class="L7"><code><span class="pln">        birth</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">(),</span></code></li><li class="L8"><code><span class="pln">        pattern</span><span class="pun">:</span><span class="pln"> </span><span class="str">/qiu/</span><span class="pln">gim</span><span class="pun">,</span></code></li><li class="L9"><code><span class="pln">        container</span><span class="pun">:</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">body</span><span class="pun">,</span></code></li><li class="L0"><code><span class="pln">        hobbys</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">'book'</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">(),</span><span class="pln"> </span><span class="pun">/</span><span class="pln">aaa</span><span class="pun">/</span><span class="pln">gim</span><span class="pun">,</span><span class="pln"> </span><span class="lit">111</span><span class="pun">]</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">};</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> c </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> A</span><span class="pun">();</span></code></li><li class="L4"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> deepClone</span><span class="pun">(</span><span class="pln">c</span><span class="pun">);</span></code></li><li class="L5"><code><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">c</span><span class="pun">.</span><span class="pln">a </span><span class="pun">===</span><span class="pln"> b</span><span class="pun">.</span><span class="pln">a</span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">c</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">);</span></code></li></ol></pre>

<h4 id="title-31">13. 跨域</h4>

<p><em>同源策略</em></p>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">      </span><span class="pun">所谓同源是指，域名，协议，端口相同。限制了一个源(</span><span class="pln">origin</span><span class="pun">)中加载文本或脚本与来自其它源(</span><span class="pln">origin</span><span class="pun">)中资源的交互方式。</span></code></li><li class="L1"><code><span class="pln">      </span><span class="pun">当一个浏览器的两个</span><span class="pln">tab</span><span class="pun">页中分别打开来</span><span class="pln"> </span><span class="pun">百度和谷歌的页面</span></code></li><li class="L2"><code><span class="pln">      </span><span class="pun">当浏览器的百度</span><span class="pln">tab</span><span class="pun">页执行一个脚本的时候会检查这个脚本是属于哪个页面的，</span></code></li><li class="L3"><code><span class="pln">      </span><span class="pun">即检查是否同源，只有和百度同源的脚本才会被执行。</span></code></li></ol></pre>

<p><em>JSONP</em></p>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">原理是：动态插入</span><span class="pln">script</span><span class="pun">标签，通过</span><span class="pln">script</span><span class="pun">标签引入一个</span><span class="pln">js</span><span class="pun">文件，这个</span><span class="pln">js</span><span class="pun">文件载入成功后会执行我们在</span><span class="pln">url</span><span class="pun">参数中指定的函数，并且会把我们需要的</span><span class="pln">json</span><span class="pun">数据作为参数传入。</span></code></li><li class="L1"><code><span class="pln">            </span><span class="pun">由于同源策略的限制，</span><span class="typ">XmlHttpRequest</span><span class="pun">只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过</span><span class="pln">script</span><span class="pun">标签实现跨域请求，然后在服务端输出</span><span class="pln">JSON</span><span class="pun">数据并执行回调函数，从而解决了跨域的数据请求。</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">        </span><span class="kwd">function</span><span class="pln"> handleResponse</span><span class="pun">(</span><span class="pln">response</span><span class="pun">){</span></code></li><li class="L4"><code><span class="pln">            alert</span><span class="pun">(</span><span class="str">"You’ re at IP address "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> response</span><span class="pun">.</span><span class="pln">ip </span><span class="pun">+</span><span class="pln"> </span><span class="str">", which is in "</span><span class="pln"> </span><span class="pun">+</span></code></li><li class="L5"><code><span class="pln">             response</span><span class="pun">.</span><span class="pln">city </span><span class="pun">+</span><span class="pln"> </span><span class="str">", "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> response</span><span class="pun">.</span><span class="pln">region_name</span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> script </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">"script"</span><span class="pun">);</span></code></li><li class="L9"><code><span class="pln">        script</span><span class="pun">.</span><span class="pln">src </span><span class="pun">=</span><span class="pln"> </span><span class="str">"http://freegeoip.net/json/?callback=handleResponse"</span><span class="pun">;</span></code></li><li class="L0"><code><span class="pln">        document</span><span class="pun">.</span><span class="pln">body</span><span class="pun">.</span><span class="pln">insertBefore</span><span class="pun">(</span><span class="pln">script</span><span class="pun">,</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">body</span><span class="pun">.</span><span class="pln">firstChild</span><span class="pun">);</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">优点是兼容性好，简单易用，支持浏览器与服务器双向通信。</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">缺点是只支持</span><span class="pln">GET</span><span class="pun">请求,</span><span class="pln">JSONP </span><span class="pun">是从其他域中加载代码执行，安全不能保证。</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pun">*</span><span class="typ">Window</span><span class="pun">.</span><span class="pln">name</span><span class="pun">+</span><span class="pln">iframe</span><span class="pun">*</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">原理：在一个窗口(</span><span class="pln">window</span><span class="pun">)的生命周期内,窗口载入的所有的页面都是共享一个</span><span class="pln">window</span><span class="pun">.</span><span class="pln">name</span><span class="pun">的，每个页面对</span><span class="pln">window</span><span class="pun">.</span><span class="pln">name</span><span class="pun">都有读写的权限，</span><span class="pln">window</span><span class="pun">.</span><span class="pln">name</span><span class="pun">是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。</span></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">跨域数据即由</span><span class="pln">iframe</span><span class="pun">的</span><span class="pln">window</span><span class="pun">.</span><span class="pln">name</span><span class="pun">从外域传递到本地域类似</span><span class="pln">src</span><span class="pun">属性，则绕过了跨域。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">限制：</span><span class="pln">window</span><span class="pun">.</span><span class="pln">name</span><span class="pun">的值只能是字符串的形式，这个字符串的大小最大能允许</span><span class="lit">2M</span><span class="pun">左右，取决于浏览器，</span><span class="pln"> IE</span><span class="pun">和</span><span class="pln">firefox</span><span class="pun">下可以大至</span><span class="lit">32M</span><span class="pun">左右</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">优点：安全（可以销毁</span><span class="pln">iframe</span><span class="pun">，不被其他域</span><span class="pln">frame js</span><span class="pun">访问），比</span><span class="pln">FIM</span><span class="pun">更快</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">总结：</span><span class="pln">iframe</span><span class="pun">的</span><span class="pln">src</span><span class="pun">属性由外域转向本地域，跨域数据即由</span><span class="pln">iframe</span><span class="pun">的</span><span class="pln">window</span><span class="pun">.</span><span class="pln">name</span><span class="pun">从外域传递到本地域。巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">使用方式：</span></code></li><li class="L7"><code><span class="pln">       a</span><span class="pun">.</span><span class="pln">com</span><span class="pun">/</span><span class="pln">app</span><span class="pun">.</span><span class="pln">html</span><span class="pun">：应用页面。</span></code></li><li class="L8"><code><span class="pln">       a</span><span class="pun">.</span><span class="pln">com</span><span class="pun">/</span><span class="pln">proxy</span><span class="pun">.</span><span class="pln">html</span><span class="pun">：代理文件，一般是一个没有任何内容的</span><span class="pln">html</span><span class="pun">文件，需要和应用页面在同一域下。</span></code></li><li class="L9"><code><span class="pln">       b</span><span class="pun">.</span><span class="pln">com</span><span class="pun">/</span><span class="pln">data</span><span class="pun">.</span><span class="pln">html</span><span class="pun">：应用页面需要获取数据的页面，可称为数据页面。</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pun">*通过修改</span><span class="pln">document</span><span class="pun">.</span><span class="pln">domain</span><span class="pun">来跨子域*</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pun">*动态创建</span><span class="pln">script</span><span class="pun">*</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">原理：浏览器并不禁止在页面中引用其他域的</span><span class="pln">JS</span><span class="pun">文件，并可以自由执行引入的</span><span class="pln">JS</span><span class="pun">文件中的</span><span class="kwd">function</span><span class="pun">。可以方便地通过创建</span><span class="pln">script</span><span class="pun">节点的方法来实现完全跨域的通信。</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">注意：</span><span class="pln">ie</span><span class="pun">只能通过</span><span class="pln">script</span><span class="pun">的</span><span class="pln">readystatechange</span><span class="pun">属性，其它浏览器是</span><span class="pln">script</span><span class="pun">的</span><span class="pln">load</span><span class="pun">事件。以下是部分判断</span><span class="pln">script</span><span class="pun">加载完毕的方法。</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    js</span><span class="pun">.</span><span class="pln">onload </span><span class="pun">=</span><span class="pln"> js</span><span class="pun">.</span><span class="pln">onreadystatechange </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">readyState </span><span class="pun">||</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">readyState </span><span class="pun">===</span><span class="pln"> </span><span class="str">'loaded'</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">readyState </span><span class="pun">===</span><span class="pln"> </span><span class="str">'complete'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">            </span><span class="com">// callback在此处执行</span></code></li><li class="L2"><code><span class="pln">            js</span><span class="pun">.</span><span class="pln">onload </span><span class="pun">=</span><span class="pln"> js</span><span class="pun">.</span><span class="pln">onreadystatechange </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">};</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">扩展：</span><span class="pln"> a</span><span class="pun">.使用了</span><span class="typ">Ajax</span><span class="pun">，如何解决跨域问题</span></code></li><li class="L7"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">通过修改</span><span class="pln">document</span><span class="pun">.</span><span class="pln">domain</span><span class="pun">和隐藏的</span><span class="typ">IFrame</span><span class="pun">来实现跨域请求。这种方案可能是最简单的一种跨域请求的方案，但是它同样是一种限制最大的方</span><span class="pln"> </span><span class="pun">案。首先，它只能实现在同一个顶级域名下的跨域请求；另外，当在一个页面中还包含有其它的</span><span class="typ">IFrame</span><span class="pun">时，可能还会产生安全性异常，拒绝访问。</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> </span><span class="pun">通过请求当前域</span><span class="pln"> </span><span class="pun">的代理，由服务器</span><span class="pln"> </span><span class="pun">代理去访问另一个域的资源。</span><span class="typ">XMLHttpRequest</span><span class="pun">通过请求本域内的一个服务器资源</span><span class="pln"> </span><span class="pun">，将要访问的目标资源提供给服务器，交由服务器</span><span class="pln"> </span><span class="pun">去代理访问目标资源。这种方案，可以实现完全的跨域访问，但是开发，请求过程的消费会比较大。</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> jQuery</span><span class="pun">的</span><span class="pln">ajax</span><span class="pun">有</span><span class="pln">jsonp</span><span class="pun">这样的属性可以用来解决跨域的问题。</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">一个专门用来解决跨域问题的</span><span class="pln">jQuery</span><span class="pun">插件-</span><span class="pln">jquery</span><span class="pun">-</span><span class="pln">jsonp</span><span class="pun">。</span></code></li></ol></pre>

<h4 id="title-32">14. 内存泄漏</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为</span><span class="pln"> </span><span class="lit">0</span><span class="pun">（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</span><span class="pln"> setTimeout </span><span class="pun">的第一个参数使用字符串而非函数的话，会引发内存泄漏。</span><span class="pln"> </span><span class="pun">闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">(</span><span class="lit">1</span><span class="pun">).</span><span class="pln"> </span><span class="pun">内存溢出：当你运行一个程序的时候，程序所需要的内存系统无法满足（系统的内存空间不够），造成内存溢出。</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">在</span><span class="pln">IE</span><span class="pun">下的</span><span class="pln">JS</span><span class="pun">编程中，以下的编程方式都会造成即使关闭</span><span class="pln">IE</span><span class="pun">也无法释放内存的问题给</span><span class="pln">DOM</span><span class="pun">对象添加的属性是一个对象的引用。</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">范例</span><span class="pln"> </span><span class="lit">1</span><span class="pun">：</span></code></li><li class="L5"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> </span><span class="typ">MyObject</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{};</span></code></li><li class="L6"><code><span class="pln">        document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">'myDiv'</span><span class="pun">).</span><span class="pln">myProp </span><span class="pun">=</span><span class="pln"> </span><span class="typ">MyObject</span><span class="pun">;</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">解决方法：</span></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">在</span><span class="pln">window</span><span class="pun">.</span><span class="pln">onunload</span><span class="pun">事件中写上:</span><span class="pln"> </span></code></li><li class="L0"><code><span class="pln">            document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">'myDiv'</span><span class="pun">).</span><span class="pln">myProp </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    DOM</span><span class="pun">对象与</span><span class="pln">JS</span><span class="pun">对象相互引用。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">范例</span><span class="pln"> </span><span class="lit">2</span><span class="pun">：</span></code></li><li class="L5"><code><span class="pln">        </span><span class="kwd">function</span><span class="pln"> </span><span class="typ">Encapsulator</span><span class="pun">(</span><span class="pln">element</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">            </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">elementReference </span><span class="pun">=</span><span class="pln"> element</span><span class="pun">;</span></code></li><li class="L7"><code><span class="pln">                element</span><span class="pun">.</span><span class="pln">myProp </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">;</span></code></li><li class="L8"><code><span class="pln">            </span><span class="pun">}</span></code></li><li class="L9"><code><span class="pln">            </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Encapsulator</span><span class="pun">(</span><span class="pln">document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">'myDiv'</span><span class="pun">));</span></code></li><li class="L0"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">解决方法：</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">在</span><span class="pln">onunload</span><span class="pun">事件中写上:</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">'myDiv'</span><span class="pun">).</span><span class="pln">myProp </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">给</span><span class="pln">DOM</span><span class="pun">对象用</span><span class="pln">attachEvent</span><span class="pun">绑定事件。</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">范例</span><span class="pln"> </span><span class="lit">3</span><span class="pun">：</span></code></li><li class="L6"><code><span class="pln">        </span><span class="kwd">function</span><span class="pln"> doClick</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}</span></code></li><li class="L7"><code><span class="pln">        element</span><span class="pun">.</span><span class="pln">attachEvent</span><span class="pun">(</span><span class="str">"onclick"</span><span class="pun">,</span><span class="pln"> doClick</span><span class="pun">);</span></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">解决方法：</span></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">在</span><span class="pln">onunload</span><span class="pun">事件中写上:</span><span class="pln"> element</span><span class="pun">.</span><span class="pln">detachEvent</span><span class="pun">(</span><span class="str">'onclick'</span><span class="pun">,</span><span class="pln"> doClick</span><span class="pun">);</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">范例</span><span class="lit">4</span><span class="pun">:</span><span class="pln"> </span><span class="pun">从外到内执行</span><span class="pln">appendChild</span><span class="pun">。这时即使调用</span><span class="pln">removeChild</span><span class="pun">也无法释放。范例：</span></code></li><li class="L2"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> parentDiv </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">"div"</span><span class="pun">);</span></code></li><li class="L3"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> childDiv </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">"div"</span><span class="pun">);</span></code></li><li class="L4"><code><span class="pln">        document</span><span class="pun">.</span><span class="pln">body</span><span class="pun">.</span><span class="pln">appendChild</span><span class="pun">(</span><span class="pln">parentDiv</span><span class="pun">);</span></code></li><li class="L5"><code><span class="pln">        parentDiv</span><span class="pun">.</span><span class="pln">appendChild</span><span class="pun">(</span><span class="pln">childDiv</span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">解决方法：从内到外执行</span><span class="pln">appendChild</span><span class="pun">:</span></code></li><li class="L7"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> parentDiv </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">"div"</span><span class="pun">);</span></code></li><li class="L8"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> childDiv </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">"div"</span><span class="pun">);</span></code></li><li class="L9"><code><span class="pln">        parentDiv</span><span class="pun">.</span><span class="pln">appendChild</span><span class="pun">(</span><span class="pln">childDiv</span><span class="pun">);</span></code></li><li class="L0"><code><span class="pln">        document</span><span class="pun">.</span><span class="pln">body</span><span class="pun">.</span><span class="pln">appendChild</span><span class="pun">(</span><span class="pln">parentDiv</span><span class="pun">);</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">范例</span><span class="lit">5</span><span class="pun">：反复重写同一个属性会造成内存大量占用(但关闭</span><span class="pln">IE</span><span class="pun">后内存会被释放)。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">5000</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">        hostElement</span><span class="pun">.</span><span class="pln">text </span><span class="pun">=</span><span class="pln"> </span><span class="str">"zchubyoyo"</span><span class="pun">;</span></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">这种方式相当于定义了</span><span class="lit">5000</span><span class="pun">个属性！</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">(</span><span class="lit">2</span><span class="pun">).</span><span class="pln"> </span><span class="pun">内存泄漏：当运行程序的时候，系统会按照所需分配给内存，当程序运行之后，这些内存空间没有办法被收回，就是造成了内存的泄漏。</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">常见的内存溢出--循环引用</span></code></li><li class="L2"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> fun</span><span class="pun">(){</span></code></li><li class="L3"><code><span class="pln">       </span><span class="kwd">var</span><span class="pln"> element </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(“</span><span class="pln">id</span><span class="pun">”);</span></code></li><li class="L4"><code><span class="pln">       element</span><span class="pun">.</span><span class="pln">onclick </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span></code></li><li class="L5"><code><span class="pln">           alert</span><span class="pun">(</span><span class="pln">element</span><span class="pun">.</span><span class="pln">id</span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">这个是我们在</span><span class="pln">js</span><span class="pun">中经常写的一个方法，它将导致内存的泄漏，你想到了吗？</span></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">解决方案：</span></code></li><li class="L1"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> fun</span><span class="pun">(){</span></code></li><li class="L2"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> element </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(“</span><span class="pln">id</span><span class="pun">”);</span></code></li><li class="L3"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> id </span><span class="pun">=</span><span class="pln"> element</span><span class="pun">.</span><span class="pln">id</span><span class="pun">;</span></code></li><li class="L4"><code><span class="pln">        element</span><span class="pun">.</span><span class="pln">onclick </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span></code></li><li class="L5"><code><span class="pln">                alert</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code><span class="pln">        element </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">}</span></code></li></ol></pre>

<h4 id="title-33">15. Ajax</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">干掉了</span><span class="typ">Back</span><span class="pun">和</span><span class="typ">History</span><span class="pun">功能，浏览器后退机制的破坏</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">解决方式：</span><span class="typ">Gmail</span><span class="pln"> </span><span class="pun">(通过创建或使用一个隐藏的</span><span class="pln">IFRAME</span><span class="pun">来重现页面上的变更),它在一个隐藏的</span><span class="pln">IFRAME</span><span class="pun">中进行搜索，然后将搜索结果反映到</span><span class="typ">Ajax</span><span class="pun">元素上，以便将应用程序状态恢复到当时的状态</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">缺点：开发成本是非常高的</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> </span><span class="pun">安全问题</span></code></li><li class="L5"><code><span class="pln">        ajax</span><span class="pun">的逻辑可以对客户端的安全扫描技术隐藏起来，允许黑客从远端服务器上建立新的攻击</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">优点</span></code></li><li class="L8"><code><span class="pln">        </span><span class="lit">1.</span><span class="pun">页面无刷新，在页面内与服务器通信，给用户的体验非常好</span></code></li><li class="L9"><code><span class="pln">        </span><span class="lit">2.</span><span class="pun">使用异步方式与服务器通信，不需要打断用户的操作</span></code></li><li class="L0"><code><span class="pln">        </span><span class="lit">3.</span><span class="pun">前端和后端负载平衡。减轻服务器的负担，可以最大程度的减少冗余请求，和响应对服务器造成的负担。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">        </span><span class="typ">Ajax</span><span class="pun">的工作原理相当于在用户和服务器之间加了—个中间层(</span><span class="pln">AJAX</span><span class="pun">引擎),使用户操作与服务器响应异步化。并不是所有的用户请求都提交给服务器,像—些数据验证和数据处理等都交给</span><span class="typ">Ajax</span><span class="pun">引擎自己来做,</span><span class="pln"> </span><span class="pun">只有确定需要从服务器读取新数据时再由</span><span class="typ">Ajax</span><span class="pun">引擎代为向服务器提交请求。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="typ">Ajax</span><span class="pun">其核心有</span><span class="typ">JavaScript</span><span class="pun">、</span><span class="typ">XMLHTTPRequest</span><span class="pun">、</span><span class="pln">DOM</span><span class="pun">对象组成，通过</span><span class="typ">XmlHttpRequest</span><span class="pun">（</span><span class="kwd">get</span><span class="pun">与</span><span class="pln">post</span><span class="pun">方式）对象来向服务器发异步请求，从服务器获得数据，然后用</span><span class="typ">JavaScript</span><span class="pun">来操作</span><span class="pln">DOM</span><span class="pun">而更新页面。这其中最关键的一步就是从服务器获得请求数据</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="typ">XMLHttpRequest</span><span class="pun">是</span><span class="pln">ajax</span><span class="pun">的核心机制</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    ajax</span><span class="pun">所包含的技术</span></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">大家都知道</span><span class="pln">ajax</span><span class="pun">并非一种新的技术，而是几种原有技术的结合体。它由下列技术组合而成。</span></code></li><li class="L0"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">使用</span><span class="pln">CSS</span><span class="pun">和</span><span class="pln">XHTML</span><span class="pun">来表示。</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> </span><span class="pun">使用</span><span class="pln">DOM</span><span class="pun">模型来交互和动态显示。</span></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="pun">使用</span><span class="typ">XMLHttpRequest</span><span class="pun">来和服务器进行异步通信。</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">使用</span><span class="pln">javascript</span><span class="pun">来绑定和调用。</span></code></li></ol></pre>

<h4 id="title-34">16. NodeJs</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">适用场景：高并发、聊天、实时消息推送</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">优点：因为</span><span class="typ">Node</span><span class="pun">是基于事件驱动和无阻塞的，所以非常适合处理并发请求，因此构建在</span><span class="typ">Node</span><span class="pun">上的代理服务器相比其他技术实现（如</span><span class="typ">Ruby</span><span class="pun">）的服务器表现要好得多。此外，与</span><span class="typ">Node</span><span class="pun">代理服务器交互的客户端代码是由</span><span class="pln">javascript</span><span class="pun">语言编写的，因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">缺点：</span><span class="typ">Node</span><span class="pun">是一个相对新的开源项目，所以不太稳定，它总是一直在变，而且缺少足够多的第三方库支持。看起来，就像是</span><span class="typ">Ruby</span><span class="pun">/</span><span class="typ">Rails</span><span class="pun">当年的样子。</span></code></li></ol></pre>

<h4 id="title-35">17. jQuery</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    jquery</span><span class="pun">缺点</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">安全问题：由于</span><span class="typ">JavaScript</span><span class="pun">在客户端运行，可能被用于黑客目的。</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">冲突问题：有多个插件容易引起冲突。尤其是这些插件依赖相同事件或</span><span class="pln">selector</span><span class="pun">时最为明显。</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">插件兼容性。在最新版</span><span class="pln">jQuery</span><span class="pun">版本下，现有插件可能无法正常使用。</span></code></li><li class="L4"><code><span class="pln">        </span><span class="pun">不能向后兼容。每一个新版本不能兼容早期的版本。这可能会影响到开发者已经编写好的代码或插件。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">优点：</span></code></li><li class="L7"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">强大的选择器</span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">许开发者使用从</span><span class="pln">CSS1</span><span class="pun">到</span><span class="pln">CSS3</span><span class="pun">几乎所有的选择器或自定义的选择器</span></code></li><li class="L9"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> DOM</span><span class="pun">操作的封装</span></code></li><li class="L0"><code><span class="pln">        </span><span class="typ">JQuery</span><span class="pun">封装了大量常用的</span><span class="pln">DOM</span><span class="pun">操作，使开发者在编写</span><span class="pln">DOM</span><span class="pun">操作相关程序的时候能够得心应手</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="pun">不污染顶级变量</span></code></li><li class="L2"><code><span class="pln">         </span><span class="typ">JQuery</span><span class="pun">只建立一个名为</span><span class="typ">JQuery</span><span class="pun">的对象，其所有的函数方法都在这个对象之下。其别名</span><span class="pln">$</span><span class="pun">也可以随时交流控制权，绝对不会污染其他的对象。</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">链式操作方式</span></code></li><li class="L4"><code><span class="pln">        </span><span class="typ">JQuery</span><span class="pun">中最有特色的莫过于它的链式操作方式——即对发生在同一个</span><span class="typ">JQuery</span><span class="pun">对象上的一组动作，可以直接接连写无需要重复获取对象。这一特点使得</span><span class="typ">JQuery</span><span class="pun">的代码无比优雅。</span></code></li></ol></pre>

<h4 id="title-36">18. HTML DOM 操作</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">（</span><span class="lit">1</span><span class="pun">）创建新节点</span></code></li><li class="L1"><code><span class="pln">          createDocumentFragment</span><span class="pun">()</span><span class="pln">    </span><span class="com">//创建一个DOM片段</span></code></li><li class="L2"><code><span class="pln">          createElement</span><span class="pun">()</span><span class="pln">   </span><span class="com">//创建一个具体的元素</span></code></li><li class="L3"><code><span class="pln">          createTextNode</span><span class="pun">()</span><span class="pln">   </span><span class="com">//创建一个文本节点</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">（</span><span class="lit">2</span><span class="pun">）添加、移除、替换、插入</span></code></li><li class="L5"><code><span class="pln">          appendChild</span><span class="pun">()</span></code></li><li class="L6"><code><span class="pln">          removeChild</span><span class="pun">()</span></code></li><li class="L7"><code><span class="pln">          replaceChild</span><span class="pun">()</span></code></li><li class="L8"><code><span class="pln">          insertBefore</span><span class="pun">()</span></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">（</span><span class="lit">3</span><span class="pun">）查找</span></code></li><li class="L0"><code><span class="pln">          getElementsByTagName</span><span class="pun">()</span><span class="pln">    </span><span class="com">//通过标签名称</span></code></li><li class="L1"><code><span class="pln">          getElementsByName</span><span class="pun">()</span><span class="pln">    </span><span class="com">//通过元素的Name属性的值</span></code></li><li class="L2"><code><span class="pln">          getElementById</span><span class="pun">()</span><span class="pln">    </span><span class="com">//通过元素Id，唯一性</span></code></li><li class="L3"><code><span class="pln">          querySelector</span><span class="pun">(</span><span class="str">".class"</span><span class="pun">);</span><span class="pln">  </span><span class="com">//返回文档中匹配指定的CSS选择器的第一元素</span></code></li><li class="L4"><code><span class="pln">          querySelectorAll</span><span class="pun">();</span><span class="pln"> </span><span class="com">//返回文档中匹配的CSS选择器的所有元素节点列表</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">（</span><span class="lit">4</span><span class="pun">）复制</span></code></li><li class="L6"><code><span class="pln">          importNode</span><span class="pun">(</span><span class="pln">node</span><span class="pun">,</span><span class="pln">deep</span><span class="pun">)</span><span class="com">//如果为 true，还要递归复制node的所有子孙节点。</span></code></li></ol></pre>

<h4 id="title-37">19. Ajax过程</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">(</span><span class="lit">1</span><span class="pun">)创建</span><span class="str">`XMLHttpRequest`</span><span class="pun">对象,也就是创建一个异步调用对象.</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">(</span><span class="lit">2</span><span class="pun">)创建一个新的</span><span class="str">`HTTP`</span><span class="pun">请求,并指定该</span><span class="str">`HTTP`</span><span class="pun">请求的方法、</span><span class="str">`URL`</span><span class="pun">及验证信息.</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">(</span><span class="lit">3</span><span class="pun">)设置响应</span><span class="str">`HTTP`</span><span class="pun">请求状态变化的函数.</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">(</span><span class="lit">4</span><span class="pun">)发送</span><span class="str">`HTTP`</span><span class="pun">请求.</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">(</span><span class="lit">5</span><span class="pun">)获取异步调用返回的数据.</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">(</span><span class="lit">6</span><span class="pun">)使用</span><span class="typ">JavaScript</span><span class="pun">和</span><span class="pln">DOM</span><span class="pun">实现局部刷新.</span></code></li><li class="L1"><code></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> xmlHttp </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">XMLHttpRequest</span><span class="pun">();</span></code></li><li class="L4"><code><span class="pln">    xmlHttp</span><span class="pun">.</span><span class="pln">open</span><span class="pun">(</span><span class="str">'GET'</span><span class="pun">,</span><span class="str">'demo.php'</span><span class="pun">,</span><span class="str">'true'</span><span class="pun">);</span></code></li><li class="L5"><code><span class="pln">    xmlHttp</span><span class="pun">.</span><span class="pln">send</span><span class="pun">()</span></code></li><li class="L6"><code><span class="pln">    xmlHttp</span><span class="pun">.</span><span class="pln">onreadystatechange </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span></code></li><li class="L7"><code><span class="pln">        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">xmlHttp</span><span class="pun">.</span><span class="pln">readyState </span><span class="pun">===</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> xmlHttp</span><span class="pun">.</span><span class="pln">status </span><span class="pun">===</span><span class="pln"> </span><span class="lit">200</span><span class="pun">){</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">}</span></code></li></ol></pre>

<h4 id="p-6">20. Promise编程</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="typ">Promise</span><span class="pln"> </span><span class="pun">有四种状态：</span></code></li><li class="L1"><code><span class="pln">            pending</span><span class="pun">:</span><span class="pln"> </span><span class="pun">初始状态,</span><span class="pln"> </span><span class="pun">非</span><span class="pln"> fulfilled </span><span class="pun">或</span><span class="pln"> rejected</span><span class="pun">.</span></code></li><li class="L2"><code><span class="pln">            fulfilled</span><span class="pun">:</span><span class="pln"> </span><span class="pun">成功的操作.</span></code></li><li class="L3"><code><span class="pln">            rejected</span><span class="pun">:</span><span class="pln"> </span><span class="pun">失败的操作.</span></code></li><li class="L4"><code><span class="pln">            settled</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Promise</span><span class="pun">已被</span><span class="pln">fulfilled</span><span class="pun">或</span><span class="pln">rejected</span><span class="pun">，且不是</span><span class="pln">pending</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="typ">Promise</span><span class="pln"> </span><span class="pun">对象用来进行延迟(</span><span class="pln">deferred</span><span class="pun">)</span><span class="pln"> </span><span class="pun">和异步(</span><span class="pln">asynchronous </span><span class="pun">)</span><span class="pln"> </span><span class="pun">计算。</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">如何构造？</span></code></li><li class="L9"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> promise </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Promise</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">resolve</span><span class="pun">,</span><span class="pln"> reject</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(...)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span><span class="com">// succeed</span></code></li><li class="L2"><code><span class="pln">                resolve</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">   </span><span class="com">// fails</span></code></li><li class="L5"><code><span class="pln">                reject</span><span class="pun">(</span><span class="typ">Error</span><span class="pun">(</span><span class="pln">errMessage</span><span class="pun">));</span></code></li><li class="L6"><code><span class="pln">            </span><span class="pun">}</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">});</span></code></li></ol></pre>

<h4 id="title-38">21. MVC和MVVM的理解</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    MVC</span><span class="pun">代表：</span><span class="pln"> backboneJs</span></code></li><li class="L1"><code><span class="pln">        </span><span class="typ">Controller</span><span class="pun">/</span><span class="typ">Presenter</span><span class="pun">负责逻辑的处理，</span><span class="typ">Model</span><span class="pun">提供数据，</span><span class="typ">View</span><span class="pun">负</span><span class="pln"> </span><span class="pun">责显示。在</span><span class="pln">MVC</span><span class="pun">中</span><span class="typ">View</span><span class="pun">会从直接</span><span class="typ">Model</span><span class="pun">中读取数据。</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">组成部分：</span></code></li><li class="L3"><code><span class="pln">            </span><span class="typ">View</span><span class="pln"> </span><span class="pun">传送指令到</span><span class="pln"> </span><span class="typ">Controller</span></code></li><li class="L4"><code><span class="pln">            </span><span class="typ">Controller</span><span class="pln"> </span><span class="pun">完成业务逻辑后，要求</span><span class="pln"> </span><span class="typ">Model</span><span class="pln"> </span><span class="pun">改变状态</span></code></li><li class="L5"><code><span class="pln">            </span><span class="typ">Model</span><span class="pln"> </span><span class="pun">将新的数据发送到</span><span class="pln"> </span><span class="typ">View</span><span class="pun">，用户得到反馈</span></code></li><li class="L6"><code><span class="pln">    MVVM </span><span class="pun">:</span><span class="pln"> </span><span class="typ">AngularJs</span><span class="pun">,</span><span class="typ">Avalon</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">是真正将页面与数据逻辑分离的模式，在开发方式上，它是真正将前台代码开发者（</span><span class="pln">JS</span><span class="pun">+</span><span class="pln">HTML</span><span class="pun">）与后台代码开发者分离的模式。</span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">组成部分</span><span class="typ">Model</span><span class="pun">、</span><span class="typ">View</span><span class="pun">、</span><span class="typ">ViewModel</span><span class="pun">：</span></code></li><li class="L9"><code><span class="pln">            </span><span class="typ">View</span><span class="pun">：</span><span class="pln">UI</span><span class="pun">界面</span></code></li><li class="L0"><code><span class="pln">            </span><span class="typ">ViewModel</span><span class="pun">：它是</span><span class="typ">View</span><span class="pun">的抽象，负责</span><span class="typ">View</span><span class="pun">与</span><span class="typ">Model</span><span class="pun">之间信息转换，将</span><span class="typ">View</span><span class="pun">的</span><span class="typ">Command</span><span class="pun">传送到</span><span class="typ">Model</span><span class="pun">；</span></code></li><li class="L1"><code><span class="pln">            </span><span class="typ">Model</span><span class="pun">：数据访问层</span></code></li></ol></pre>

<h4 id="title-39">22. ES6了解</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">语言语法</span><span class="pln"> </span><span class="pun">–</span><span class="pln"> </span><span class="pun">语法解析规则、关键字、语句、声明、运算符等。</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">类型</span><span class="pln"> </span><span class="pun">–</span><span class="pln"> </span><span class="pun">布尔型、数字、字符串、对象等。</span></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">原型和继承</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">内建对象和函数的标准库</span><span class="pln"> </span><span class="pun">–</span><span class="pln"> JSON</span><span class="pun">、</span><span class="typ">Math</span><span class="pun">、数组方法、对象自省方法等。</span></code></li></ol></pre>

<h4 id="title-40">23. arguments变量</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="lit">1.arguments</span><span class="pun">所有函数中都包含的一个局部变量，是一个类数组对象，对应函数调用时的实参。如果函数定义同名参数会在调用时覆盖默认对象</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">2.arguments</span><span class="pun">[</span><span class="pln">index</span><span class="pun">]分别对应函数调用时的实参，并且通过</span><span class="pln">arguments</span><span class="pun">修改实参时会同时修改实参</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">3.arguments</span><span class="pun">.</span><span class="pln">length</span><span class="pun">为实参的个数（</span><span class="typ">Function</span><span class="pun">.</span><span class="pln">length</span><span class="pun">表示形参长度）</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="lit">4.arguments</span><span class="pun">.</span><span class="pln">callee</span><span class="pun">为当前正在执行的函数本身，使用这个属性进行递归调用时需注意</span><span class="kwd">this</span><span class="pun">的变化</span></code></li><li class="L7"><code><span class="pln">    arguments</span><span class="pun">.</span><span class="kwd">caller</span><span class="pun">为调用当前函数的函数（已被遗弃）</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">转换为数组：</span><span class="kwd">var</span><span class="pln"> args </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Array</span><span class="pun">.</span><span class="pln">prototype</span><span class="pun">.</span><span class="pln">slice</span><span class="pun">.</span><span class="pln">call</span><span class="pun">(</span><span class="pln">arguments</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span></code></li></ol></pre>

<hr>

<h3 id="title-41">计算机网络</h3>

<h4 id="title-42">1. 状态码</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="lit">1XX</span><span class="pun">：信息状态码</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">2XX</span><span class="pun">：成功状态码</span></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">3XX</span><span class="pun">：重定向</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">4XX</span><span class="pun">：客户端错误</span></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">5XX</span><span class="pun">:</span><span class="pln"> </span><span class="pun">服务器错误</span></code></li></ol></pre>

<p>常见具体状态码：</p>

<table>
<thead>
<tr>
  <th>状态码</th>
  <th>含义</th>
</tr>
</thead>
<tbody><tr>
  <td>100 Continue</td>
  <td>客户端应当继续发送请求。</td>
</tr>
<tr>
  <td>200 OK：</td>
  <td>请求成功，请求所希望的响应头或数据体将随此响应返回</td>
</tr>
<tr>
  <td>202 Accepted</td>
  <td>客户端应当继续发送请求。</td>
</tr>
<tr>
  <td>301 Moved Permanently</td>
  <td>永久移除</td>
</tr>
<tr>
  <td>304 Not Modified(还是要访问服务器)</td>
  <td>客户端有缓冲的文档并发出了一个条件性的请求</td>
</tr>
<tr>
  <td>400 Bad Request</td>
  <td>服务器未能理解请求</td>
</tr>
<tr>
  <td>401 Unauthorized</td>
  <td>被请求的页面需要用户名和密码</td>
</tr>
<tr>
  <td>403 Forbidden</td>
  <td>对被请求页面的访问被禁止。</td>
</tr>
<tr>
  <td>500 Internal Server Error</td>
  <td>请求未完成。服务器遇到不可预知的情况。</td>
</tr>
<tr>
  <td>502 Bad Gateway</td>
  <td>请求未完成。服务器从上游服务器收到一个无效的</td>
</tr>
<tr>
  <td>504 Gateway Timeout</td>
  <td>网关超时。</td>
</tr>
</tbody></table>


<h4 id="title-43">2. 浏览器访问页面发生了什么－详述</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">第一步，解析域名，找到主机</span><span class="pln">IP</span><span class="pun">：</span></code></li><li class="L1"><code><span class="pln">        </span><span class="lit">1</span><span class="pun">).</span><span class="pln"> </span><span class="pun">浏览器会缓存</span><span class="pln">DNS</span><span class="pun">一段时间，一般</span><span class="lit">2</span><span class="pun">-</span><span class="lit">30</span><span class="pun">分钟不等。如果有缓存，直接返回</span><span class="pln">IP</span><span class="pun">，否则下一步。</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">        </span><span class="lit">2</span><span class="pun">).</span><span class="pln"> </span><span class="pun">缓存中无法找到</span><span class="pln">IP</span><span class="pun">，浏览器会进行一个系统调用，查询</span><span class="pln">hosts</span><span class="pun">文件。如果找到，直接返回</span><span class="pln">IP</span><span class="pun">，否则下一步。（在计算机本地目录</span><span class="pln">etc</span><span class="pun">下有一个</span><span class="pln">hosts</span><span class="pun">文件，</span><span class="pln">hosts</span><span class="pun">文件中保存有域名与</span><span class="pln">IP</span><span class="pun">的对应解析，通常也可以修改</span><span class="pln">hosts</span><span class="pun">科学上网或破解软件。）</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">        </span><span class="lit">3</span><span class="pun">).</span><span class="pln"> </span><span class="pun">进行了（</span><span class="lit">1</span><span class="pun">）（</span><span class="lit">2</span><span class="pun">）本地查询无果，只能借助于网络。路由器一般都会有自己的</span><span class="pln">DNS</span><span class="pun">缓存，</span><span class="pln">ISP</span><span class="pun">服务商</span><span class="pln">DNS</span><span class="pun">缓存，这时一般都能够得到相应的</span><span class="pln">IP</span><span class="pun">。如果还是无果，只能借助于</span><span class="pln">DNS</span><span class="pun">递归解析了。</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">        </span><span class="lit">4</span><span class="pun">).</span><span class="pln"> </span><span class="pun">这时，</span><span class="pln">ISP</span><span class="pun">的</span><span class="pln">DNS</span><span class="pun">服务器就会开始从根域名服务器开始递归搜索，从.</span><span class="pln">com</span><span class="pun">顶级域名服务器，到</span><span class="pln">baidu</span><span class="pun">的域名服务器。</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">到这里，浏览器就获得了</span><span class="pln">IP</span><span class="pun">。在</span><span class="pln">DNS</span><span class="pun">解析过程中，常常会解析出不同的</span><span class="pln">IP</span><span class="pun">。比如，电信的是一个</span><span class="pln">IP</span><span class="pun">，网通的是另一个</span><span class="pln">IP</span><span class="pun">。这是采取了智能</span><span class="pln">DNS</span><span class="pun">的结果，降低运营商间访问延时，在多个运营商设置主机房，就近访问主机。电信用户返回电信主机</span><span class="pln">IP</span><span class="pun">，网通用户返回网通主机</span><span class="pln">IP</span><span class="pun">。当然，劫持</span><span class="pln">DNS</span><span class="pun">，也可以屏蔽掉一部分网点的访问，某防火长城也加入了这一特性。</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">第二步，浏览器与网站建立</span><span class="pln">TCP</span><span class="pun">连接：</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">浏览器利用</span><span class="pln">IP</span><span class="pun">直接与网站主机通信。浏览器发出</span><span class="pln">TCP</span><span class="pun">（</span><span class="pln">SYN</span><span class="pun">标志位为</span><span class="lit">1</span><span class="pun">）连接请求，主机返回</span><span class="pln">TCP</span><span class="pun">（</span><span class="pln">SYN</span><span class="pun">，</span><span class="pln">ACK</span><span class="pun">标志位均为</span><span class="lit">1</span><span class="pun">）应答报文，浏览器收到应答报文发现</span><span class="pln">ACK</span><span class="pun">标志位为</span><span class="lit">1</span><span class="pun">，表示连接请求确认。浏览器返回</span><span class="pln">TCP</span><span class="pun">（）确认报文，主机收到确认报文，三次握手，</span><span class="pln">TCP</span><span class="pun">链接建立完成。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">第三部分，浏览器发起</span><span class="pln">GET</span><span class="pun">请求：</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">浏览器向主机发起一个</span><span class="pln">HTTP</span><span class="pun">-</span><span class="pln">GET</span><span class="pun">方法报文请求。请求中包含访问的</span><span class="pln">URL</span><span class="pun">，也就是</span><span class="pln">http</span><span class="pun">:</span><span class="com">//www.baidu.com/ ，还有User-Agent用户浏览器操作系统信息，编码等。值得一提的是Accep-Encoding和Cookies项。Accept-Encoding一般采用gzip，压缩之后传输html文件。Cookies如果是首次访问，会提示服务器建立用户缓存信息，如果不是，可以利用Cookies对应键值，找到相应缓存，缓存里面存放着用户名，密码和一些用户设置项。</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">第四部分，显示页面或返回其他：</span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">返回状态码</span><span class="lit">200</span><span class="pln"> OK</span><span class="pun">，表示服务器可以相应请求，返回报文，由于在报头中</span><span class="typ">Content</span><span class="pun">-</span><span class="pln">type</span><span class="pun">为“</span><span class="pln">text</span><span class="pun">/</span><span class="pln">html</span><span class="pun">”，浏览器以</span><span class="pln">HTML</span><span class="pun">形式呈现，而不是下载文件。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">        </span><span class="pun">但是，对于大型网站存在多个主机站点，往往不会直接返回请求页面，而是重定向。返回的状态码就不是</span><span class="lit">200</span><span class="pln"> OK</span><span class="pun">，而是</span><span class="lit">301</span><span class="pun">,</span><span class="lit">302</span><span class="pun">以</span><span class="lit">3</span><span class="pun">开头的重定向码，浏览器在获取了重定向响应后，在响应报文中</span><span class="typ">Location</span><span class="pun">项找到重定向地址，浏览器重新第一步访问即可。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">补充一点的就是，重定向是为了负载均衡或者导入流量，提高</span><span class="pln">SEO</span><span class="pun">排名。利用一个前端服务器接受请求，然后负载到不同的主机上，可以大大提高站点的业务并发处理能力；重定向也可将多个域名的访问，集中到一个站点；由于</span><span class="pln">baidu</span><span class="pun">.</span><span class="pln">com</span><span class="pun">，</span><span class="pln">www</span><span class="pun">.</span><span class="pln">baidu</span><span class="pun">.</span><span class="pln">com</span><span class="pun">会被搜索引擎认为是两个网站，照成每个的链接数都会减少从而降低排名，永久重定向会将两个地址关联起来，搜索引擎会认为是同一个网站，从而提高排名。</span></code></li></ol></pre>

<h4 id="title-44">3. DNS解析过程详解</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">在浏览器中输入</span><span class="pln">www</span><span class="pun">.</span><span class="pln">example</span><span class="pun">.</span><span class="pln">com</span><span class="pun">域名，操作系统会先检查自己本地的</span><span class="pln">hosts</span><span class="pun">文件是否有这个网址映射关系，如果有，就先调用这个</span><span class="pln">IP</span><span class="pun">地址映射，完成域名解析。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> </span><span class="pun">如果</span><span class="pln">hosts</span><span class="pun">里没有这个域名的映射，则查找本地</span><span class="pln">DNS</span><span class="pun">解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="pun">如果</span><span class="pln">hosts</span><span class="pun">与本地</span><span class="pln">DNS</span><span class="pun">解析器缓存都没有相应的网址映射关系，首先会找</span><span class="pln">TCP</span><span class="pun">/</span><span class="pln">ip</span><span class="pun">参数中设置的首选</span><span class="pln">DNS</span><span class="pun">服务器，在此我们叫它本地</span><span class="pln">DNS</span><span class="pun">服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">如果要查询的域名，不由本地</span><span class="pln">DNS</span><span class="pun">服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个</span><span class="pln">IP</span><span class="pun">地址映射，完成域名解析，此解析不具有权威性。</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="lit">5.</span><span class="pln"> </span><span class="pun">如果本地</span><span class="pln">DNS</span><span class="pun">服务器本地区域文件与缓存解析都失效，则根据本地</span><span class="pln">DNS</span><span class="pun">服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地</span><span class="pln">DNS</span><span class="pun">就把请求发至</span><span class="lit">13</span><span class="pun">组根</span><span class="pln">DNS</span><span class="pun">，根</span><span class="pln">DNS</span><span class="pun">服务器收到请求后会判断这个域名(.</span><span class="pln">com</span><span class="pun">)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个</span><span class="pln">IP</span><span class="pun">。本地</span><span class="pln">DNS</span><span class="pun">服务器收到</span><span class="pln">IP</span><span class="pun">信息后，将会联系负责.</span><span class="pln">com</span><span class="pun">域的这台服务器。这台负责.</span><span class="pln">com</span><span class="pun">域的服务器收到请求后，如果自己无法解析，它就会找一个管理.</span><span class="pln">com</span><span class="pun">域的下一级</span><span class="pln">DNS</span><span class="pun">服务器地址(</span><span class="pln">example</span><span class="pun">.</span><span class="pln">com</span><span class="pun">)给本地</span><span class="pln">DNS</span><span class="pun">服务器。当本地</span><span class="pln">DNS</span><span class="pun">服务器收到这个地址后，就会找</span><span class="pln">example</span><span class="pun">.</span><span class="pln">com</span><span class="pun">域服务器，重复上面的动作，进行查询，直至找到</span><span class="pln">www</span><span class="pun">.</span><span class="pln">example</span><span class="pun">.</span><span class="pln">com</span><span class="pun">主机。</span><span class="pln"> </span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="lit">6.</span><span class="pln"> </span><span class="pun">如果用的是转发模式，此</span><span class="pln">DNS</span><span class="pun">服务器就会把请求转发至上一级</span><span class="pln">DNS</span><span class="pun">服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根</span><span class="pln">DNS</span><span class="pun">或把转请求转至上上级，以此循环。不管是本地</span><span class="pln">DNS</span><span class="pun">服务器用是是转发，还是根提示，最后都是把结果返回给本地</span><span class="pln">DNS</span><span class="pun">服务器，由此</span><span class="pln">DNS</span><span class="pun">服务器再返回给客户机。</span></code></li></ol></pre>

<h4 id="title-45">4. cookie及其操作</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">目前还是很多登陆的方式还是通过</span><span class="pln">cookie</span><span class="pun">的方式来处理的。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    cookie</span><span class="pun">是</span><span class="pln">web</span><span class="pun">浏览器存储的少量数据，最早设计为服务器端使用，作为</span><span class="pln">HTTP</span><span class="pun">协议的扩展实现。</span><span class="pln">cookie</span><span class="pun">数据会自动在浏览器和服务器之间传输。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">通过读写</span><span class="pln">cookie</span><span class="pun">检测是否支持</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    cookie</span><span class="pun">属性有名，值，</span><span class="pln">max</span><span class="pun">-</span><span class="pln">age</span><span class="pun">，</span><span class="pln">path</span><span class="pun">,</span><span class="pln"> domain</span><span class="pun">，</span><span class="pln">secure</span><span class="pun">；</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    cookie</span><span class="pun">默认有效期为浏览器会话，一旦用户关闭浏览器，数据就丢失，通过设置</span><span class="pln">max</span><span class="pun">-</span><span class="pln">age</span><span class="pun">=</span><span class="pln">seconds</span><span class="pun">属性告诉浏览器</span><span class="pln">cookie</span><span class="pun">有效期</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    cookie</span><span class="pun">作用域通过文档源和文档路径来确定，通过</span><span class="pln">path</span><span class="pun">和</span><span class="pln">domain</span><span class="pun">进行配置，</span><span class="pln">web</span><span class="pun">页面同目录或子目录文档都可访问</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">通过</span><span class="pln">cookie</span><span class="pun">保存数据的方法为：为</span><span class="pln">document</span><span class="pun">.</span><span class="pln">cookie</span><span class="pun">设置一个符合目标的字符串如下</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">读取</span><span class="pln">document</span><span class="pun">.</span><span class="pln">cookie</span><span class="pun">获得</span><span class="str">'; '</span><span class="pun">分隔的字符串，</span><span class="pln">key</span><span class="pun">=</span><span class="pln">value</span><span class="pun">,解析得到结果。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">        document</span><span class="pun">.</span><span class="pln">cookie </span><span class="pun">=</span><span class="pln"> </span><span class="str">'name=qiu; max-age=9999; path=/; domain=domain; secure'</span><span class="pun">;</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">        document</span><span class="pun">.</span><span class="pln">cookie </span><span class="pun">=</span><span class="pln"> </span><span class="str">'name=aaa; path=/; domain=domain; secure'</span><span class="pun">;</span></code></li><li class="L9"><code><span class="pln">        </span><span class="com">// 要改变cookie的值，需要使用相同的名字、路径和域，新的值</span></code></li><li class="L0"><code><span class="pln">        </span><span class="com">// 来设置cookie，同样的方法可以用来改变有效期</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">        </span><span class="com">// 设置max-age为0可以删除指定cookie</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">        </span><span class="com">//读取cookie，访问document.cookie返回键值对组成的字符串，</span></code></li><li class="L5"><code><span class="pln">        </span><span class="com">//不同键值对之间用'; '分隔。通过解析获得需要的值</span></code></li></ol></pre>

<h4 id="p-7">5. HTTP请求头了解</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    HTTP</span><span class="pun">请求信息由</span><span class="lit">3</span><span class="pun">部分组成：</span></code></li><li class="L1"><code><span class="pln">       </span><span class="pun">请求方法</span><span class="pln">URI</span><span class="pun">协议/版本</span></code></li><li class="L2"><code><span class="pln">       </span><span class="pun">请求头(</span><span class="typ">Request</span><span class="pln"> </span><span class="typ">Header</span><span class="pun">)</span></code></li><li class="L3"><code><span class="pln">       </span><span class="pun">请求正文</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    date</span><span class="pun">：请求时间</span></code></li><li class="L6"><code><span class="pln">    expires</span><span class="pun">:过期时间</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    referer</span><span class="pun">:关联连接</span></code></li><li class="L9"><code><span class="pln">        </span><span class="typ">Referer</span><span class="pun">可以记录访问的来源，统计访问量，可以用来防盗链。</span></code></li><li class="L0"><code><span class="pln">        </span><span class="pun">利用</span><span class="typ">Referer</span><span class="pun">防止图片盗链</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">但是</span><span class="pln">referer</span><span class="pun">可以被修改</span></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">1.</span><span class="pun">服务器端修改</span><span class="typ">Referer</span><span class="pun">，通过</span><span class="pln">webClient</span><span class="pun">，直接设置访问可以达到修改目的。</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">2.</span><span class="pun">可以使用</span><span class="typ">Fiddler</span><span class="pun">修改</span><span class="typ">Referer</span><span class="pun">。</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="typ">If</span><span class="pun">-</span><span class="pln"> </span><span class="typ">Modified</span><span class="pun">-</span><span class="typ">Since</span><span class="pun">：与客户端缓存相关，如果有，服务器返回</span><span class="lit">304</span></code></li></ol></pre>

<h4 id="p-8">6. TCP 三次握手与四次挥手</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">三次握手：建立一个</span><span class="pln">TCP</span><span class="pun">连接需要“三次握手”</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">第一次握手：客户端发送</span><span class="pln">syn</span><span class="pun">包(</span><span class="pln">syn</span><span class="pun">=</span><span class="pln">x</span><span class="pun">)到服务器，并进入</span><span class="pln">SYN_SEND</span><span class="pun">状态，等待服务器确认；</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">第二次握手：服务器收到</span><span class="pln">syn</span><span class="pun">包，必须确认客户的</span><span class="pln">SYN</span><span class="pun">（</span><span class="pln">ack</span><span class="pun">=</span><span class="pln">x</span><span class="pun">+</span><span class="lit">1</span><span class="pun">），同时自己也发送一个</span><span class="pln">SYN</span><span class="pun">包（</span><span class="pln">syn</span><span class="pun">=</span><span class="pln">y</span><span class="pun">），即</span><span class="pln">SYN</span><span class="pun">+</span><span class="pln">ACK</span><span class="pun">包，此时服务器进入</span><span class="pln">SYN_RECV</span><span class="pun">状态；</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">第三次握手：客户端收到服务器的</span><span class="pln">SYN</span><span class="pun">＋</span><span class="pln">ACK</span><span class="pun">包，向服务器发送确认包</span><span class="pln">ACK</span><span class="pun">(</span><span class="pln">ack</span><span class="pun">=</span><span class="pln">y</span><span class="pun">+</span><span class="lit">1</span><span class="pun">)，此包发送完毕，客户端和服务器进入</span><span class="pln">ESTABLISHED</span><span class="pun">状态，完成三次握手。</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，</span><span class="pln">TCP</span><span class="pun">连接一旦建立，在通信双方中的任何一方主动关闭连接之前，</span><span class="pln">TCP </span><span class="pun">连接都将被一直保持下去。</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">四次挥手：与建立连接的“三次握手”类似，断开一个</span><span class="pln">TCP</span><span class="pun">连接则需要“四次握手”。</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">第一次挥手：主动关闭方发送一个</span><span class="pln">FIN</span><span class="pun">，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不</span><span class="pln"> </span><span class="pun">会再给你发数据了(当然，在</span><span class="pln">fin</span><span class="pun">包之前发送出去的数据，如果没有收到对应的</span><span class="pln">ack</span><span class="pun">确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可</span><span class="pln"> </span><span class="pun">以接受数据。</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">第二次挥手：被动关闭方收到</span><span class="pln">FIN</span><span class="pun">包后，发送一个</span><span class="pln">ACK</span><span class="pun">给对方，确认序号为收到序号+</span><span class="lit">1</span><span class="pun">（与</span><span class="pln">SYN</span><span class="pun">相同，一个</span><span class="pln">FIN</span><span class="pun">占用一个序号）。</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">第三次挥手：被动关闭方发送一个</span><span class="pln">FIN</span><span class="pun">，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">第四次挥手：主动关闭方收到</span><span class="pln">FIN</span><span class="pun">后，发送一个</span><span class="pln">ACK</span><span class="pun">给被动关闭方，确认序号为收到序号+</span><span class="lit">1</span><span class="pun">，至此，完成四次挥手。</span></code></li></ol></pre>

<h4 id="title-46">7. CDN</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    CDN</span><span class="pun">的全称是</span><span class="typ">Content</span><span class="pln"> </span><span class="typ">Delivery</span><span class="pln"> </span><span class="typ">Network</span><span class="pun">，即内容分发网络。</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">构建目的：是使用户可就近取得所需内容，解决</span><span class="pln"> </span><span class="typ">Internet</span><span class="pun">网络拥挤的状况，提高用户访问网站的响应速度。</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    CDN</span><span class="pun">（内容《对象》，分发《方法》，网络《载体》）</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">内容：主要是静态资源，页面，图片，脚本等。</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">分发：（主动）去源站抓取数据和提供用户上传的接口，（被动）缓存设备和软件</span><span class="pln"> </span></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">网络：基础（电信），专营（卫通）</span></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">作用：本地</span><span class="pln">cache</span><span class="pun">加速，镜像服务，远程加速，宽带优化，集群抗攻击</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="typ">Cdn</span><span class="pun">的技术原理</span></code></li><li class="L0"><code><span class="pln">      </span><span class="pun">负载均衡分布，网络传送上利用缓存技术，就近获取资源。</span></code></li><li class="L1"><code><span class="pln">      </span><span class="pun">减少网络中冗余数据的重复传输，使之最小化，将广域传输转为本地或就近访问。互联网上传递的内容，大部分为重复的</span><span class="typ">Web</span><span class="pun">/</span><span class="pln">FTP</span><span class="pun">数据。（</span><span class="typ">Cache</span><span class="pun">服务器具有缓存，优化数据链路性能，大部分为网页对象：（</span><span class="pln">web </span><span class="typ">Page</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">,</span><span class="pln">html </span><span class="pun">等页面文件，图片文件。但要通过简单的认证））</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">      </span><span class="pun">多台</span><span class="typ">Cache</span><span class="pun">加速服务器且分布在不同地域，需要通过有效地机制管理</span><span class="typ">Cache</span><span class="pun">网络，引导用户就近访问，全局负载均衡流量。复制到网络“边缘”，缩小“请求点”与”交互点“。</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">内容发布网络(</span><span class="pln">CDN</span><span class="pun">)是一个经策略性部署的整体系统，包括分布式存储、负载均衡、网络请求的重定向和内容管理４个要件。</span></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">内容服务基于缓存服务器（代理缓存）,离用户只有“一跳”。而（城域网，域内网络快主要是</span><span class="typ">Internet</span><span class="pun">的内容高速缓存到本地，</span><span class="pln">cache</span><span class="pun">放在各</span><span class="pln">POP</span><span class="pun">点上）</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">工作原理：</span><span class="pln">CDN</span><span class="pun">中间添加了</span><span class="typ">Cache</span><span class="pun">层，然后通过接管</span><span class="pln">DNS</span><span class="pun">来引导数据获得源服务器的数据。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">常用的技术手段：高速缓存、镜像服务器。适用于(静态和准动态数据同步)</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">全局负载均衡</span><span class="pln">DNS</span><span class="pun">通过一组预先定义好的策略，将当时最接近用户的节点地址提供给用户，使用户能够得到快速的服务。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">负载均衡设备负责每个节点中各个</span><span class="typ">Cache</span><span class="pun">的负载均衡，保证节点的工作效率；同时，负载均衡设备还负责收集节点与周围环境的信息，保持与全局负载</span><span class="pln">DNS</span><span class="pun">的通信，实现整个系统的负载均衡。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">高速缓存服务器（</span><span class="typ">Cache</span><span class="pun">）负责存储客户网站的大量信息，就像一个靠近用户的网站服务器一样响应本地用户的访问请求。</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">简单地说，内容分发网络是一个经策略性部署的整体系统，包括分布式存储、负载均衡、网络请求的重定向和内容管理</span><span class="lit">4</span><span class="pun">个要求，而内容管理和全局的网络流量管理是</span><span class="pln">CDN</span><span class="pun">的核心所在。通过用户就近性和服务器负载的判断，</span><span class="pln">CDN</span><span class="pun">确保内容以一种极为高效的方式为用户的请求提供服务。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">分发服务系统：最基本的工作单元就是</span><span class="typ">Cache</span><span class="pun">设备，</span><span class="pln">cache</span><span class="pun">（边缘</span><span class="pln">cache</span><span class="pun">）负责直接响应最终用户的访问请求，把缓存在本地的内容快速地提供给用户。同时</span><span class="pln">cache</span><span class="pun">还负责与源站点进行内容同步，把更新的内容以及本地没有的内容从源站点获取并保存在本地。</span><span class="typ">Cache</span><span class="pun">设备的数量、规模、总服务能力是衡量一个</span><span class="pln">CDN</span><span class="pun">系统服务能力的最基本的指标</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">负载均衡系统：主要功能是负责对所有发起服务请求的用户进行访问调度，确定提供给用户的最终实际访问地址。两级调度体系分为全局负载均衡（</span><span class="pln">GSLB</span><span class="pun">）和本地负载均衡（</span><span class="pln">SLB</span><span class="pun">）。</span><span class="pln">GSLB</span><span class="pun">主要根据用户就近性原则，通过对每个服务节点进行“最优”判断，确定向用户提供服务的</span><span class="pln">cache</span><span class="pun">的物理位置。</span><span class="pln">SLB</span><span class="pun">主要负责节点内部的设备负载均衡。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">使用</span><span class="pln">CDN</span><span class="pun">的好处，优点</span></code></li><li class="L5"><code><span class="pln">        </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">不用担心自己网站访客，在任何时间，任何地点，任何网络运营商，都能快速打开网站。</span></code></li><li class="L6"><code><span class="pln">        </span><span class="lit">2.</span><span class="pln"> </span><span class="pun">各种服务器虚拟主机带宽等采购成本，包括后期运维成本都会大大减少。</span></code></li><li class="L7"><code><span class="pln">        </span><span class="lit">3.</span><span class="pln"> </span><span class="pun">给网站直接带来的好处就是：流量，咨询量，客户量，成单量，都会得到大幅度提升。</span></code></li></ol></pre>

<h4 id="p-9">8. HTTPS</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    HTTPS</span><span class="pun">（全称：</span><span class="typ">Hypertext</span><span class="pln"> </span><span class="typ">Transfer</span><span class="pln"> </span><span class="typ">Protocol</span><span class="pln"> over </span><span class="typ">Secure</span><span class="pln"> </span><span class="typ">Socket</span><span class="pln"> </span><span class="typ">Layer</span><span class="pun">），是以安全为目标的</span><span class="pln">HTTP</span><span class="pun">通道，简单讲是</span><span class="pln">HTTP</span><span class="pun">的安全版。即</span><span class="pln">HTTP</span><span class="pun">下加入</span><span class="pln">SSL</span><span class="pun">层，</span><span class="pln">HTTPS</span><span class="pun">的安全基础是</span><span class="pln">SSL</span><span class="pun">，因此加密的详细内容请看</span><span class="pln">SSL</span><span class="pun">。</span></code></li><li class="L1"><code><span class="pln">    SSL</span><span class="pun">的工作原理</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">握手协议（</span><span class="typ">Handshake</span><span class="pln"> protocol</span><span class="pun">）</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">记录协议（</span><span class="typ">Record</span><span class="pln"> protocol</span><span class="pun">）</span></code></li><li class="L4"><code><span class="pln">        </span><span class="pun">警报协议（</span><span class="typ">Alert</span><span class="pln"> protocol</span><span class="pun">）</span></code></li></ol></pre>

<h4 id="p-10">9. HTTP/2.0</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">相比</span><span class="pln">HTTP1</span><span class="pun">.</span><span class="lit">1</span><span class="pun">优点集中在：</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">异步连接多路复用</span></code></li><li class="L2"><code><span class="pln">        HEAD </span><span class="pun">压缩</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">压缩</span><span class="pln">HTTP</span><span class="pun">头；</span></code></li><li class="L4"><code><span class="pln">        </span><span class="pun">服务器推送流（即</span><span class="typ">Server</span><span class="pln"> </span><span class="typ">Push</span><span class="pun">技术）；</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">优先级请求</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">请求/响应管线化；</span></code></li></ol></pre>

<h4 id="title-47">10. cookie 和session 的区别</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="lit">1</span><span class="pun">、</span><span class="pln">cookie</span><span class="pun">数据存放在客户的浏览器上，</span><span class="pln">session</span><span class="pun">数据放在服务器上。</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">2</span><span class="pun">、</span><span class="pln">cookie</span><span class="pun">不是很安全，别人可以分析存放在本地的</span><span class="pln">COOKIE</span><span class="pun">并进行</span><span class="pln">COOKIE</span><span class="pun">欺骗</span></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">3</span><span class="pun">、</span><span class="pln">session</span><span class="pun">会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用</span><span class="pln">COOKIE</span><span class="pun">。</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">4</span><span class="pun">、单个</span><span class="pln">cookie</span><span class="pun">保存的数据不能超过</span><span class="lit">4K</span><span class="pun">，很多浏览器都限制一个站点最多保存</span><span class="lit">20</span><span class="pun">个</span><span class="pln">cookie</span><span class="pun">。</span></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">5</span><span class="pun">、所以个人建议：</span></code></li><li class="L5"><code><span class="pln">       </span><span class="pun">将登陆信息等重要信息存放为</span><span class="pln">SESSION</span></code></li><li class="L6"><code><span class="pln">       </span><span class="pun">其他信息如果需要保留，可以放在</span><span class="pln">COOKIE</span><span class="pun">中</span></code></li></ol></pre>

<h4 id="title-48">11. 网络七层模型</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">物理层：通过媒介传输比特,确定机械及电气规范（比特</span><span class="typ">Bit</span><span class="pun">）</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">数据链路层：将比特组装成帧和点到点的传递（帧</span><span class="typ">Frame</span><span class="pun">）</span></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">网络层：负责数据包从源到宿的传递和网际互连（包</span><span class="typ">PackeT</span><span class="pun">）</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">传输层：提供端到端的可靠报文传递和错误恢复（段</span><span class="typ">Segment</span><span class="pun">）</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">会话层：建立、管理和终止会话（会话协议数据单元</span><span class="pln">SPDU</span><span class="pun">）</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">表示层：对数据进行翻译、加密和压缩（表示协议数据单元</span><span class="pln">PPDU</span><span class="pun">）</span></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">应用层：允许访问</span><span class="pln">OSI</span><span class="pun">环境的手段（应用协议数据单元</span><span class="pln">APDU</span><span class="pun">）</span></code></li></ol></pre>

<hr>

<h3 id="title-49">前端性能</h3>

<h4 id="title-50">1. 优化原则概览</h4>

<p>雅虎14条优化原则，《高性能网站建设指南》以及《高性能网站建设进阶指南》中提到的优化点做一次梳理，按照优化方向分类，可以得到这样一张表格。</p>

<table>
<thead>
<tr>
  <th>优化方向</th>
  <th>优化手段</th>
</tr>
</thead>
<tbody><tr>
  <td>请求数量</td>
  <td>合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域</td>
</tr>
<tr>
  <td>请求带宽</td>
  <td>开启GZip，精简JavaScript，移除重复脚本，图像优化</td>
</tr>
<tr>
  <td>缓存利用</td>
  <td>使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存</td>
</tr>
<tr>
  <td>页面结构</td>
  <td>将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出</td>
</tr>
<tr>
  <td>代码校验</td>
  <td>代码校验</td>
</tr>
</tbody></table>


<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">静态资源版本更新与缓存</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">虽然我们处理文件缓存的问题，但是要试想一下如果文件修改了。客户端应该怎么解决？</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">最有效的解决方案是修改其所有链接，这样，全新的请求将从原始服务器下载最新的内容。修改其所有链接？</span><span class="pln"> </span><span class="pun">对，可以使用版本控制。静态资源文件版本更新是“覆盖式”的，</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">script type</span><span class="pun">=</span><span class="str">"text/javascript"</span><span class="pln"> src</span><span class="pun">=</span><span class="str">"a.js?v=0.0.1"</span><span class="pun">&gt;&lt;/</span><span class="pln">script</span><span class="pun">&gt;</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">但是如果通过这样叠加版本号(</span><span class="pln">v</span><span class="pun">)的方式，如果发布两版面临的问题。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="lit">1</span><span class="pun">）.如果先覆盖</span><span class="pln">index</span><span class="pun">.</span><span class="pln">html</span><span class="pun">，后覆盖</span><span class="pln">a</span><span class="pun">.</span><span class="pln">js</span><span class="pun">，用户在这个时间间隙访问，会得到新的</span><span class="pln">index</span><span class="pun">.</span><span class="pln">html</span><span class="pun">配合旧的</span><span class="pln">a</span><span class="pun">.</span><span class="pln">js</span><span class="pun">的情况，从而出现错误的页面。</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">2</span><span class="pun">）.如果先覆盖</span><span class="pln">a</span><span class="pun">.</span><span class="pln">js</span><span class="pun">，后覆盖</span><span class="pln">index</span><span class="pun">.</span><span class="pln">html</span><span class="pun">，用户在这个间隙访问，会得到旧的</span><span class="pln">index</span><span class="pun">.</span><span class="pln">html</span><span class="pun">配合新的</span><span class="pln">a</span><span class="pun">.</span><span class="pln">js</span><span class="pun">的情况，从而也出现了错误的页面。</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">基于文件内容的</span><span class="pln">hash</span><span class="pun">版本冗余机制。</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">工程师写法：</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">script src</span><span class="pun">=</span><span class="str">"a.js"</span><span class="pun">&gt;&lt;/</span><span class="pln">script</span><span class="pun">&gt;&gt;</span></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">线上代码：</span><span class="pln">   </span><span class="pun">&lt;</span><span class="pln">script scr</span><span class="pun">=</span><span class="str">"a_844583j.js"</span><span class="pun">&gt;&lt;/</span><span class="pln">script</span><span class="pun">&gt;</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">后面的</span><span class="pln">hash</span><span class="pun">值是通过</span><span class="pln">a</span><span class="pun">.</span><span class="pln">js</span><span class="pun">的文件内容</span><span class="pln">hash</span><span class="pun">运算得到。类似</span><span class="pln">github</span><span class="pun">的版本控制</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">好处：</span></code></li><li class="L1"><code><span class="pln">        </span><span class="lit">1</span><span class="pun">）.线上的</span><span class="pln">a</span><span class="pun">.</span><span class="pln">js</span><span class="pun">不是同名文件覆盖，而是文件名+</span><span class="pln">hash</span><span class="pun">的冗余，所以可以先上线静态资源，再上线</span><span class="pln">html</span><span class="pun">页面，不存在间隙问题；</span></code></li><li class="L2"><code><span class="pln">        </span><span class="lit">2</span><span class="pun">）.遇到问题回滚版本的时候，无需回滚</span><span class="pln">a</span><span class="pun">.</span><span class="pln">js</span><span class="pun">，只须回滚页面即可；</span></code></li><li class="L3"><code><span class="pln">        </span><span class="lit">3</span><span class="pun">）.由于静态资源版本号是文件内容的</span><span class="pln">hash</span><span class="pun">，因此所有静态资源可以开启永久强缓存，只有更新了内容的文件才会缓存失效，缓存利用率大增；</span></code></li><li class="L4"><code><span class="pln">        </span><span class="lit">4</span><span class="pun">）.修改静态资源后会在线上产生新的文件，一个文件对应一个版本，因此不会受到构造</span><span class="pln">CDN</span><span class="pun">缓存形式的攻击</span></code></li></ol></pre>

<p>其中由于移动端的特殊性，我们需要考虑的性能方面的东西比较多。</p>

<h4 id="title-51">2. 图片懒加载</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">实现大致思路：</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">模版渲染时,不赋值</span><span class="pln">src</span></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">插入</span><span class="pln">DOM</span><span class="pun">树时进行可视区域计算</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">如果图片在可视区内,赋值</span><span class="pln">src</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">如果图片在可视区外,留着</span><span class="pln">scroll </span><span class="pun">处理</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">例子：有很多基于</span><span class="pln">jquery</span><span class="pun">或者</span><span class="pln">zepto</span><span class="pun">来进行开发的，由于项目中依赖了这两个库。</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pun">[基于</span><span class="pln">jquery</span><span class="pun">和</span><span class="pln">zepto</span><span class="pun">的</span><span class="pln">load</span><span class="pun">插件](</span><span class="pln">https</span><span class="pun">:</span><span class="com">//github.com/jieyou/lazyload/blob/master/lazyload.js)</span></code></li></ol></pre>

<h4 id="title-52">3. 图片预加载</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">实现预载的方法非常多，可以用</span><span class="pln">CSS</span><span class="pun">(</span><span class="pln">background</span><span class="pun">)、</span><span class="pln">JS</span><span class="pun">(</span><span class="typ">Image</span><span class="pun">)、</span><span class="pln">HTML</span><span class="pun">(&lt;</span><span class="pln">img </span><span class="pun">/&gt;)都可以。常用的是</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Image</span><span class="pun">();，设置其</span><span class="pln">src</span><span class="pun">来实现预载，再使用</span><span class="pln">onload</span><span class="pun">方法回调预载完成事件。只要浏览器把图片下载到本地，同样的</span><span class="pln">src</span><span class="pun">就会使用缓存，这是最基本也是最实用的预载方法。当</span><span class="typ">Image</span><span class="pun">下载完图片头后，会得到宽和高，因此可以在预载前得到图片的大小(方法是用记时器轮循宽高变化)。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pun">常用方式：</span></code></li><li class="L3"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> loadImage</span><span class="pun">(</span><span class="pln">url</span><span class="pun">,</span><span class="pln">callback</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> img </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Image</span><span class="pun">();</span></code></li><li class="L5"><code><span class="pln">        img</span><span class="pun">.</span><span class="pln">src </span><span class="pun">=</span><span class="pln"> url</span><span class="pun">;</span></code></li><li class="L6"><code><span class="pln">        img</span><span class="pun">.</span><span class="pln">onload </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span></code></li><li class="L7"><code><span class="pln">            document</span><span class="pun">.</span><span class="pln">appendChild</span><span class="pun">(</span><span class="pln">img</span><span class="pun">);</span><span class="pln"> </span><span class="com">//添加到document中</span></code></li><li class="L8"><code><span class="pln">            callback</span><span class="pun">.</span><span class="pln">call</span><span class="pun">(</span><span class="pln">img</span><span class="pun">);</span></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L0"><code><span class="pln">     </span><span class="pun">}</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">改进：处理部分浏览器的缓存。提前获取图片大小，</span><span class="typ">Image</span><span class="pun">中有</span><span class="pln">complete</span><span class="pun">但是必须加载完后才能使用。所以使用</span><span class="pln">javascript</span><span class="pun">定时侦测图片的尺寸状态便可得知图片尺寸就绪的状态。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">缺点：由于前期加载资源，所以会增加服务前端的压力</span></code></li></ol></pre>

<h4 id="title-53">4. 域名收敛</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">因为</span><span class="pln">DNS</span><span class="pun">使用</span><span class="pln">UDP</span><span class="pun">不稳定，随时可能丢在保证了域名收敛之后，同样域名下的资源请求将可以完全复用第一次的</span><span class="pln">DNS</span><span class="pun">建连和</span><span class="pln">SSL</span><span class="pun">握手，</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">第一个就是减少</span><span class="pln"> DNS </span><span class="pun">的请求，第二个就是缩短</span><span class="pln"> DNS </span><span class="pun">解析路径。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">第一个就是做域名收敛的主要原因，相比于</span><span class="pln"> PC </span><span class="pun">是对于域名的并发限制，无线上来说对并发的要求会弱很多（一般尽量是第一屏，后面使用懒加载）。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">第二个就是缩短解析路径，这里所说的缩短解析路径其实就说各级的缓存：本机的缓存，</span><span class="typ">LocalDNS</span><span class="pln"> </span><span class="pun">的缓存，不过他们或多或少也不靠谱，尤其是运营商的</span><span class="pln"> </span><span class="typ">LocalDNS</span><span class="pln"> </span><span class="pun">给你劫持一下，篡改一下都是常有的事情，于是这个情况下，就有了</span><span class="pln"> </span><span class="typ">HttpDNS</span><span class="pun">。</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="typ">HttpDNS</span><span class="pln"> </span><span class="pun">是为了解决移动端</span><span class="pln"> DNS </span><span class="pun">解析请求而生的，顺便解决</span><span class="pln"> DNS </span><span class="pun">劫持，合并请求和缓存结果进而提高解析质量。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">而在我们访问网络中</span><span class="pln"> DNS</span><span class="pun">解析过程（域名</span><span class="pln"> </span><span class="pun">--&gt;</span><span class="pln"> </span><span class="pun">运营商（</span><span class="pln">localDNS</span><span class="pun">）—-&gt;</span><span class="pln"> </span><span class="pun">权威</span><span class="pln">DNS</span><span class="pun">）</span></code></li></ol></pre>

<h4 id="title-54">5. DNS预解析</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="tag">&lt;meta</span><span class="pln"> </span><span class="atn">http-equiv</span><span class="pun">=</span><span class="atv">"x-dns-prefetch-control"</span><span class="pln"> </span><span class="atn">content</span><span class="pun">=</span><span class="atv">"on"</span><span class="pln"> </span><span class="tag">/&gt;</span></code></li><li class="L1"><code><span class="pln">    </span><span class="tag">&lt;link</span><span class="pln"> </span><span class="atn">rel</span><span class="pun">=</span><span class="atv">"dns-prefetch"</span><span class="pln"> </span><span class="atn">href</span><span class="pun">=</span><span class="atv">"http://bdimg.share.baidu.com"</span><span class="pln"> </span><span class="tag">/&gt;</span></code></li></ol></pre>

<h4 id="title-55">6. 如何提高移动端性能</h4>

<p><img src="./前端面试题目总结_files/h5-xingnengyouhua.png" alt=" " title=""></p>

<hr>

<h3 id="title-56">Web浏览器安全</h3>

<h4 id="title-57">1. XSS</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    xss</span><span class="pun">(</span><span class="pln">cross site script</span><span class="pun">)跨站脚本攻击通过属性”</span><span class="pln">src</span><span class="pun">”加载来执行代码在获取网站或者网站服务器的部分或者全部权限后，在网页文件中插入一段恶意代码，来实现攻击。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">1.DOM</span><span class="pun">—</span><span class="pln">based XSS</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">该漏洞是基于文档对象模型</span><span class="typ">Document</span><span class="pln"> </span><span class="typ">Objeet</span><span class="pln"> </span><span class="typ">Model</span><span class="pun">,</span><span class="pln">DOM</span><span class="pun">)触发的。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">&lt;</span><span class="pln">div id</span><span class="pun">=</span><span class="str">"print"</span><span class="pun">&gt;&lt;/</span><span class="pln">div</span><span class="pun">&gt;</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="com">//javascript</span></code></li><li class="L9"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> text </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">"print"</span><span class="pun">);</span></code></li><li class="L0"><code><span class="pln">    </span><span class="kwd">print</span><span class="pun">.</span><span class="pln">innerHTML </span><span class="pun">=</span><span class="pln"> text</span><span class="pun">.</span><span class="pln">value</span><span class="pun">;</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">解决方式：</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">*</span><span class="pln"> </span><span class="pun">编码方式</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">        </span><span class="com">//将要转换的字符串设置为这个元素的innerText(ie支持)或者textContent(火狐，google支持)</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">(</span><span class="pln">temp</span><span class="pun">.</span><span class="pln">textContent </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="pun">(</span><span class="pln">temp</span><span class="pun">.</span><span class="pln">textContent </span><span class="pun">=</span><span class="pln"> html</span><span class="pun">)</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">(</span><span class="pln">temp</span><span class="pun">.</span><span class="pln">innerText </span><span class="pun">=</span><span class="pln"> html</span><span class="pun">);</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">        </span><span class="com">//返回这个元素的innerHTML，即得到经过HTML编码转换的字符串了</span></code></li><li class="L0"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> output </span><span class="pun">=</span><span class="pln"> temp</span><span class="pun">.</span><span class="pln">innerHTML</span><span class="pun">;</span></code></li><li class="L1"><code></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">*</span><span class="pln"> </span><span class="pun">解码方式</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">        </span><span class="com">//将要转换的字符串设置为这个元素的innerHTML(ie，火狐，google都支持)</span></code></li><li class="L6"><code><span class="pln">        temp</span><span class="pun">.</span><span class="pln">innerHTML </span><span class="pun">=</span><span class="pln"> text</span><span class="pun">;</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">        </span><span class="com">//返回这个元素的innerText(ie支持)或者textContent(火狐，google支持)，即得到经过HTML解码的字符串了。</span></code></li><li class="L9"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> output </span><span class="pun">=</span><span class="pln"> temp</span><span class="pun">.</span><span class="pln">innerText </span><span class="pun">||</span><span class="pln"> temp</span><span class="pun">.</span><span class="pln">textContent</span><span class="pun">;</span></code></li><li class="L0"><code></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">2.</span><span class="pun">存储型</span><span class="pln">xss</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">即通常我们在录入数据时通过闭合标签的方式把数据存储到数据库中，再次显示的时候触发。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">解决方式：转义标签</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">如：</span></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">&lt;</span><span class="pln">  </span><span class="pun">转义为</span><span class="pln">  </span><span class="pun">&lt;；</span></code></li><li class="L0"><code><span class="pln">        </span><span class="pun">&gt;</span><span class="pln">  </span><span class="pun">转义为</span><span class="pln">  </span><span class="pun">&gt;；</span></code></li><li class="L1"><code></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">3.</span><span class="pun">反射型</span><span class="pln">xss</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">仍然来自于直接的用户输入，是在通过</span><span class="pln">url</span><span class="pun">控制了页面的输出（处理：转义字符）根据浏览器去</span><span class="pln">bypass</span><span class="pun">各种过滤，易用性稍微差一些。但最后在页面中显示出来，并需要用户自己去点击链接才能触发</span><span class="pln">XSS</span><span class="pun">的是反射型</span><span class="pln">XSS</span><span class="pun">。</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">如：</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    http</span><span class="pun">:</span><span class="com">//www.jpl.nasa.gov/about_JPL /maps.cfm?departure=lax%22 %3Cimg%20src=k.png%20onerror=alert(%22XSSed%20by%20sH%22)%20/%3E</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">总结：反射型</span><span class="pln">xss</span><span class="pun">和</span><span class="pln">dom</span><span class="pun">-</span><span class="pln">xss</span><span class="pun">都需要在</span><span class="pln">url</span><span class="pun">加入</span><span class="pln">js</span><span class="pun">代码才能够触发。</span></code></li></ol></pre>

<h4 id="title-58">2. CSRF[cross site request fork]</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">跨站请求伪造,攻击者盗用了你的身份，以你的名义发送恶意请求。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">原理</span></code></li></ol></pre>

<p><img src="./前端面试题目总结_files/2009040916453171.jpg" alt="enter image description here" title=""></p>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">如何防御</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">一般网站有三种防御</span><span class="pln">CSRF</span><span class="pun">攻击的方案。</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">（</span><span class="lit">1</span><span class="pun">）验证</span><span class="pln">token</span><span class="pun">值。</span></code></li><li class="L3"><code><span class="pln">            </span><span class="pun">在每个</span><span class="pln">HTTP</span><span class="pun">请求里附加一部分信息是一个防御</span><span class="pln">CSRF</span><span class="pun">攻击的很好的方法，因为这样可以判断请求是否已经授权。这个“验证</span><span class="pln">token</span><span class="pun">”应该不能轻易的被未登录的用户猜测出来。如果请求里面没有这个验证</span><span class="pln">token</span><span class="pun">或者</span><span class="pln">token</span><span class="pun">不能匹配的话，服务器应该拒绝这个请求。</span></code></li><li class="L4"><code><span class="pln">        </span><span class="pun">（</span><span class="lit">2</span><span class="pun">）验证</span><span class="pln">HTTP</span><span class="pun">头的</span><span class="typ">Referer</span><span class="pun">。</span></code></li><li class="L5"><code><span class="pln">            </span><span class="pun">大多数情况下，当浏览器发起一个</span><span class="pln">HTTP</span><span class="pun">请求，其中的</span><span class="typ">Referer</span><span class="pun">标识了请求是从哪里发起的。如果</span><span class="pln">HTTP</span><span class="pun">头里包含有</span><span class="typ">Referer</span><span class="pun">的时候，我们可以区分请求是同域下还是跨站发起的，因为</span><span class="typ">Referer</span><span class="pun">离标明了发起请求的</span><span class="pln">URL</span><span class="pun">。网站也可以通过判断有问题的请求是否是同域下发起的来防御</span><span class="pln">CSRF</span><span class="pun">攻击。</span></code></li><li class="L6"><code><span class="pln">            </span><span class="pun">缺点：通常</span><span class="typ">Referer</span><span class="pun">会包含有一些敏感信息，可能会侵犯用户的隐私</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">（</span><span class="lit">3</span><span class="pun">）用</span><span class="typ">XMLHttpRequest</span><span class="pun">附加在</span><span class="pln">header</span><span class="pun">里。以上三种方法都在广泛使用，但是他们的效果都不是那么的令人满意。</span></code></li><li class="L8"><code><span class="pln">            </span><span class="pun">在使用这种方法来防御</span><span class="pln">CSRF</span><span class="pun">攻击的时候，网站必须在所有的请求里使用</span><span class="typ">XMLHttpRequest</span><span class="pun">并附加一个自定义头（比如</span><span class="pln">X</span><span class="pun">-</span><span class="typ">Requested</span><span class="pun">-</span><span class="typ">By</span><span class="pun">），并且拒绝所有没有自定义头的的请求。例如，为了防御登陆</span><span class="pln">CSRF</span><span class="pun">的攻击，网站必须通过</span><span class="typ">XMLHttpRequest</span><span class="pun">的方式发送用户的身份验证信息到服务器。在我们的实验里，在服务器接收到的请求里面，大约有</span><span class="lit">99.90</span><span class="pun">–</span><span class="lit">99.99</span><span class="pun">%的请求是含有</span><span class="pln">X</span><span class="pun">-</span><span class="typ">Requested</span><span class="pun">-</span><span class="typ">By</span><span class="pun">头的，这表明这一方法适用于绝大多数的用户。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">推荐：</span><span class="typ">Origin</span><span class="pun">字段</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">修改浏览器在发送</span><span class="pln">POST</span><span class="pun">请求的时候加上一个</span><span class="typ">Origin</span><span class="pun">字段，这个</span><span class="typ">Origin</span><span class="pun">字段主要是用来标识出最初请求是从哪里发起的。如果浏览器不能确定源在哪里，那么在发送的请求里面</span><span class="typ">Origin</span><span class="pun">字段的值就为空。</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">隐私上：方式比</span><span class="typ">Referer</span><span class="pun">更人性化，因为它尊重了用户的隐私</span></code></li></ol></pre>

<h4 id="title-59">3. sql注入</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    sql</span><span class="pun">注入是攻击者把</span><span class="pln">SQL</span><span class="pun">命令插入到</span><span class="typ">Web</span><span class="pun">表单的输入域或页面请求的查询字符串，欺骗服务器执行恶意的</span><span class="pln">SQL</span><span class="pun">命令。在某些表单中，用户输入的内容直接用来构造（或者影响）动态</span><span class="pln">SQL</span><span class="pun">命令，或作为存储过程的输入参数，这类表单特别容易受到</span><span class="pln">SQL</span><span class="pun">注入式攻击。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">需要注意点：</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">        </span><span class="lit">1.</span><span class="pun">永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双</span><span class="str">"-"</span><span class="pun">进行转换等。</span></code></li><li class="L5"><code></code></li><li class="L6"><code><span class="pln">        </span><span class="lit">2.</span><span class="pun">永远不要使用动态拼装</span><span class="pln">SQL</span><span class="pun">，可以使用参数化的</span><span class="pln">SQL</span><span class="pun">或者直接使用存储过程进行数据查询存取。</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">        </span><span class="lit">3.</span><span class="pun">永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">        </span><span class="lit">4.</span><span class="pun">不要把机密信息明文存放，请加密或者</span><span class="pln">hash</span><span class="pun">掉密码和敏感的信息。</span></code></li></ol></pre>

<hr>

<h3 id="title-60">前端工程化</h3>

<p>前端构建工具目的就是为了开始开发。让前端开发真正达到工程化。先明确几个概念。</p>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">包管理工具（</span><span class="kwd">package</span><span class="pln"> manager</span><span class="pun">）：</span><span class="pln">npm</span><span class="pun">、</span><span class="pln">bower</span><span class="pun">、</span><span class="pln">jspm</span><span class="pun">、</span><span class="pln">cnpm </span><span class="pun">等等</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">模块加载器（</span><span class="kwd">module</span><span class="pln"> loader</span><span class="pun">）:</span><span class="pln"> requirejs</span><span class="pun">、</span><span class="pln">modjs</span><span class="pun">、</span><span class="pln">seajs </span><span class="pun">等等，模块加载器又主要遵循</span><span class="pln">AMD</span><span class="pun">、</span><span class="pln">CMD</span><span class="pun">、</span><span class="typ">Commonjs</span><span class="pun">三种规范</span></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">打包工具（</span><span class="pln">bundler</span><span class="pun">）：</span><span class="pln">r</span><span class="pun">.</span><span class="pln">js</span><span class="pun">、</span><span class="pln">browserify</span><span class="pun">、</span><span class="pln">webpack</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">版本仓库：</span><span class="pln"> gitlab</span><span class="pun">,</span><span class="pln">coding</span><span class="pun">,</span><span class="pln">github</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">构建工具：</span><span class="pln">gulp</span><span class="pun">(基于</span><span class="pln">stream</span><span class="pun">的构建工具)、</span><span class="pln">grunt</span></code></li></ol></pre>

<h4 id="p-11">1. gulp</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">      gulp</span><span class="pun">.</span><span class="pln">js </span><span class="pun">是一种基于流的，代码优于配置的新一代构建工具。</span><span class="pln">gulp</span><span class="pun">.</span><span class="pln">js </span><span class="pun">是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。是基于</span><span class="pln"> </span><span class="typ">Node</span><span class="pun">.</span><span class="pln">js </span><span class="pun">构建的,利用</span><span class="pln"> </span><span class="typ">Node</span><span class="pun">.</span><span class="pln">js </span><span class="pun">流的威力,你可以快速构建项目</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    gulp</span><span class="pun">有很多插件－而这些插件就赋予了</span><span class="pln">gulp</span><span class="pun">众多的功能</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">编译</span><span class="typ">Sass</span><span class="pln"> </span><span class="pun">(</span><span class="pln">gulp</span><span class="pun">-</span><span class="pln">ruby</span><span class="pun">-</span><span class="pln">sass</span><span class="pun">)</span></code></li><li class="L4"><code><span class="pln">        </span><span class="typ">Autoprefixer</span><span class="pln"> </span><span class="pun">(</span><span class="pln">gulp</span><span class="pun">-</span><span class="pln">autoprefixer</span><span class="pun">)</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">缩小化(</span><span class="pln">minify</span><span class="pun">)</span><span class="pln">CSS </span><span class="pun">(</span><span class="pln">gulp</span><span class="pun">-</span><span class="pln">minify</span><span class="pun">-</span><span class="pln">css</span><span class="pun">)</span></code></li><li class="L6"><code><span class="pln">        </span><span class="typ">JSHint</span><span class="pln"> </span><span class="pun">(</span><span class="pln">gulp</span><span class="pun">-</span><span class="pln">jshint</span><span class="pun">)</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">拼接</span><span class="pln"> </span><span class="pun">(</span><span class="pln">gulp</span><span class="pun">-</span><span class="pln">concat</span><span class="pun">)</span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">丑化(</span><span class="typ">Uglify</span><span class="pun">)</span><span class="pln"> </span><span class="pun">(</span><span class="pln">gulp</span><span class="pun">-</span><span class="pln">uglify</span><span class="pun">)</span></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">图片压缩</span><span class="pln"> </span><span class="pun">(</span><span class="pln">gulp</span><span class="pun">-</span><span class="pln">imagemin</span><span class="pun">)</span></code></li><li class="L0"><code><span class="pln">        </span><span class="pun">即时重整(</span><span class="typ">LiveReload</span><span class="pun">)</span><span class="pln"> </span><span class="pun">(</span><span class="pln">gulp</span><span class="pun">-</span><span class="pln">livereload</span><span class="pun">)</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">清理档案</span><span class="pln"> </span><span class="pun">(</span><span class="pln">gulp</span><span class="pun">-</span><span class="pln">clean</span><span class="pun">)</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">图片快取，只有更改过得图片会进行压缩</span><span class="pln"> </span><span class="pun">(</span><span class="pln">gulp</span><span class="pun">-</span><span class="pln">cache</span><span class="pun">)</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">更动通知</span><span class="pln"> </span><span class="pun">(</span><span class="pln">gulp</span><span class="pun">-</span><span class="pln">notify</span><span class="pun">)</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">优点：</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">易于使用:</span><span class="pln"> </span><span class="pun">通过代码优于配置的策略，</span><span class="typ">Gulp</span><span class="pln"> </span><span class="pun">让简单的任务简单，复杂的任务可管理。</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">构建快速:利用</span><span class="pln"> </span><span class="typ">Node</span><span class="pun">.</span><span class="pln">js </span><span class="pun">流的威力，你可以快速构建项目并减少频繁的</span><span class="pln"> IO </span><span class="pun">操作。</span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">插件高质:</span><span class="typ">Gulp</span><span class="pln"> </span><span class="pun">严格的插件指南确保插件如你期望的那样简洁高质得工作。</span></code></li></ol></pre>

<h4 id="p-12">2. webpack + tree-shaking</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pun">[</span><span class="pln">webpack</span><span class="pun">是什么](</span><span class="pln">https</span><span class="pun">:</span><span class="com">//github.com/webpack)</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="typ">Webpack</span><span class="pln"> </span><span class="pun">是德国开发者</span><span class="pln"> </span><span class="typ">Tobias</span><span class="pln"> </span><span class="typ">Koppers</span><span class="pln"> </span><span class="pun">开发的模块加载器,在</span><span class="pln"> </span><span class="typ">Webpack</span><span class="pln"> </span><span class="pun">当中,</span><span class="pln"> </span><span class="pun">所有的资源都被当作是模块,</span><span class="pln"> js</span><span class="pun">,</span><span class="pln"> css</span><span class="pun">,</span><span class="pln"> </span><span class="pun">图片等等..因此,</span><span class="pln"> </span><span class="typ">Webpack</span><span class="pln"> </span><span class="pun">当中</span><span class="pln"> js </span><span class="pun">可以引用</span><span class="pln"> css</span><span class="pun">,</span><span class="pln"> css </span><span class="pun">中可以嵌入图片</span><span class="pln"> dataUrl</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="kwd">module</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">        loaders</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></code></li><li class="L6"><code><span class="pln">          </span><span class="pun">{</span><span class="pln"> test</span><span class="pun">:</span><span class="pln"> </span><span class="str">/\.coffee$/</span><span class="pun">,</span><span class="pln"> loader</span><span class="pun">:</span><span class="pln"> </span><span class="str">'coffee-loader'</span><span class="pln"> </span><span class="pun">},</span></code></li><li class="L7"><code><span class="pln">          </span><span class="pun">{</span><span class="pln"> test</span><span class="pun">:</span><span class="pln"> </span><span class="str">/\.js$/</span><span class="pun">,</span><span class="pln"> loader</span><span class="pun">:</span><span class="pln"> </span><span class="str">'jsx-loader?harmony'</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="com">// loaders can take parameters as a querystring</span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">]</span></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">},</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">我理解就是：你在开发的过程中，需要通过</span><span class="pln">AMD</span><span class="pun">、</span><span class="pln">CMD</span><span class="pun">的方式引入其他文件，这时就需要</span><span class="pln">webpack</span><span class="pun">把它们组装起来，里面可以引入图片或者</span><span class="pln">css</span><span class="pun">文件。这样的好处自然就非常明显了，减少请求。</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">特点：</span></code></li><li class="L4"><code><span class="pln">        a</span><span class="pun">)</span><span class="pln"> </span><span class="pun">模块来源广泛，支持包括</span><span class="pln">npm</span><span class="pun">/</span><span class="pln">bower</span><span class="pun">等等的各种主流模块安装／依赖解决方案</span></code></li><li class="L5"><code><span class="pln">        b</span><span class="pun">)</span><span class="pln"> </span><span class="pun">模块规范支持全面，</span><span class="pln">amd</span><span class="pun">/</span><span class="pln">cmd</span><span class="pun">/</span><span class="pln">commonjs</span><span class="pun">/</span><span class="pln">shimming</span><span class="pun">等完全支持</span></code></li><li class="L6"><code><span class="pln">        c</span><span class="pun">)</span><span class="pln"> </span><span class="pun">浏览器端足迹小，移动端友好，却对热加载乃至热替换有很好的支持</span></code></li><li class="L7"><code><span class="pln">        d</span><span class="pun">)</span><span class="pln"> </span><span class="pun">插件机制完善，实现本身实现同样模块化，容易扩展，支持</span><span class="pln">es6</span><span class="pun">，</span><span class="pln">react</span><span class="pun">等</span></code></li><li class="L8"><code><span class="pln">        e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">需要手写配置</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">优点：</span></code></li><li class="L1"><code><span class="pln">        a</span><span class="pun">)</span><span class="pln"> </span><span class="pun">支持主流模块格式（</span><span class="pln">AMD</span><span class="pun">、</span><span class="typ">CommonJs</span><span class="pun">、</span><span class="pln">globals</span><span class="pun">）</span></code></li><li class="L2"><code><span class="pln">        b</span><span class="pun">)</span><span class="pln"> </span><span class="pun">能快速检测有错的模块</span></code></li><li class="L3"><code><span class="pln">        c</span><span class="pun">)</span><span class="pln"> </span><span class="pun">能操作</span><span class="pln">css</span></code></li><li class="L4"><code><span class="pln">        d</span><span class="pun">)</span><span class="pln"> </span><span class="pun">有综合性强的缓存机制（如果你的项目涉及到</span><span class="pln">CDN</span><span class="pun">）</span></code></li><li class="L5"><code><span class="pln">        e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">支持热部署（</span><span class="typ">App</span><span class="pln"> </span><span class="pun">代码请求</span><span class="pln"> HMR </span><span class="pun">运行时应用更新）</span></code></li><li class="L6"><code><span class="pln">        f</span><span class="pun">)</span><span class="pln"> </span><span class="pun">几乎能加载所有的东西（文档有加载的</span><span class="pln">list</span><span class="pun">）</span></code></li><li class="L7"><code></code></li><li class="L8"><code><span class="pln">    tree</span><span class="pun">-</span><span class="pln">shaking</span></code></li><li class="L9"><code><span class="pln">        tree</span><span class="pun">-</span><span class="pln">shaking</span><span class="pun">是</span><span class="typ">RollUP</span><span class="pun">中的一种技术，</span><span class="pln">tree</span><span class="pun">-</span><span class="pln">shaking</span><span class="pun">是下一代前端打包工具(</span><span class="pln">PS</span><span class="pun">:这一代斗没有用好，前端发展太快了)</span></code></li><li class="L0"><code><span class="pln">        </span><span class="pun">通过</span><span class="pln"> tree</span><span class="pun">-</span><span class="pln">shaking </span><span class="pun">打包的结果只包括</span><span class="pln">  </span><span class="com">/*实际用到的 exports*/</span><span class="pun">。</span><span class="typ">Three</span><span class="pun">-</span><span class="pln">shaking </span><span class="pun">的关键在于依赖</span><span class="pln"> ES6 </span><span class="pun">模块的静态结构。“静态结构”意味着在编译时他们是可分解的，而不用执行它们的任何代码，简单理解是</span><span class="pln">ES6</span><span class="pun">导出的部分如果在其它模块没有调用，</span><span class="pln">rollup</span><span class="pun">在输出时会直接把这部分作为死码删除。</span></code></li></ol></pre>

<h4 id="title-61">3. github与Git</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">      </span><span class="typ">Git</span><span class="pun">是一个分布式的版本控制系统,版本控制工具。</span></code></li><li class="L1"><code><span class="pln">      github</span><span class="pun">是一个用</span><span class="pln">git</span><span class="pun">做版本控制的项目托管平台，用来存放仓库(</span><span class="pln">repo</span><span class="pun">)。</span></code></li><li class="L2"><code><span class="pln">      </span><span class="pun">作为前端，开源的世界很美好。</span></code></li></ol></pre>

<h4 id="p-13">4. npm</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    NPM</span><span class="pun">的全称是</span><span class="typ">Node</span><span class="pln"> </span><span class="typ">Package</span><span class="pln"> </span><span class="typ">Manager</span><span class="pln"> </span><span class="pun">，是一个</span><span class="typ">NodeJS</span><span class="pun">包管理和分发工具。</span><span class="pln"> </span><span class="pun">我们在安装很多项目中，有使用</span><span class="pln">npm install</span><span class="pun">就是依赖了很多放在</span><span class="pln">npm</span><span class="pun">上的包。类似</span><span class="pln">java</span><span class="pun">中的</span><span class="pln">jar</span><span class="pun">包。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    NPM</span><span class="pun">是基于</span><span class="pln">couchdb</span><span class="pun">的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">基本信息：</span></code></li><li class="L5"><code><span class="pln">        </span><span class="kwd">package</span><span class="pun">.</span><span class="pln">json</span><span class="pun">：包描述信息，里面的</span><span class="pln">dependencies</span><span class="pun">参数就是</span><span class="pln"> npm install </span><span class="pun">时需要安装的包。应用依赖模块会安装到当前模块的</span><span class="pln">node_modules</span><span class="pun">目录下。</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">        </span><span class="kwd">package</span><span class="pun">版本：常见版本声明形式。</span></code></li></ol></pre>

<hr>

<h3 id="title-62">数据结构</h3>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">数组：掌握</span><span class="pln">javascript</span><span class="pun">数组的所有方法</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">栈：进制转换、括号匹配、汉诺塔问题</span></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">队列：优先队列、循环队列</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">链表：单链表、循环链表、双向链表</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">集合：求并集、交集、差集，判断子集关系</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">字典：存储键值对并查询</span></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">哈希表：解决散列冲突的常用方法</span></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">树：二叉树、二叉搜索树、自平衡二叉树、红黑树</span></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">-</span><span class="pln"> </span><span class="pun">图：深度优先搜索、广度优先搜索</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">具体代码可参考这位大神的：</span><span class="pln"> http</span><span class="pun">:</span><span class="com">//blog.benoitvallon.com/data-structures-in-javascript/data-structures-in-javascript-all-the-code/</span></code></li></ol></pre>

<h4 id="title-63">常用数据结构时间复杂度总结</h4>

<p><img src="./前端面试题目总结_files/big-o.png" alt="常见数据结构复杂度" title="">    </p>

<hr>

<h3 id="title-64">算法</h3>

<h4 id="title-65">1. 常用排序算法复杂度</h4>

<p><img src="./前端面试题目总结_files/Screen+Shot+2014-02-16+at+3.20.47+PM.png" alt="常用算法时间复杂度" title=""></p>

<h4 id="title-66">2. 数组去重</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="com">//方式1</span></code></li><li class="L1"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> diff</span><span class="pun">(</span><span class="pln">array</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">            </span><span class="kwd">var</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{};</span></code></li><li class="L3"><code><span class="pln">            </span><span class="kwd">var</span><span class="pln"> newArray </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span></code></li><li class="L4"><code><span class="pln">            </span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> len </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> len</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">                </span><span class="kwd">if</span><span class="pun">(!</span><span class="pln">result</span><span class="pun">[</span><span class="pln">array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]])</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">                    newArray</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="pln">array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span></code></li><li class="L7"><code><span class="pln">                    result</span><span class="pun">[</span><span class="pln">array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span></code></li><li class="L8"><code><span class="pln">                </span><span class="pun">}</span></code></li><li class="L9"><code><span class="pln">            </span><span class="pun">}</span></code></li><li class="L0"><code><span class="pln">            </span><span class="kwd">return</span><span class="pln"> newArray</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="com">//方式2</span></code></li><li class="L4"><code><span class="pln">    </span><span class="typ">Array</span><span class="pun">.</span><span class="pln">prototype</span><span class="pun">.</span><span class="pln">unique4 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span></code></li><li class="L5"><code><span class="pln">        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">sort</span><span class="pun">();</span></code></li><li class="L6"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> re</span><span class="pun">=[</span><span class="kwd">this</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]];</span></code></li><li class="L7"><code><span class="pln">        </span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">            </span><span class="kwd">if</span><span class="pun">(</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">!==</span><span class="pln"> re</span><span class="pun">[</span><span class="pln">re</span><span class="pun">.</span><span class="pln">length</span><span class="pun">-</span><span class="lit">1</span><span class="pun">])</span></code></li><li class="L0"><code><span class="pln">            </span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">                re</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span></code></li><li class="L2"><code><span class="pln">            </span><span class="pun">}</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code><span class="pln">        </span><span class="kwd">return</span><span class="pln"> re</span><span class="pun">;</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">}</span></code></li></ol></pre>

<h4 id="title-67">2. js实现常规排序</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pun">代码还是要有健壮性，下面只实现了功能，没有进行错误检测</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="com">//线性查找-时间复杂度O(n)</span></code></li><li class="L3"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> linearSearch</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">,</span><span class="pln"> x</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> arr</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">arr</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> x</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code><span class="pln">                </span><span class="kwd">return</span><span class="pln"> i</span><span class="pun">;</span></code></li><li class="L7"><code><span class="pln">            </span><span class="pun">}</span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L9"><code><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span></code></li><li class="L0"><code><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="com">//冒泡排序</span></code></li><li class="L3"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> bubbleSort</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> arr</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">            </span><span class="kwd">var</span><span class="pln"> sorted </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span></code></li><li class="L6"><code><span class="pln">        </span><span class="com">//注意：内循环是倒着来的</span></code></li><li class="L7"><code><span class="pln">            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> arr</span><span class="pun">.</span><span class="pln">length </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&gt;</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">--)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">arr</span><span class="pun">[</span><span class="pln">j</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> arr</span><span class="pun">[</span><span class="pln">j </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">])</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">                    swap</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">,</span><span class="pln"> j </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L0"><code><span class="pln">                    sorted </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">                </span><span class="pun">}</span></code></li><li class="L2"><code><span class="pln">            </span><span class="pun">}</span></code></li><li class="L3"><code><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">sorted</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">                </span><span class="kwd">return</span><span class="pun">;</span></code></li><li class="L5"><code><span class="pln">            </span><span class="pun">}</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="com">//选择排序</span></code></li><li class="L0"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> selectionSort</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> arr</span><span class="pun">.</span><span class="pln">length </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">            </span><span class="kwd">var</span><span class="pln"> k </span><span class="pun">=</span><span class="pln"> i</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> i </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> arr</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">arr</span><span class="pun">[</span><span class="pln">j</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> arr</span><span class="pun">[</span><span class="pln">k</span><span class="pun">])</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">                    k </span><span class="pun">=</span><span class="pln"> j</span><span class="pun">;</span></code></li><li class="L6"><code><span class="pln">                </span><span class="pun">}</span></code></li><li class="L7"><code><span class="pln">            </span><span class="pun">}</span></code></li><li class="L8"><code><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">k </span><span class="pun">!=</span><span class="pln"> i</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">                </span><span class="kwd">var</span><span class="pln"> t </span><span class="pun">=</span><span class="pln"> arr</span><span class="pun">[</span><span class="pln">k</span><span class="pun">];</span></code></li><li class="L0"><code><span class="pln">                arr</span><span class="pun">[</span><span class="pln">k</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> arr</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span></code></li><li class="L1"><code><span class="pln">                arr</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> t</span><span class="pun">;</span></code></li><li class="L2"><code><span class="pln">            </span><span class="pun">}</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code><span class="pln">        </span><span class="kwd">return</span><span class="pln"> arr</span><span class="pun">;</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pun">快速排序[阮一峰实现](</span><span class="pln">http</span><span class="pun">:</span><span class="com">//www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html)</span></code></li><li class="L8"><code><span class="pln">    </span><span class="com">//快速排序－阮一峰实现，比传统容易理解</span></code></li><li class="L9"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> quickSort </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code><span class="pln">    　　</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">arr</span><span class="pun">.</span><span class="pln">length </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> arr</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></code></li><li class="L1"><code><span class="pln">    　　</span><span class="kwd">var</span><span class="pln"> pivotIndex </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="pln">floor</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">.</span><span class="pln">length </span><span class="pun">/</span><span class="pln"> </span><span class="lit">2</span><span class="pun">);</span></code></li><li class="L2"><code><span class="pln">    　　</span><span class="kwd">var</span><span class="pln"> pivot </span><span class="pun">=</span><span class="pln"> arr</span><span class="pun">.</span><span class="pln">splice</span><span class="pun">(</span><span class="pln">pivotIndex</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)[</span><span class="lit">0</span><span class="pun">];</span></code></li><li class="L3"><code><span class="pln">    　　</span><span class="kwd">var</span><span class="pln"> left </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span></code></li><li class="L4"><code><span class="pln">    　　</span><span class="kwd">var</span><span class="pln"> right </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span></code></li><li class="L5"><code><span class="pln">    　　</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> arr</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++){</span></code></li><li class="L6"><code><span class="pln">    　　　　</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">arr</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> pivot</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">    　　　　　　left</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span></code></li><li class="L8"><code><span class="pln">    　　　　</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">    　　　　　　right</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span></code></li><li class="L0"><code><span class="pln">    　　　　</span><span class="pun">}</span></code></li><li class="L1"><code><span class="pln">    　　</span><span class="pun">}</span></code></li><li class="L2"><code><span class="pln">    　　</span><span class="kwd">return</span><span class="pln"> quickSort</span><span class="pun">(</span><span class="pln">left</span><span class="pun">).</span><span class="pln">concat</span><span class="pun">([</span><span class="pln">pivot</span><span class="pun">],</span><span class="pln"> quickSort</span><span class="pun">(</span><span class="pln">right</span><span class="pun">));</span></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">};</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="com">// 方法二</span></code></li><li class="L6"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> quickSort</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> left</span><span class="pun">,</span><span class="pln"> right</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Object</span><span class="pun">.</span><span class="pln">prototype</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">.</span><span class="pln">call</span><span class="pun">(</span><span class="pln">array</span><span class="pun">).</span><span class="pln">slice</span><span class="pun">(</span><span class="lit">8</span><span class="pun">,</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">===</span><span class="pln"> </span><span class="str">'Array'</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="kwd">typeof</span><span class="pln"> left </span><span class="pun">===</span><span class="pln"> </span><span class="str">'number'</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="kwd">typeof</span><span class="pln"> right </span><span class="pun">===</span><span class="pln"> </span><span class="str">'number'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">left </span><span class="pun">&lt;</span><span class="pln"> right</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">                </span><span class="kwd">var</span><span class="pln"> x </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">right</span><span class="pun">],</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> left </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> temp</span><span class="pun">;</span></code></li><li class="L0"><code><span class="pln">                </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> left</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;=</span><span class="pln"> right</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">                    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">array</span><span class="pun">[</span><span class="pln">j</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;=</span><span class="pln"> x</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">                        i</span><span class="pun">++;</span></code></li><li class="L3"><code><span class="pln">                        temp </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span></code></li><li class="L4"><code><span class="pln">                        array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">j</span><span class="pun">];</span></code></li><li class="L5"><code><span class="pln">                        array</span><span class="pun">[</span><span class="pln">j</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> temp</span><span class="pun">;</span></code></li><li class="L6"><code><span class="pln">                    </span><span class="pun">}</span></code></li><li class="L7"><code><span class="pln">                </span><span class="pun">}</span></code></li><li class="L8"><code><span class="pln">                quickSort</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> left</span><span class="pun">,</span><span class="pln"> i </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L9"><code><span class="pln">                quickSort</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> i </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> right</span><span class="pun">);</span></code></li><li class="L0"><code><span class="pln">            </span><span class="pun">};</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">            </span><span class="kwd">return</span><span class="pln"> </span><span class="str">'array is not an Array or left or right is not a number!'</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> aaa </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">];</span></code></li><li class="L6"><code><span class="pln">    quickSort</span><span class="pun">(</span><span class="pln">aaa</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> aaa</span><span class="pun">.</span><span class="pln">length </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L7"><code><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">aaa</span><span class="pun">);</span></code></li><li class="L8"><code></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pln">    </span><span class="com">//归并排序</span></code></li><li class="L1"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> mergeSort</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> p</span><span class="pun">,</span><span class="pln"> r</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">p </span><span class="pun">&lt;</span><span class="pln"> r</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code><span class="pln">            </span><span class="kwd">var</span><span class="pln"> q </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="pln">floor</span><span class="pun">((</span><span class="pln">p </span><span class="pun">+</span><span class="pln"> r</span><span class="pun">)</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">2</span><span class="pun">);</span></code></li><li class="L4"><code><span class="pln">            mergeSort</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> p</span><span class="pun">,</span><span class="pln"> q</span><span class="pun">);</span></code></li><li class="L5"><code><span class="pln">            mergeSort</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> q </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> r</span><span class="pun">);</span></code></li><li class="L6"><code><span class="pln">            merge</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> p</span><span class="pun">,</span><span class="pln"> q</span><span class="pun">,</span><span class="pln"> r</span><span class="pun">);</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> merge</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> p</span><span class="pun">,</span><span class="pln"> q</span><span class="pun">,</span><span class="pln"> r</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code><span class="pln">        </span><span class="kwd">var</span><span class="pln"> n1 </span><span class="pun">=</span><span class="pln"> q </span><span class="pun">-</span><span class="pln"> p </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> n2 </span><span class="pun">=</span><span class="pln"> r </span><span class="pun">-</span><span class="pln"> q</span><span class="pun">,</span><span class="pln"> left </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[],</span><span class="pln"> right </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[],</span><span class="pln"> m </span><span class="pun">=</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L1"><code><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> n1</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">            left</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">p </span><span class="pun">+</span><span class="pln"> i</span><span class="pun">];</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> n2</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code><span class="pln">            right</span><span class="pun">[</span><span class="pln">j</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">q </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> j</span><span class="pun">];</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code><span class="pln">        left</span><span class="pun">[</span><span class="pln">n1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> right</span><span class="pun">[</span><span class="pln">n2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Number</span><span class="pun">.</span><span class="pln">MAX_VALUE</span><span class="pun">;</span></code></li><li class="L8"><code><span class="pln">        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> k </span><span class="pun">=</span><span class="pln"> p</span><span class="pun">;</span><span class="pln"> k </span><span class="pun">&lt;=</span><span class="pln"> r</span><span class="pun">;</span><span class="pln"> k</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">left</span><span class="pun">[</span><span class="pln">m</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;=</span><span class="pln"> right</span><span class="pun">[</span><span class="pln">n</span><span class="pun">])</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code><span class="pln">                array</span><span class="pun">[</span><span class="pln">k</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> left</span><span class="pun">[</span><span class="pln">m</span><span class="pun">];</span></code></li><li class="L1"><code><span class="pln">                m</span><span class="pun">++;</span></code></li><li class="L2"><code><span class="pln">            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code><span class="pln">                array</span><span class="pun">[</span><span class="pln">k</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> right</span><span class="pun">[</span><span class="pln">n</span><span class="pun">];</span></code></li><li class="L4"><code><span class="pln">                n</span><span class="pun">++;</span></code></li><li class="L5"><code><span class="pln">            </span><span class="pun">}</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">}</span></code></li></ol></pre>

<h4 id="title-68">3. 递归 factorial</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="kwd">function</span><span class="pln"> factorial</span><span class="pun">(</span><span class="pln">n</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">n </span><span class="pun">===</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code><span class="pln">            </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code><span class="pln">            </span><span class="kwd">return</span><span class="pln"> n </span><span class="pun">*</span><span class="pln"> factorial</span><span class="pun">(</span><span class="pln">n </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">}</span></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">}</span></code></li></ol></pre>

<h4 id="title-69">4. 数组常用方法</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">ES5</span><span class="pun">中添加了很多数组的方法，要熟练掌握。</span></code></li><li class="L1"><code><span class="pun">创建数组：</span></code></li><li class="L2"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> array1 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Array</span><span class="pun">();</span><span class="pln">  </span><span class="com">//数组构造方法</span></code></li><li class="L3"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> array2 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span><span class="pln">   </span><span class="com">//对象字面量（推荐）</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pun">数组检测：</span></code></li><li class="L6"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> arr </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span></code></li><li class="L7"><code><span class="pln">    </span><span class="typ">Array</span><span class="pun">.</span><span class="pln">isArray</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">);</span><span class="pln">     </span><span class="com">//true,数组自带方法</span></code></li><li class="L8"><code><span class="pln">    array </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">Array</span><span class="pun">;</span><span class="pln">   </span><span class="com">//true</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pun">数组排序和翻转，注意排序是按照对应字符串逐个编码排序的：</span></code></li><li class="L1"><code><span class="pln">     </span><span class="kwd">var</span><span class="pln"> arr2 </span><span class="pun">=</span><span class="pln">  </span><span class="pun">[</span><span class="lit">21</span><span class="pun">,</span><span class="lit">14</span><span class="pun">,</span><span class="lit">54</span><span class="pun">,</span><span class="lit">35</span><span class="pun">,</span><span class="lit">23</span><span class="pun">,</span><span class="lit">44</span><span class="pun">,</span><span class="lit">103</span><span class="pun">];</span></code></li><li class="L2"><code><span class="pln">     arr2</span><span class="pun">.</span><span class="pln">reverse</span><span class="pun">();</span><span class="com">//[103, 44, 23, 35, 54, 14, 21]</span></code></li><li class="L3"><code><span class="pln">     arr2</span><span class="pun">.</span><span class="pln">sort</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">a</span><span class="pun">,</span><span class="pln">b</span><span class="pun">){</span><span class="kwd">return</span><span class="pln"> a </span><span class="pun">-</span><span class="pln"> b</span><span class="pun">;});</span><span class="pln"> </span><span class="com">//[14, 21, 23, 35, 44, 54, 103]</span></code></li></ol></pre>

<table>
<thead>
<tr>
  <th align="center">方法</th>
  <th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">concat()</td>
  <td align="center">连接两个或更多的数组，并返回结果。</td>
</tr>
<tr>
  <td align="center">slice()</td>
  <td align="center">选取数组的的一部分，并返回一个新数组。</td>
</tr>
<tr>
  <td align="center">splice()</td>
  <td align="center">从数组中添加或删除元素。</td>
</tr>
<tr>
  <td align="center">indexOf()</td>
  <td align="center">搜索数组中的元素，并返回它所在的位置。</td>
</tr>
</tbody></table>


<h4 id="title-70">5. string方法</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">a</span><span class="pun">).</span><span class="pln">substr</span><span class="pun">()与</span><span class="pln">substring</span><span class="pun">()区别</span></code></li><li class="L1"><code><span class="pln">    substring</span><span class="pun">(</span><span class="pln">start</span><span class="pun">,</span><span class="kwd">end</span><span class="pun">)</span><span class="pln">  </span><span class="pun">开始和结束的位置，从零开始的索引</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    substr</span><span class="pun">(</span><span class="pln">start </span><span class="pun">[,</span><span class="pln"> length </span><span class="pun">])</span><span class="pln"> substr </span><span class="pun">方法用于返回一个从指定位置开始的指定长度的子字符串。</span></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">如果</span><span class="pln">start</span><span class="pun">为负数，则</span><span class="pln">start</span><span class="pun">=</span><span class="pln">str</span><span class="pun">.</span><span class="pln">length</span><span class="pun">+</span><span class="pln">start</span><span class="pun">。</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">如果</span><span class="pln"> length </span><span class="pun">为</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">或负数，将返回一个空字符串。</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> str </span><span class="pun">=</span><span class="pln"> </span><span class="str">"0123456789"</span><span class="pun">;</span></code></li><li class="L8"><code><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">str</span><span class="pun">.</span><span class="pln">substring</span><span class="pun">(</span><span class="lit">5</span><span class="pun">));</span><span class="pln"> </span><span class="pun">--&gt;</span><span class="pln"> </span><span class="str">"56789"</span></code></li><li class="L9"><code><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">str</span><span class="pun">.</span><span class="pln">substring</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="lit">5</span><span class="pun">));</span><span class="pln"> </span><span class="pun">--&gt;</span><span class="pln"> </span><span class="str">"01234"</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">str</span><span class="pun">.</span><span class="pln">substr</span><span class="pun">(-</span><span class="lit">5</span><span class="pun">));</span><span class="pln">  </span><span class="pun">--&gt;</span><span class="pln"> </span><span class="str">"56789"</span></code></li><li class="L2"><code><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">str</span><span class="pun">.</span><span class="pln">substr</span><span class="pun">(</span><span class="lit">2</span><span class="pun">,</span><span class="lit">2</span><span class="pun">));</span><span class="pln"> </span><span class="pun">--&gt;</span><span class="pln"> </span><span class="str">"23"</span></code></li><li class="L3"><code><span class="pln">toString</span><span class="pun">()</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pun">其他，</span><span class="pln">javasc</span><span class="pun">中关于</span><span class="typ">String</span><span class="pun">对象的方法要熟练掌握。</span></code></li></ol></pre>

<hr>

<h3 id="title-71">操作系统</h3>

<h4 id="title-72">1. 堆和栈的区别</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">栈中存放的数据类型有：局部变量、操作数、动态连接、返回地址</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">堆同时也是被所有线程所共享。存放对象实例，几乎所有的对象实例以及数组都要在这里分配内存。被</span><span class="pln">GC</span><span class="pun">（</span><span class="typ">Garbage</span><span class="pln"> </span><span class="typ">Colletor</span><span class="pun">）管理。可以自动回收</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">1</span><span class="pun">、内存分配方面：</span></code></li><li class="L4"><code><span class="pln">        </span><span class="pun">堆：一般由程序员分配释放，并指明大小。</span><span class="pln">  </span><span class="pun">若程序员不释放，程序结束时可能由</span><span class="pln">OS</span><span class="pun">回收</span><span class="pln"> </span><span class="pun">。和数据结构不同，分配方式是类似于链表。可能用到的关键字如下：</span><span class="kwd">new</span><span class="pun">、</span><span class="pln">malloc</span><span class="pun">、</span><span class="kwd">delete</span><span class="pun">、</span><span class="pln">free</span><span class="pun">等等。</span></code></li><li class="L5"><code><span class="pln">        </span><span class="pun">栈：由编译器(</span><span class="typ">Compiler</span><span class="pun">)自动分配释放，存放函数的参数值，局部变量的值等。</span></code></li><li class="L6"><code></code></li><li class="L7"><code><span class="pln">    </span><span class="lit">2.</span><span class="pun">系统响应</span></code></li><li class="L8"><code><span class="pln">        </span><span class="pun">堆：操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序</span></code></li><li class="L9"><code><span class="pln">        </span><span class="pun">栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">3.</span><span class="pun">大小限制</span></code></li><li class="L2"><code><span class="pln">        </span><span class="pun">堆：是向高地址扩展的数据结构，由于链表，所以是不连续的内存区域。堆的大小受限于计算机系统中有效的虚拟内存。</span></code></li><li class="L3"><code><span class="pln">        </span><span class="pun">栈：在</span><span class="typ">Windows</span><span class="pun">下,</span><span class="pln"> </span><span class="pun">栈是向低地址扩展的数据结构，是一块连续的内存的区域。</span><span class="pln">WINDOWS</span><span class="pun">下，栈的大小是固定的（是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示</span><span class="pln">overflow</span><span class="pun">。</span></code></li><li class="L4"><code></code></li><li class="L5"><code><span class="pln">    </span><span class="lit">4.</span><span class="pun">效率方面</span></code></li><li class="L6"><code><span class="pln">        </span><span class="pun">堆：是由</span><span class="kwd">new</span><span class="pun">分配的内存，一般速度比较慢，而且容易产生内存碎片</span></code></li><li class="L7"><code><span class="pln">        </span><span class="pun">栈：由系统自动分配，速度较快。但程序员是无法控制的。</span></code></li><li class="L8"><code></code></li><li class="L9"><code><span class="pln">    </span><span class="lit">5.</span><span class="pun">存取效率</span></code></li><li class="L0"><code><span class="pln">        </span><span class="pun">堆：</span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">s1 </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Hellow Word"</span><span class="pun">；是在编译时就确定的；</span></code></li><li class="L1"><code><span class="pln">        </span><span class="pun">栈：</span><span class="kwd">char</span><span class="pln"> s1</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Hellow Word"</span><span class="pun">；</span><span class="pln"> </span><span class="pun">是在运行时赋值的；用数组比用指针速度要快一些，因为指针在底层汇编中需要用</span><span class="pln">edx</span><span class="pun">寄存器中转一下，而数组在栈上直接读取。</span></code></li></ol></pre>

<h4 id="title-73">2. 什么是死锁？其条件是什么？怎样避免死锁？</h4>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">死锁的概念：在两个或多个并发进程中，如果每个进程持有某种资源而又都等待别的进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗地讲，就是两个或多个进程被无限期地阻塞、相互等待的一种状态。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">死锁产生的原因主要是：？</span><span class="pln"> </span><span class="pun">系统资源不足；？</span><span class="pln"> </span><span class="pun">进程推进顺序非法。</span></code></li><li class="L3"><code></code></li><li class="L4"><code><span class="pln">    </span><span class="pun">产生死锁的必要条件：</span></code></li><li class="L5"><code><span class="pln">    </span><span class="pun">（</span><span class="lit">1</span><span class="pun">）互斥（</span><span class="pln">mutualexclusion</span><span class="pun">），一个资源每次只能被一个进程使用；</span></code></li><li class="L6"><code><span class="pln">    </span><span class="pun">（</span><span class="lit">2</span><span class="pun">）不可抢占（</span><span class="pln">nopreemption</span><span class="pun">），进程已获得的资源，在未使用完之前，不能强行剥夺；</span></code></li><li class="L7"><code><span class="pln">    </span><span class="pun">（</span><span class="lit">3</span><span class="pun">）占有并等待（</span><span class="pln">hold andwait</span><span class="pun">），一个进程因请求资源而阻塞时，对已获得的资源保持不放；</span></code></li><li class="L8"><code><span class="pln">    </span><span class="pun">（</span><span class="lit">4</span><span class="pun">）环形等待（</span><span class="pln">circularwait</span><span class="pun">），若干进程之间形成一种首尾相接的循环等待资源关系。</span></code></li><li class="L9"><code><span class="pln">    </span><span class="pun">这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。</span></code></li><li class="L0"><code></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">死锁的解除与预防：理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和解除死锁。所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确定资源的合理分配算法，避免进程永久占据系统资源。此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</span></code></li><li class="L2"><code></code></li><li class="L3"><code><span class="pln">    </span><span class="pun">死锁的处理策略：鸵鸟策略、预防策略、避免策略、检测与恢复策略。</span></code></li></ol></pre>

<hr>

<h3 id="title-74">Git常用命令</h3>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">    </span><span class="pun">不再列出</span></code></li><li class="L1"><code><span class="pln">    </span><span class="pun">参考导图笔记</span></code></li><li class="L2"><code><span class="pln">    </span><span class="pun">重读《</span><span class="typ">Pro</span><span class="pln"> </span><span class="typ">Git</span><span class="pun">》</span></code></li></ol></pre>

<hr>

<h3 id="title-75">什么是好的前端工程师</h3>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="lit">1.</span><span class="pln">  </span><span class="pun">了解</span><span class="pln">web</span><span class="pun">是如何工作的，确保你知道域名、</span><span class="pln">DNS</span><span class="pun">，</span><span class="pln">URL</span><span class="pun">,</span><span class="pln">HTTP</span><span class="pun">,网络，浏览器，服务器／服务托管，数据库，</span><span class="pln">JSON</span><span class="pun">，</span><span class="pln">API</span><span class="pun">，</span><span class="pln">HTML</span><span class="pun">，</span><span class="pln">CSS</span><span class="pun">，</span><span class="pln">DOM</span><span class="pun">和</span><span class="typ">Javascript</span><span class="pun">，了解这些的目的是确保你知道他们如何一起工作以及每部分的作用，并简单学习本机</span><span class="pln">web</span><span class="pun">应用（</span><span class="pln">SPA</span><span class="pun">）</span></code></li><li class="L1"><code><span class="lit">2.</span><span class="pln">  </span><span class="pun">学习</span><span class="pln">HTML</span><span class="pun">，</span><span class="pln">CSS</span><span class="pun">，可访问性和</span><span class="pln">SEO</span></code></li><li class="L2"><code><span class="lit">3.</span><span class="pln">  </span><span class="pun">学习</span><span class="pln">UI</span><span class="pun">设计模式的基本原理，交互设计，用户体验设计和可用性</span></code></li><li class="L3"><code><span class="lit">4.</span><span class="pln">  </span><span class="pun">学习编程的基本思想</span></code></li><li class="L4"><code><span class="lit">5.</span><span class="pln">  </span><span class="pun">学习</span><span class="typ">Javascript</span></code></li><li class="L5"><code><span class="lit">6.</span><span class="pln">  </span><span class="pun">学习</span><span class="pln">JSON</span><span class="pun">和</span><span class="pln">API</span></code></li><li class="L6"><code><span class="lit">7.</span><span class="pln">  </span><span class="pun">学习</span><span class="pln">CLI</span><span class="pun">/命令行</span></code></li><li class="L7"><code><span class="lit">8.</span><span class="pln">  </span><span class="pun">学习软件工程实践（如：应用设计／构架，模板，</span><span class="typ">Git</span><span class="pun">，测试，监控，自动化，代码质量）</span></code></li><li class="L8"><code><span class="lit">9.</span><span class="pln">  </span><span class="pun">定义自己的工具箱</span></code></li><li class="L9"><code><span class="lit">10.</span><span class="pln"> </span><span class="pun">学习</span><span class="pln">node</span><span class="pun">.</span><span class="pln">js</span></code></li></ol></pre>

<p>基础(DOM,Css,Html,Javascript,UI模式)&gt;进阶（Jquery,Less）</p>

<hr>

<h3 id="title-76">前端攻城狮的认识与理解</h3>

<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pun">前端是最贴近用户的程序员，比数据库、后端、产品经理、运营、设计师都近，前端的职能就是让产品从</span><span class="lit">90</span><span class="pun">分进化到</span><span class="lit">100</span><span class="pun">分。</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="pun">前端的工作主要在以下几个方面：</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">参与项目，快速高质量实现效果图，精确到</span><span class="lit">1px</span></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> </span><span class="pun">与美工、设计、后端、数据库、产品等的沟通</span></code></li><li class="L5"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="pun">做好页面架构、页面重构；</span></code></li><li class="L6"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">实现良好页面交互，提升用户体验</span></code></li><li class="L7"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">处理</span><span class="pln">hack</span><span class="pun">、兼容，写优雅代码</span></code></li><li class="L8"><code><span class="pln">    </span><span class="lit">5.</span><span class="pln"> </span><span class="pun">实现服务器端的一些事情</span></code></li><li class="L9"><code></code></li><li class="L0"><code><span class="pun">前端攻城狮的价值体现在以下几个方面：</span></code></li><li class="L1"><code><span class="pln">    </span><span class="lit">1.</span><span class="pln"> </span><span class="pun">为简化用户使用提供技术支持（交互部分）</span></code></li><li class="L2"><code><span class="pln">    </span><span class="lit">2.</span><span class="pln"> </span><span class="pun">为多个浏览器兼容性提供支持</span></code></li><li class="L3"><code><span class="pln">    </span><span class="lit">3.</span><span class="pln"> </span><span class="pun">为提高用户浏览速度（浏览器性能）提供支持</span></code></li><li class="L4"><code><span class="pln">    </span><span class="lit">4.</span><span class="pln"> </span><span class="pun">为跨平台或者其他基于</span><span class="pln">webkit</span><span class="pun">或其他渲染引擎的应用提供支持</span></code></li><li class="L5"><code><span class="pln">    </span><span class="lit">5.</span><span class="pln"> </span><span class="pun">为展示数据提供支持（数据接口）</span></code></li></ol></pre></div>
			
			<div class="pre-next-post">
    			
                <a href="http://front-end.leanote.com/post/JavaScript%E8%B7%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93" class="pre-post clearfix">
                    <div class="icon"><i class="fa fa-angle-left"></i></div>
                    <div class="article"><div>JavaScript跨浏览器代码总结</div></div>
                </a>
                
                
                
                <a href="http://front-end.leanote.com/post/7c395dc93aff" class="next-post clearfix">
                    <div class="article"><div>史上最全前端开发面试问题答案整理</div></div>
                    <div class="icon"><i class="fa fa-angle-right"></i></div>
                </a>
                
            </div>
		   
			
			
			
<div class="entry-controls clearfix">
	<div class="vote-section-wrapper clearfix">
		<button class="btn btn-default btn-zan" id="likeBtn"><i class="fa fa-thumbs-o-up"></i> <span id="likeNum">0</span> 赞</button>
		<span class="control-item read-counts"><i class="fa fa-eye"></i> 21 人读过</span>
	</div>
	<div class="right-section">
		<div id="weixinQRCode"></div>
		<button class="btn btn-share btn-default btn-weibo"><i class="fa fa-weibo"></i> 新浪微博</button>
		<button class="btn btn-share btn-default btn-weixin"><i class="fa fa-wechat"></i> 微信</button>
		<div class="dropdown" style="display: inline-block; cursor: pointer; padding: 5px 10px; padding-right: 30px">
			
			<div class="dropdown-toggle" data-hover="dropdown" data-toggle="dropdown">
				<i class="fa fa-ellipsis-h"></i>
			</div>
			<ul class="dropdown-menu" role="menu">
				<li><a href="http://front-end.leanote.com/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93#" class="btn-share tencent-weibo"><i class="fa fa-tencent-weibo"></i> 腾讯微博</a></li>
				<li><a href="http://front-end.leanote.com/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93#" class="btn-share qq"><i class="fa fa-qq"></i> QQ空间</a></li>
				<li><a href="http://front-end.leanote.com/post/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93#" class="btn-share renren"><i class="fa fa-renren"></i> 人人网</a></li>
			</ul>
		</div>
	</div>
	<div class="voters clearfix" id="likers">

</div>
</div>

<script type="text/x-jsrender" id="tLikers" data-jsv-tmpl="_0">
[[for users]]
	<a id="liker_[[:UserId]]" title="[[:BlogTitle]]" href="[[:BlogUrl]]" target="_blank" class="voter">
		[[if Logo]]
			<img alt="avatar" class="avatar-small" src="[[:Logo]]">
		[[else]]
			<img alt="avatar" class="avatar-small" src="/images/blog/default_avatar.png">
		[[/if]]
	</a>
[[/for]]
</script>


<script type="text/x-jsrender" id="tComments">
[[for comments]]
	<li class="comment-item">
		<!-- 头像 -->
		<a ui-hovercard="" target="_blank" class="avatar-link" title="[[:UserInfo.Username]]" href="[[:UserInfo.BlogUrl]]">
			<img class="avatar" src="[[:UserInfo.Logo]]">
		</a>
		<!-- 评论 -->
		<div class="comment-body">
			<div class="comment-hd">
				<a href="[[:UserInfo.BlogUrl]]" target="_blank" >[[:UserInfo.Username]]</a>
				[[if IsAuthorComment]]
				<span>(作者)</span>
				[[/if]]
				
				<!-- 回复其它人 -->
				[[if ToUserInfo]]
					<span class="in-reply-to">
			        回复
			        <a href="[[:ToUserInfo.BlogUrl]]">[[:ToUserInfo.Username]]</a>
					</span>
					[[if ToUserIsAuthor]]
					<span>(作者)</span>
					[[/if]]
				[[/if]]
			</div>
			<div class="comment-content ng-binding" ng-bind-html="comment.content">
				[[html:Content]]
			</div>
			<div class="comment-ft clearfix" data-comment-id="[[:CommentId]]" >
				<span title="" ui-time="" class="date">[[:PublishDate]] </span>
				<span class="like-num [[if !LikeNum]]hide[[/if]]" title="[[:LikeNum]] 赞"><span class="like-num-i">[[:LikeNum]]</span> 赞</span></span>
				
				[[if ~root.visitUserInfo.UserId]]
					[[if IsMyNote && !IsMyComment]]
						<a href="javascript:;" class="comment-trash op-link "><i class="fa fa-trash"></i> 删除</a>
					[[/if]]
					[[if !IsMyComment]]
					<a href="javascript:;" class="comment-reply op-link ">
						<i class="fa fa-reply"></i>
						回复
					</a>
					<a href="javascript:;" class="comment-like op-link"><i class="fa fa-thumbs-o-up"></i> <span class="like-text">[[if IsILikeIt]]取消赞[[else]]赞[[/if]]</span></a>
					[[else]]
					<a href="javascript:;" class="comment-trash op-link "><i class="fa fa-trash"></i> 删除</a>
					[[/if]]
				[[/if]]
			</div>
			
			<!-- 回复该评论 -->
			[[if ~root.visitUserInfo.UserId]]
			<form class="comment-form comment-box-ft">
				<div class="clearfix">
					<div class="avatar-wrap">
						<img class="avatar" src="[[:~root.visitUserInfo.Logo]]">
					</div>
					<div class="editor-wrap">
						<textarea class="editable" id="commentContent" name="commentContent" placeholder="回复"></textarea>
					</div>
				</div>
				
				<div class="command clearfix" style="display: block;">
					<button class="reply-comment-btn save btn btn-primary" data-comment-id="[[:CommentId]]">提交评论</button>
					<a class="cancel reply-cancel btn-link">取消</a>
				</div>
			</form>
			[[/if]]
		</div>
	</li>
[[/for]]
</script>


<div class="comment-box">
	<form class="comment-form comment-box-ft hide" id="commentForm">
		<div class="clearfix">
			<div class="avatar-wrap">
				<img class="avatar" id="visitUserLogo">
			</div>
			<div class="editor-wrap">
				<textarea class="editable" id="commentContent" name="commentContent" placeholder="评论" style="height: 100px;"></textarea>
			</div>
		</div>
		<div class="command clearfix" style="display: block;">
			<button id="commentBtn" class="reply-comment-btn save btn btn-primary">提交评论</button>
		</div>
	</form>
	<div class="needLogin" id="noLoginContainer">
		<a onclick="goLogin()">立即登录</a>, 发表评论.
		<br>
		没有帐号? <a onclick="goRegister()">立即注册</a>
	</div>
	<div class="box-header">
	    <span class="counter">
	      <i class="icon icon-comment"></i><span id="commentNum">0</span> 条评论
	    </span>
    </div>
    
	<ul id="comments">
	</ul>
</div>


<div id="moreComments">
	<div class="hide comments-more">
		<a>More...</a>
	</div>
	<div class="comments-loading hide">
		<img src="./前端面试题目总结_files/loading-32.gif">
	</div>
</div>


	
		</div>
	</div>
</div>





<div id="footerContainer">
	
	<div class="container" id="footer">
        <div class="col-md-4">
          <h3>导航</h3>
          <ul>
          	<li><a href="http://front-end.leanote.com/">主页</a></li>
          	
			<li>
				<a href="http://front-end.leanote.com/cate/JavaScript">JavaScript</a>
			</li>
			
			<li>
				<a href="http://front-end.leanote.com/cate/HTML-CSS">HTML &amp; CSS</a>
			</li>
			
			<li>
				<a href="http://front-end.leanote.com/cate/DS-Algorithms">DS &amp; Algorithms </a>
			</li>
			
			<li>
				<a href="http://front-end.leanote.com/cate/Tools">Tool</a>
			</li>
			
			
			
			    <li class="">
					<a href="http://front-end.leanote.com/single/About-Me">About Me</a>
				</li>
			
			
			
			<li class="">
				<a href="http://front-end.leanote.com/archives">归档</a>
			</li>
			<li class="">
				<a href="http://front-end.leanote.com/tags">标签</a>
			</li>
          </ul>
        </div>
        <div class="col-md-4">
          <h3>最近发表</h3>
          <ul>
          	
          	<li title="fedora删除旧内核"><a href="http://front-end.leanote.com/post/32c39828df40">fedora删除旧内核</a></li>
          	
          	<li title="linux下 tar.gz、tar、bz2、zip 等解压缩、压缩命令小结"><a href="http://front-end.leanote.com/post/linux%E4%B8%8Btar%E3%80%81tar.gz%E3%80%81">linux下 tar.gz、tar、bz2、zip 等解压缩、压缩命令小结</a></li>
          	
          	<li title="JavaScript动画性能优化"><a href="http://front-end.leanote.com/post/JavaScript%E5%8A%A8%E7%94%BB%E6%80%A7%E8%83%BDyou-ha">JavaScript动画性能优化</a></li>
          	
          	<li title="使用 WebStorm 书写 ECAMScript2015（ES6）"><a href="http://front-end.leanote.com/post/%E4%BD%BF%E7%94%A8-WebStorm-%E4%B9%A6%E5%86%99-ECAM">使用 WebStorm 书写 ECAMScript2015（ES6）</a></li>
          	
          	<li title="CSS3之美（十一）——过渡与动画"><a href="http://front-end.leanote.com/post/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84CSS3%E2%80%94%E2%80%94%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB">CSS3之美（十一）——过渡与动画</a></li>
          	
          </ul>
       </div>
        <div class="col-md-4">
          <h3>友情链接 </h3>
          <ul>
          	
          		
					<li><a href="https://leanote.com/note" target="_blank">My Note</a></li>
          		
					<li><a href="https://leanote.com/" target="_blank">Leanote Home</a></li>
          		
					<li><a href="http://bbs.leanote.com/" target="_blank">Leanote BBS</a></li>
          		
					<li><a href="https://github.com/leanote/leanote" target="_blank">Leanote Github</a></li>
          		
          	
		 </ul>
        </div>
    </div>
    <div class="footer-leanote">Proudly powered by <a href="https://leanote.com/">Leanote</a></div>
</div>
<script src="./前端面试题目总结_files/jquery-1.9.0.min.js"></script>
<script src="./前端面试题目总结_files/bootstrap-min.js"></script>
<script src="./前端面试题目总结_files/bootstrap-hover-dropdown.js"></script>
<script>

function search(e) {
	var keywords = $("#searchInput").val();
	if(!keywords) {
		location.href = "http:\/\/front-end.leanote.com\/search";
	} else {
		var tpl = '<form action="http:\/\/front-end.leanote.com\/search" method="get">';
		tpl += '<input name="keywords" value="' + keywords + '" />';
		tpl += "</form";
		$(tpl).submit();
	}
}
$(function() {
    var $nav = $('#nav-container');
    
    if($nav.css('visibility') != 'hidden') {
        return;
    }
    var $menu = $('#menu');
    var interval;
    function clear() {
        if(interval) {
            clearInterval(interval);
        }
    }
    function showNav() {
        clear();
        $nav.css('visibility', 'visible')
        $menu.hide();
    }
    function hideNav() {
        clear();
        interval = setTimeout(function() {
            $nav.css('visibility', 'hidden');
            $menu.show();
        }, 1000);
    }
    $('#menu i').hover(function() {
        showNav();
    });
    $nav.hover(function() {
        showNav();
    }, function() {
       hideNav(); 
    });
})
</script>


    


<link href="./前端面试题目总结_files/pretty-evolution-dark.css" type="text/css" rel="stylesheet">

<script src="./前端面试题目总结_files/prettify.js"></script>
<script>
$("pre").addClass("prettyprint linenums");
prettyPrint();
</script>

<div id="blogNav" style="top: 10px; left: 1224px; display: block;">
	<div id="blogNavNav">
		<i class="fa fa-align-justify" title="文档导航"></i>
		<span>文档导航</span>
	</div>
	<div id="blogNavContent"><ul><li class="nav-h3"><a data-a="h3-%E6%8F%90%E7%A4%BA%E4%B8%8E%E5%BB%BA%E8%AE%AE" onclick="scrollTo(this, &#39;h3&#39;, &#39;提示与建议&#39;)">提示与建议</a></li><li class="nav-h3"><a data-a="h3-%E5%89%8D%E7%AB%AF" onclick="scrollTo(this, &#39;h3&#39;, &#39;前端&#39;)">前端</a></li><li class="nav-h3"><a data-a="h3-HTML" onclick="scrollTo(this, &#39;h3&#39;, &#39;HTML&#39;)">HTML</a></li><li class="nav-h4"><a data-a="h4-1.%20HTML5%20%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%B8%8Ehtml%E7%9A%84%E5%B7%AE%E5%88%AB" onclick="scrollTo(this, &#39;h4&#39;, &#39;1. HTML5 ，以及与html的差别&#39;)">1. HTML5 ，以及与html的差别</a></li><li class="nav-h4"><a data-a="h4-2.%20doctype(%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B)%20%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88" onclick="scrollTo(this, &#39;h4&#39;, &#39;2. doctype(文档类型) 的作用是什么&#39;)">2. doctype(文档类型) 的作用是什么</a></li><li class="nav-h4"><a data-a="h4-3.%20localStorage%E5%92%8CsessionStorage" onclick="scrollTo(this, &#39;h4&#39;, &#39;3. localStorage和sessionStorage&#39;)">3. localStorage和sessionStorage</a></li><li class="nav-h4"><a data-a="h4-4.%20%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%AD%98%E5%82%A8%E5%92%8C%E7%A6%BB%E7%BA%BFweb%E5%BA%94%E7%94%A8" onclick="scrollTo(this, &#39;h4&#39;, &#39;4. 应用程序存储和离线web应用&#39;)">4. 应用程序存储和离线web应用</a></li><li class="nav-h4"><a data-a="h4-5.%20%E7%AE%80%E8%BF%B0%E4%B8%80%E4%B8%8B%E4%BD%A0%E5%AF%B9HTML%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3" onclick="scrollTo(this, &#39;h4&#39;, &#39;5. 简述一下你对HTML语义化的理解&#39;)">5. 简述一下你对HTML语义化的理解</a></li><li class="nav-h3"><a data-a="h3-CSS" onclick="scrollTo(this, &#39;h3&#39;, &#39;CSS&#39;)">CSS</a></li><li class="nav-h4"><a data-a="h4-1.%20%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B" onclick="scrollTo(this, &#39;h4&#39;, &#39;1. 盒子模型&#39;)">1. 盒子模型</a></li><li class="nav-h4"><a data-a="h4-2.%20CSS%E5%AE%9A%E4%BD%8D" onclick="scrollTo(this, &#39;h4&#39;, &#39;2. CSS定位&#39;)">2. CSS定位</a></li><li class="nav-h4"><a data-a="h4-3.%20%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%8C%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%8A%E5%8C%B9%E9%85%8D%E5%8E%9F%E7%90%86" onclick="scrollTo(this, &#39;h4&#39;, &#39;3. 元素选择器，优先级及匹配原理&#39;)">3. 元素选择器，优先级及匹配原理</a></li><li class="nav-h4"><a data-a="h4-4.%20CSS%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD" onclick="scrollTo(this, &#39;h4&#39;, &#39;4. CSS水平居中&#39;)">4. CSS水平居中</a></li><li class="nav-h4"><a data-a="h4-5.%20BFC" onclick="scrollTo(this, &#39;h4&#39;, &#39;5. BFC&#39;)">5. BFC</a></li><li class="nav-h4"><a data-a="h4-6.%20%E5%B8%83%E5%B1%80%E9%97%AE%E9%A2%98" onclick="scrollTo(this, &#39;h4&#39;, &#39;6. 布局问题&#39;)">6. 布局问题</a></li><li class="nav-h4"><a data-a="h4-7.%20CSS3%E6%96%B0%E7%89%B9%E6%80%A7" onclick="scrollTo(this, &#39;h4&#39;, &#39;7. CSS3新特性&#39;)">7. CSS3新特性</a></li><li class="nav-h4"><a data-a="h4-8.%20CSSHack" onclick="scrollTo(this, &#39;h4&#39;, &#39;8. CSSHack&#39;)">8. CSSHack</a></li><li class="nav-h4"><a data-a="h4-9.%20link%E4%B8%8E@import%E7%9A%84%E5%8C%BA%E5%88%AB" onclick="scrollTo(this, &#39;h4&#39;, &#39;9. link与@import的区别&#39;)">9. link与@import的区别</a></li><li class="nav-h4"><a data-a="h4-10.%20display%20%E5%B1%9E%E6%80%A7" onclick="scrollTo(this, &#39;h4&#39;, &#39;10. display 属性&#39;)">10. display 属性</a></li><li class="nav-h4"><a data-a="h4-11.%20display:%20none;%E4%B8%8Evisibility:%20hidden;%E7%9A%84%E5%8C%BA%E5%88%AB" onclick="scrollTo(this, &#39;h4&#39;, &#39;11. display: none;与visibility: hidden;的区别&#39;)">11. display: none;与visibility: hidden;的区别</a></li><li class="nav-h4"><a data-a="h4-12.%20CSS%20reset" onclick="scrollTo(this, &#39;h4&#39;, &#39;12. CSS reset&#39;)">12. CSS reset</a></li><li class="nav-h4"><a data-a="h4-13.%20%E7%80%91%E5%B8%83%E6%B5%81" onclick="scrollTo(this, &#39;h4&#39;, &#39;13. 瀑布流&#39;)">13. 瀑布流</a></li><li class="nav-h4"><a data-a="h4-14.%20%E4%BB%80%E4%B9%88%E6%98%AFFOUC?%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D" onclick="scrollTo(this, &#39;h4&#39;, &#39;14. 什么是FOUC?如何避免&#39;)">14. 什么是FOUC?如何避免</a></li><li class="nav-h4"><a data-a="h4-15.%20%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E5%92%8C%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7" onclick="scrollTo(this, &#39;h4&#39;, &#39;15. 渐进增强和优雅降级&#39;)">15. 渐进增强和优雅降级</a></li><li class="nav-h3"><a data-a="h3-JavaScript" onclick="scrollTo(this, &#39;h3&#39;, &#39;JavaScript&#39;)">JavaScript</a></li><li class="nav-h4"><a data-a="h4-1.%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" onclick="scrollTo(this, &#39;h4&#39;, &#39;1. 数据类型&#39;)">1. 数据类型</a></li><li class="nav-h4"><a data-a="h4-2.%20undefined%E4%B8%8Enull" onclick="scrollTo(this, &#39;h4&#39;, &#39;2. undefined与null&#39;)">2. undefined与null</a></li><li class="nav-h4"><a data-a="h4-3.%20%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1" onclick="scrollTo(this, &#39;h4&#39;, &#39;3. 创建对象-面向对象&#39;)">3. 创建对象-面向对象</a></li><li class="nav-h4"><a data-a="h4-4.%20%E7%BB%A7%E6%89%BF" onclick="scrollTo(this, &#39;h4&#39;, &#39;4. 继承&#39;)">4. 继承</a></li><li class="nav-h4"><a data-a="h4-5.%20%E9%97%AD%E5%8C%85" onclick="scrollTo(this, &#39;h4&#39;, &#39;5. 闭包&#39;)">5. 闭包</a></li><li class="nav-h4"><a data-a="h4-6.%20%E6%A8%A1%E5%9D%97%E5%8C%96" onclick="scrollTo(this, &#39;h4&#39;, &#39;6. 模块化&#39;)">6. 模块化</a></li><li class="nav-h4"><a data-a="h4-7.%20CMD%20%E4%B8%8EAMD%20&amp;%20CommonJs" onclick="scrollTo(this, &#39;h4&#39;, &#39;7. CMD 与AMD &amp; CommonJs&#39;)">7. CMD 与AMD &amp; CommonJs</a></li><li class="nav-h4"><a data-a="h4-8.%20%E5%8E%9F%E5%9E%8B%E9%93%BE" onclick="scrollTo(this, &#39;h4&#39;, &#39;8. 原型链&#39;)">8. 原型链</a></li><li class="nav-h4"><a data-a="h4-9.%20%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE" onclick="scrollTo(this, &#39;h4&#39;, &#39;9. 作用域与作用域链&#39;)">9. 作用域与作用域链</a></li><li class="nav-h4"><a data-a="h4-10.%20%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6" onclick="scrollTo(this, &#39;h4&#39;, &#39;10. 事件模型与实现机制&#39;)">10. 事件模型与实现机制</a></li><li class="nav-h4"><a data-a="h4-11.%20%20HTML%20DOM%20%E4%BA%8B%E4%BB%B6%EF%BC%88%E4%B8%8D%E5%90%8C%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%89" onclick="scrollTo(this, &#39;h4&#39;, &#39;11.  HTML DOM 事件（不同浏览器）&#39;)">11.  HTML DOM 事件（不同浏览器）</a></li><li class="nav-h4"><a data-a="h4-12.%20%20%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86%E5%87%BD%E6%95%B0deepClone%E4%B8%8E%E6%B5%85%E5%85%8B%E9%9A%86" onclick="scrollTo(this, &#39;h4&#39;, &#39;12.  深度克隆函数deepClone与浅克隆&#39;)">12.  深度克隆函数deepClone与浅克隆</a></li><li class="nav-h4"><a data-a="h4-13.%20%E8%B7%A8%E5%9F%9F" onclick="scrollTo(this, &#39;h4&#39;, &#39;13. 跨域&#39;)">13. 跨域</a></li><li class="nav-h4"><a data-a="h4-14.%20%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F" onclick="scrollTo(this, &#39;h4&#39;, &#39;14. 内存泄漏&#39;)">14. 内存泄漏</a></li><li class="nav-h4"><a data-a="h4-15.%20Ajax" onclick="scrollTo(this, &#39;h4&#39;, &#39;15. Ajax&#39;)">15. Ajax</a></li><li class="nav-h4"><a data-a="h4-16.%20NodeJs" onclick="scrollTo(this, &#39;h4&#39;, &#39;16. NodeJs&#39;)">16. NodeJs</a></li><li class="nav-h4"><a data-a="h4-17.%20jQuery" onclick="scrollTo(this, &#39;h4&#39;, &#39;17. jQuery&#39;)">17. jQuery</a></li><li class="nav-h4"><a data-a="h4-18.%20HTML%20DOM%20%E6%93%8D%E4%BD%9C" onclick="scrollTo(this, &#39;h4&#39;, &#39;18. HTML DOM 操作&#39;)">18. HTML DOM 操作</a></li><li class="nav-h4"><a data-a="h4-19.%20Ajax%E8%BF%87%E7%A8%8B" onclick="scrollTo(this, &#39;h4&#39;, &#39;19. Ajax过程&#39;)">19. Ajax过程</a></li><li class="nav-h4"><a data-a="h4-20.%20Promise%E7%BC%96%E7%A8%8B" onclick="scrollTo(this, &#39;h4&#39;, &#39;20. Promise编程&#39;)">20. Promise编程</a></li><li class="nav-h4"><a data-a="h4-21.%20MVC%E5%92%8CMVVM%E7%9A%84%E7%90%86%E8%A7%A3" onclick="scrollTo(this, &#39;h4&#39;, &#39;21. MVC和MVVM的理解&#39;)">21. MVC和MVVM的理解</a></li><li class="nav-h4"><a data-a="h4-22.%20ES6%E4%BA%86%E8%A7%A3" onclick="scrollTo(this, &#39;h4&#39;, &#39;22. ES6了解&#39;)">22. ES6了解</a></li><li class="nav-h4"><a data-a="h4-23.%20arguments%E5%8F%98%E9%87%8F" onclick="scrollTo(this, &#39;h4&#39;, &#39;23. arguments变量&#39;)">23. arguments变量</a></li><li class="nav-h3"><a data-a="h3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C" onclick="scrollTo(this, &#39;h3&#39;, &#39;计算机网络&#39;)">计算机网络</a></li><li class="nav-h4"><a data-a="h4-1.%20%E7%8A%B6%E6%80%81%E7%A0%81" onclick="scrollTo(this, &#39;h4&#39;, &#39;1. 状态码&#39;)">1. 状态码</a></li><li class="nav-h4"><a data-a="h4-2.%20%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E9%A1%B5%E9%9D%A2%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%8D%E8%AF%A6%E8%BF%B0" onclick="scrollTo(this, &#39;h4&#39;, &#39;2. 浏览器访问页面发生了什么－详述&#39;)">2. 浏览器访问页面发生了什么－详述</a></li><li class="nav-h4"><a data-a="h4-3.%20DNS%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3" onclick="scrollTo(this, &#39;h4&#39;, &#39;3. DNS解析过程详解&#39;)">3. DNS解析过程详解</a></li><li class="nav-h4"><a data-a="h4-4.%20cookie%E5%8F%8A%E5%85%B6%E6%93%8D%E4%BD%9C" onclick="scrollTo(this, &#39;h4&#39;, &#39;4. cookie及其操作&#39;)">4. cookie及其操作</a></li><li class="nav-h4"><a data-a="h4-5.%20HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BA%86%E8%A7%A3" onclick="scrollTo(this, &#39;h4&#39;, &#39;5. HTTP请求头了解&#39;)">5. HTTP请求头了解</a></li><li class="nav-h4"><a data-a="h4-6.%20TCP%20%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B" onclick="scrollTo(this, &#39;h4&#39;, &#39;6. TCP 三次握手与四次挥手&#39;)">6. TCP 三次握手与四次挥手</a></li><li class="nav-h4"><a data-a="h4-7.%20CDN" onclick="scrollTo(this, &#39;h4&#39;, &#39;7. CDN&#39;)">7. CDN</a></li><li class="nav-h4"><a data-a="h4-8.%20HTTPS" onclick="scrollTo(this, &#39;h4&#39;, &#39;8. HTTPS&#39;)">8. HTTPS</a></li><li class="nav-h4"><a data-a="h4-9.%20HTTP/2.0" onclick="scrollTo(this, &#39;h4&#39;, &#39;9. HTTP/2.0&#39;)">9. HTTP/2.0</a></li><li class="nav-h4"><a data-a="h4-10.%20cookie%20%E5%92%8Csession%20%E7%9A%84%E5%8C%BA%E5%88%AB" onclick="scrollTo(this, &#39;h4&#39;, &#39;10. cookie 和session 的区别&#39;)">10. cookie 和session 的区别</a></li><li class="nav-h4"><a data-a="h4-11.%20%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B" onclick="scrollTo(this, &#39;h4&#39;, &#39;11. 网络七层模型&#39;)">11. 网络七层模型</a></li><li class="nav-h3"><a data-a="h3-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD" onclick="scrollTo(this, &#39;h3&#39;, &#39;前端性能&#39;)">前端性能</a></li><li class="nav-h4"><a data-a="h4-1.%20%E4%BC%98%E5%8C%96%E5%8E%9F%E5%88%99%E6%A6%82%E8%A7%88" onclick="scrollTo(this, &#39;h4&#39;, &#39;1. 优化原则概览&#39;)">1. 优化原则概览</a></li><li class="nav-h4"><a data-a="h4-2.%20%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD" onclick="scrollTo(this, &#39;h4&#39;, &#39;2. 图片懒加载&#39;)">2. 图片懒加载</a></li><li class="nav-h4"><a data-a="h4-3.%20%E5%9B%BE%E7%89%87%E9%A2%84%E5%8A%A0%E8%BD%BD" onclick="scrollTo(this, &#39;h4&#39;, &#39;3. 图片预加载&#39;)">3. 图片预加载</a></li><li class="nav-h4"><a data-a="h4-4.%20%E5%9F%9F%E5%90%8D%E6%94%B6%E6%95%9B" onclick="scrollTo(this, &#39;h4&#39;, &#39;4. 域名收敛&#39;)">4. 域名收敛</a></li><li class="nav-h4"><a data-a="h4-5.%20DNS%E9%A2%84%E8%A7%A3%E6%9E%90" onclick="scrollTo(this, &#39;h4&#39;, &#39;5. DNS预解析&#39;)">5. DNS预解析</a></li><li class="nav-h4"><a data-a="h4-6.%20%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%80%A7%E8%83%BD" onclick="scrollTo(this, &#39;h4&#39;, &#39;6. 如何提高移动端性能&#39;)">6. 如何提高移动端性能</a></li><li class="nav-h3"><a data-a="h3-Web%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8" onclick="scrollTo(this, &#39;h3&#39;, &#39;Web浏览器安全&#39;)">Web浏览器安全</a></li><li class="nav-h4"><a data-a="h4-1.%20XSS" onclick="scrollTo(this, &#39;h4&#39;, &#39;1. XSS&#39;)">1. XSS</a></li><li class="nav-h4"><a data-a="h4-2.%20CSRF%5Bcross%20site%20request%20fork%5D" onclick="scrollTo(this, &#39;h4&#39;, &#39;2. CSRF[cross site request fork]&#39;)">2. CSRF[cross site request fork]</a></li><li class="nav-h4"><a data-a="h4-3.%20sql%E6%B3%A8%E5%85%A5" onclick="scrollTo(this, &#39;h4&#39;, &#39;3. sql注入&#39;)">3. sql注入</a></li><li class="nav-h3"><a data-a="h3-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96" onclick="scrollTo(this, &#39;h3&#39;, &#39;前端工程化&#39;)">前端工程化</a></li><li class="nav-h4"><a data-a="h4-1.%20gulp" onclick="scrollTo(this, &#39;h4&#39;, &#39;1. gulp&#39;)">1. gulp</a></li><li class="nav-h4"><a data-a="h4-2.%20webpack%20+%20tree-shaking" onclick="scrollTo(this, &#39;h4&#39;, &#39;2. webpack + tree-shaking&#39;)">2. webpack + tree-shaking</a></li><li class="nav-h4"><a data-a="h4-3.%20github%E4%B8%8EGit" onclick="scrollTo(this, &#39;h4&#39;, &#39;3. github与Git&#39;)">3. github与Git</a></li><li class="nav-h4"><a data-a="h4-4.%20npm" onclick="scrollTo(this, &#39;h4&#39;, &#39;4. npm&#39;)">4. npm</a></li><li class="nav-h3"><a data-a="h3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" onclick="scrollTo(this, &#39;h3&#39;, &#39;数据结构&#39;)">数据结构</a></li><li class="nav-h4"><a data-a="h4-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%80%BB%E7%BB%93" onclick="scrollTo(this, &#39;h4&#39;, &#39;常用数据结构时间复杂度总结&#39;)">常用数据结构时间复杂度总结</a></li><li class="nav-h3"><a data-a="h3-%E7%AE%97%E6%B3%95" onclick="scrollTo(this, &#39;h3&#39;, &#39;算法&#39;)">算法</a></li><li class="nav-h4"><a data-a="h4-1.%20%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6" onclick="scrollTo(this, &#39;h4&#39;, &#39;1. 常用排序算法复杂度&#39;)">1. 常用排序算法复杂度</a></li><li class="nav-h4"><a data-a="h4-2.%20%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D" onclick="scrollTo(this, &#39;h4&#39;, &#39;2. 数组去重&#39;)">2. 数组去重</a></li><li class="nav-h4"><a data-a="h4-2.%20js%E5%AE%9E%E7%8E%B0%E5%B8%B8%E8%A7%84%E6%8E%92%E5%BA%8F" onclick="scrollTo(this, &#39;h4&#39;, &#39;2. js实现常规排序&#39;)">2. js实现常规排序</a></li><li class="nav-h4"><a data-a="h4-3.%20%E9%80%92%E5%BD%92%20factorial" onclick="scrollTo(this, &#39;h4&#39;, &#39;3. 递归 factorial&#39;)">3. 递归 factorial</a></li><li class="nav-h4"><a data-a="h4-4.%20%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95" onclick="scrollTo(this, &#39;h4&#39;, &#39;4. 数组常用方法&#39;)">4. 数组常用方法</a></li><li class="nav-h4"><a data-a="h4-5.%20string%E6%96%B9%E6%B3%95" onclick="scrollTo(this, &#39;h4&#39;, &#39;5. string方法&#39;)">5. string方法</a></li><li class="nav-h3"><a data-a="h3-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" onclick="scrollTo(this, &#39;h3&#39;, &#39;操作系统&#39;)">操作系统</a></li><li class="nav-h4"><a data-a="h4-1.%20%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB" onclick="scrollTo(this, &#39;h4&#39;, &#39;1. 堆和栈的区别&#39;)">1. 堆和栈的区别</a></li><li class="nav-h4"><a data-a="h4-2.%20%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%BB%E9%94%81%EF%BC%9F%E5%85%B6%E6%9D%A1%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%80%8E%E6%A0%B7%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81%EF%BC%9F" onclick="scrollTo(this, &#39;h4&#39;, &#39;2. 什么是死锁？其条件是什么？怎样避免死锁？&#39;)">2. 什么是死锁？其条件是什么？怎样避免死锁？</a></li><li class="nav-h3"><a data-a="h3-Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4" onclick="scrollTo(this, &#39;h3&#39;, &#39;Git常用命令&#39;)">Git常用命令</a></li><li class="nav-h3"><a data-a="h3-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%BD%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88" onclick="scrollTo(this, &#39;h3&#39;, &#39;什么是好的前端工程师&#39;)">什么是好的前端工程师</a></li><li class="nav-h3"><a data-a="h3-%E5%89%8D%E7%AB%AF%E6%94%BB%E5%9F%8E%E7%8B%AE%E7%9A%84%E8%AE%A4%E8%AF%86%E4%B8%8E%E7%90%86%E8%A7%A3" onclick="scrollTo(this, &#39;h3&#39;, &#39;前端攻城狮的认识与理解&#39;)">前端攻城狮的认识与理解</a></li></ul></div>
</div>


<script>
var siteUrl = "http:\/\/leanote.com"; 

var blogInfo={UserId: "56722282ab64416467002775", OpenComment:  true , CommentType: "default"}; 
var noteId = "570dfbf1ab6441622000096c"; 
var preLikeNum = +"0";
var commentNum = +"0";
</script>


<link href="./前端面试题目总结_files/share_comment.css" rel="stylesheet">

<script src="./前端面试题目总结_files/common.js"></script>
<script src="./前端面试题目总结_files/jsrender.js"></script>
<script src="./前端面试题目总结_files/jquery-cookie-min.js"></script>
<script src="./前端面试题目总结_files/bootstrap-dialog.min.js"></script>
<script src="./前端面试题目总结_files/jquery.qrcode.min.js"></script>

<script src="./前端面试题目总结_files/share_comment.js"></script>



<script src="./前端面试题目总结_files/md2html.js"></script>
<script>
var content = $.trim($("#markdownContent textarea").val());
md2Html(content, $("#content"), function(html) {
    $("pre").addClass("prettyprint linenums");
    prettyPrint();
    initNav();
    weixin();
});
</script>



</body></html>