<!DOCTYPE html>
<!-- saved from url=(0032)http://www.w3ctech.com/topic/854 -->
<html lang="zh-cmn-Hans"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区</title><meta name="keywords" content="前端, 前端开发, web前端, web前端开发, 前端开发工程师, 前端开发攻城师,设计, 开发, 前端资源, CSS, JavaScript, HTML, w3ctech, Web标准  "><meta name="description" content="w3ctech是中国最大的前端技术社区。"><meta id="viewport" name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no"><meta name="apple-mobile-web-app-capable" content="yes"><meta name="apple-mobile-web-app-status-bar-style" content="black"><meta name="format-detection" content="telephone=no"><meta name="google-site-verification" content="Txx2nO_-cdhvFHc0w_oWSdYSOfy86nm6_jYfDXRj5lA"><link rel="icon" type="image/png" sizes="16x16" href="http://img2.w3ctech.com/logo-16.png"><link rel="icon" type="image/png" sizes="32x32" href="http://img2.w3ctech.com/logo-32.png"><link rel="icon" type="image/png" sizes="48x48" href="http://img2.w3ctech.com/logo-48.png"><link rel="icon" type="image/png" sizes="96x96" href="http://img2.w3ctech.com/logo-96.png"><link rel="apple-touch-icon-precomposed" sizes="96x96" href="http://img2.w3ctech.com/logo-96.png"><link rel="apple-touch-icon-precomposed" sizes="144x144" href="http://img2.w3ctech.com/logo-144.png"><link href="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/main.css" rel="stylesheet"><script src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/hm.js"></script><script src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/jquery.min.js"></script> <script>var _hmt=_hmt||[];(function(){var e=document.createElement("script");e.src="//hm.baidu.com/hm.js?d464a182f8055b18e3b7d861436bb35b";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()</script></head><body class=""><ul class="notes tip_box">  </ul> <header id="hd" class="clearfix"> <div class="hd_box"> <h1 id="logo"><a href="http://www.w3ctech.com/">w3ctech</a></h1> <nav id="nav"> <div class="nav-colse">关闭</div> <div class="nav-menu-stack"> <b class="srt">导航</b></div> <ul class="clearfix"> <li><a href="http://www.w3ctech.com/">首页</a> </li><li><a href="http://www.w3ctech.com/event">活动</a> </li><li><a href="http://code.w3ctech.com/">Code</a> </li><li class="special"><a href="http://www.w3ctech.com/job">招聘</a> </li><li><a href="http://www.w3ctech.com/thinkjs">thinkjs</a> </li><li><a href="http://www.w3ctech.com/topic/all">所有文章</a>  </li><li class="login"><a href="http://www.w3ctech.com/user/sign_in" class="login_btn">登录</a> </li><li><a href="http://www.w3ctech.com/user/sign_up" class="reg_btn">免费注册</a>  </li></ul></nav> <div class="search-box"> <form action="http://www.w3ctech.com/index/search"> <input type="text" placeholder="关键字" class="search-text" name="title"> <button type="submit" class="search-btn">搜索</button></form></div></div></header> <section id="bd"> <div class="bd_box"> <div class="topic_detail"> <div class="topic_info clearfix"> <div class="topic_user"><a href="http://www.w3ctech.com/user/465" class="latest"><img width="50" height="50" src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/f41ff74ff97000ad28d0f7433fd4d785.jpg" class="avatar latest" title="十年踪迹"></a></div> <h1>【翻译】这个API很“迷人”——(新的Fetch API)</h1> <ul class="topic_category_list"> <li><a href="http://www.w3ctech.com/category/1" class="badge_category">JavaScript</a></li></ul> <ul class="meta"> <li class="meta_professor" title="十年踪迹"> <i class="icn_person"></i> 十年踪迹 </li><li> <i class="icn_calendar"></i> <time class="topic_date" title="Tue Aug 16 2016 15:04:00 GMT+0800 (CST)">2016-08-16</time> </li><li> <i class="icn_views"></i> 30487 访问 </li><li class="likes"> <a href="http://www.w3ctech.com/account/favorites?topic_id=854" data-id="854" class="likes_btn" title="收藏"><i class="fa"></i> <span class="likes_num">12</span></a> </li><li class="share"> <span><i class="icn_share"></i> 分享</span> <div class="share_list"> <ul> <li><a href="http://service.t.sina.com.cn/share/share.php?title=%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91%E8%BF%99%E4%B8%AAAPI%E5%BE%88%E2%80%9C%E8%BF%B7%E4%BA%BA%E2%80%9D%E2%80%94%E2%80%94(%E6%96%B0%E7%9A%84Fetch%20API)&amp;url=http://w3ctech.com/topic/854&amp;source=bookmark&amp;appkey=3700213029&amp;pic=&amp;ralateUid=1887410462&amp;language=zh_cn" title="分享至新浪微博" target="_blank" class="sina_share">新浪微博</a> </li><li><a href="http://share.v.t.qq.com/index.php?c=share&amp;a=index&amp;f=q2&amp;title=%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91%E8%BF%99%E4%B8%AAAPI%E5%BE%88%E2%80%9C%E8%BF%B7%E4%BA%BA%E2%80%9D%E2%80%94%E2%80%94(%E6%96%B0%E7%9A%84Fetch%20API)&amp;url=http://w3ctech.com/topic/854&amp;appkey=801096309&amp;assname=w3ctech&amp;pic=" title="分享至腾讯微博" target="_blank" class="tencent_share">腾讯微博</a></li></ul></div> </li><li class="share"> <span><i class="weixin_share"></i> 微信分享</span> <div class="share_list" id="weixin-qrcode"><canvas width="100" height="100"></canvas></div>  </li></ul></div> <div class="callout"> <blockquote>
<p>原文：<a href="https://hacks.mozilla.org/2015/03/this-api-is-so-fetching">https://hacks.mozilla.org/2015/03/this-api-is-so-fetching</a></p>
</blockquote>
<p><strong>原标题是This API is So Fetching，Fetching也可以表示迷人的意思——译者注</strong></p>
<p>JavaScript 通过XMLHttpRequest(XHR)来执行异步请求，这个方式已经存在了很长一段时间。虽说它很有用，但它不是最佳API。它在设计上不符合职责分离原则，将输入、输出和用事件来跟踪的状态混杂在一个对象里。而且，基于事件的模型与最近JavaScript流行的Promise以及基于生成器的异步编程模型不太搭（事件模型在处理异步上有点过时了——译者注）。</p>
<p>新的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch</a> API打算修正上面提到的那些缺陷。 它向JS中引入和HTTP协议中同样的原语（即Fetch——译者注）。具体而言，它引入一个实用的函数<code>fetch()</code>用来简洁捕捉从网络上检索一个资源的意图。</p>
<p><a href="https://fetch.spec.whatwg.org/">Fetch 规范</a>的API明确了用户代理获取资源的语义。它结合ServiceWorkers，尝试达到以下优化：</p>
<ol>
<li>改善离线体验</li>
<li>保持可扩展性</li>
</ol>
<p>到写这篇文章的时候，Fetch API被Firefox 39（Nightly版）以及Chrome 42（开发版）支持。在github上，有基于低版本浏览器的<a href="https://github.com/github/fetch">兼容实现</a></p>
<h2 id="-">特性检测</h2>
<p>要检查是否支持Fetch API，可以通过检查 Headers, Request, Response 或者 fetch 在 window 或者 worker 作用域中是否存在。</p>
<h2 id="-fetching-">简单的fetching示例</h2>
<p>在Fetch API中，最常用的就是fetch()函数。它接收一个URL参数，返回一个promise来处理response。response参数带着一个Response对象。</p>
<pre class="prettyprint"><code class="lang-js"><span class="pln">fetch</span><span class="pun">(</span><span class="str">"/data.json"</span><span class="pun">).</span><span class="pln">then</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">res</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="com">// res instanceof Response == true.</span><span class="pln">
  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">res</span><span class="pun">.</span><span class="pln">ok</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    res</span><span class="pun">.</span><span class="pln">json</span><span class="pun">().</span><span class="pln">then</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">data</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">data</span><span class="pun">.</span><span class="pln">entries</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
  </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"Looks like the response wasn't perfect, got status"</span><span class="pun">,</span><span class="pln"> res</span><span class="pun">.</span><span class="pln">status</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">},</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"Fetch failed!"</span><span class="pun">,</span><span class="pln"> e</span><span class="pun">);</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>如果是提交一个POST请求，代码如下：</p>
<pre class="prettyprint"><code class="lang-js"><span class="pln">fetch</span><span class="pun">(</span><span class="str">"http://www.example.org/submit.php"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  method</span><span class="pun">:</span><span class="pln"> </span><span class="str">"POST"</span><span class="pun">,</span><span class="pln">
  headers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="str">"Content-Type"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"application/x-www-form-urlencoded"</span><span class="pln">
  </span><span class="pun">},</span><span class="pln">
  body</span><span class="pun">:</span><span class="pln"> </span><span class="str">"firstName=Nikhil&amp;favColor=blue&amp;password=easytoguess"</span><span class="pln">
</span><span class="pun">}).</span><span class="pln">then</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">res</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">res</span><span class="pun">.</span><span class="pln">ok</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    alert</span><span class="pun">(</span><span class="str">"Perfect! Your settings are saved."</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">res</span><span class="pun">.</span><span class="pln">status </span><span class="pun">==</span><span class="pln"> </span><span class="lit">401</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    alert</span><span class="pun">(</span><span class="str">"Oops! You are not authorized."</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">},</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  alert</span><span class="pun">(</span><span class="str">"Error submitting form!"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>fetch()函数的参数和传给Request()构造函数的参数保持完全一致，所以你可以直接传任意复杂的request请求给fetch()。</p>
<h2 id="headers">Headers</h2>
<p>Fetch引入了3个接口，它们分别是 Headers,Request 以及 Response 。他们直接对应了相应的HTTP概念，但是基于安全考虑，有些区别，例如支持CORS规则以及保证cookies不能被第三方获取。</p>
<p>Headers接口是一个简单的多映射的名-值表</p>
<pre class="prettyprint"><code class="lang-js"><span class="kwd">var</span><span class="pln"> content </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Hello World"</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> reqHeaders </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Headers</span><span class="pun">();</span><span class="pln">
reqHeaders</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="str">"Content-Type"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"text/plain"</span><span class="pun">);</span><span class="pln">
reqHeaders</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="str">"Content-Length"</span><span class="pun">,</span><span class="pln"> content</span><span class="pun">.</span><span class="pln">length</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">());</span><span class="pln">
reqHeaders</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="str">"X-Custom-Header"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"ProcessThisImmediately"</span><span class="pun">);</span></code></pre>
<p>也可以传一个多维数组或者json：</p>
<pre class="prettyprint"><code class="lang-js"><span class="pln">reqHeaders </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Headers</span><span class="pun">({</span><span class="pln">
  </span><span class="str">"Content-Type"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"text/plain"</span><span class="pun">,</span><span class="pln">
  </span><span class="str">"Content-Length"</span><span class="pun">:</span><span class="pln"> content</span><span class="pun">.</span><span class="pln">length</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">(),</span><span class="pln">
  </span><span class="str">"X-Custom-Header"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"ProcessThisImmediately"</span><span class="pun">,</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>Headers的内容可以被检索：</p>
<pre class="prettyprint"><code class="lang-js"><span class="pln">console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">reqHeaders</span><span class="pun">.</span><span class="pln">has</span><span class="pun">(</span><span class="str">"Content-Type"</span><span class="pun">));</span><span class="pln"> </span><span class="com">// true</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">reqHeaders</span><span class="pun">.</span><span class="pln">has</span><span class="pun">(</span><span class="str">"Set-Cookie"</span><span class="pun">));</span><span class="pln"> </span><span class="com">// false</span><span class="pln">
reqHeaders</span><span class="pun">.</span><span class="kwd">set</span><span class="pun">(</span><span class="str">"Content-Type"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"text/html"</span><span class="pun">);</span><span class="pln">
reqHeaders</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="str">"X-Custom-Header"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"AnotherValue"</span><span class="pun">);</span><span class="pln">

console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">reqHeaders</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">"Content-Length"</span><span class="pun">));</span><span class="pln"> </span><span class="com">// 11</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">reqHeaders</span><span class="pun">.</span><span class="pln">getAll</span><span class="pun">(</span><span class="str">"X-Custom-Header"</span><span class="pun">));</span><span class="pln"> </span><span class="com">// ["ProcessThisImmediately", "AnotherValue"]</span><span class="pln">

reqHeaders</span><span class="pun">.</span><span class="kwd">delete</span><span class="pun">(</span><span class="str">"X-Custom-Header"</span><span class="pun">);</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">reqHeaders</span><span class="pun">.</span><span class="pln">getAll</span><span class="pun">(</span><span class="str">"X-Custom-Header"</span><span class="pun">));</span><span class="pln"> </span><span class="com">// []</span></code></pre>
<p>一些操作不仅仅对ServiceWorkers有用，本身也提供了更方便的操作Headers的API（相对于XMLHttpRequest来说——译者注）。</p>
<p>由于Headers可以在request请求中被发送或者在response请求中被接收，并且规定了哪些参数是可写的，Headers对象有一个特殊的<strong>guard</strong>属性。这个属性没有暴露给Web，但是它影响到哪些内容可以在Headers对象中被改变。</p>
<p>可能的值如下：</p>
<ul>
<li>"none": 默认的</li>
<li>"request": 从Request中获得的Headers只读。</li>
<li>"request-no-cors"：从不同域的Request中获得的Headers只读。</li>
<li>"response": 从Response获得的Headers只读。</li>
<li>"immutable" 在ServiceWorkers中最常用的，所有的Headers都只读。</li>
</ul>
<p>哪一种 guard 作用于 Headers 导致什么行为，详细定义在了这个<a href="https://fetch.spec.whatwg.org/">规范</a>中。例如，你不可以添加或者修改一个guard属性是"request"的Request Headers的"Content-Length"属性。同样地，插入"Set-Cookie"属性到一个Response headers是不允许的，因此ServiceWorkers是不能给合成的Response的headers添加一些cookies。</p>
<p>如果使用了一个不合法的HTTP Header属性名，那么Headers的方法通常都抛出 TypeError 异常。如果不小心写入了一个不可写的属性，也会抛出一个 TypeError 异常。除此以外的情况，失败了并不抛出异常。例如：</p>
<pre class="prettyprint"><code class="lang-js"><span class="kwd">var</span><span class="pln"> res </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Response</span><span class="pun">.</span><span class="pln">error</span><span class="pun">();</span><span class="pln">
</span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  res</span><span class="pun">.</span><span class="pln">headers</span><span class="pun">.</span><span class="kwd">set</span><span class="pun">(</span><span class="str">"Origin"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"http://mybank.com"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pun">(</span><span class="pln">e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"Cannot pretend to be a bank!"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<h2 id="request">Request</h2>
<p>Request接口定义了通过HTTP请求资源的request格式。参数需要URL、method和headers，同时Request也接受一个特定的body，mode，credentials以及cache hints.</p>
<p>最简单的 Request 当然是一个URL，可以通过URL来GET一个资源。</p>
<pre class="prettyprint"><code class="lang-js"><span class="kwd">var</span><span class="pln"> req </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Request</span><span class="pun">(</span><span class="str">"/index.html"</span><span class="pun">);</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">req</span><span class="pun">.</span><span class="pln">method</span><span class="pun">);</span><span class="pln"> </span><span class="com">// "GET"</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">req</span><span class="pun">.</span><span class="pln">url</span><span class="pun">);</span><span class="pln"> </span><span class="com">// "http://example.com/index.html"</span></code></pre>
<p>你也可以将一个建好的Request对象传给构造函数，这样将复制出一个新的Request。</p>
<pre class="prettyprint"><code class="lang-js"><span class="kwd">var</span><span class="pln"> copy </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Request</span><span class="pun">(</span><span class="pln">req</span><span class="pun">);</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">copy</span><span class="pun">.</span><span class="pln">method</span><span class="pun">);</span><span class="pln"> </span><span class="com">// "GET"</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">copy</span><span class="pun">.</span><span class="pln">url</span><span class="pun">);</span><span class="pln"> </span><span class="com">// "http://example.com/index.html"</span></code></pre>
<p>这种用法通常见于ServiceWorkers。</p>
<p>URL以外的其他属性的初始值能够通过第二个参数传给Request构造函数。这个参数是一个json：</p>
<pre class="prettyprint"><code class="lang-js"><span class="kwd">var</span><span class="pln"> uploadReq </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Request</span><span class="pun">(</span><span class="str">"/uploadImage"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  method</span><span class="pun">:</span><span class="pln"> </span><span class="str">"POST"</span><span class="pun">,</span><span class="pln">
  headers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="str">"Content-Type"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"image/png"</span><span class="pun">,</span><span class="pln">
  </span><span class="pun">},</span><span class="pln">
  body</span><span class="pun">:</span><span class="pln"> </span><span class="str">"image data"</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p><code>mode</code>属性用来决定是否允许跨域请求，以及哪些response属性可读。可选的mode属性值为<code>same-origin</code>，<code>no-cors</code>（默认）以及<code>cors</code>。</p>
<p><code>same-origin</code>模式很简单，如果一个请求是跨域的，那么返回一个简单的error，这样确保所有的请求遵守同源策略。</p>
<pre class="prettyprint"><code class="lang-js"><span class="kwd">var</span><span class="pln"> arbitraryUrl </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">"url-input"</span><span class="pun">).</span><span class="pln">value</span><span class="pun">;</span><span class="pln">
fetch</span><span class="pun">(</span><span class="pln">arbitraryUrl</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> mode</span><span class="pun">:</span><span class="pln"> </span><span class="str">"same-origin"</span><span class="pln"> </span><span class="pun">}).</span><span class="pln">then</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">res</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"Response succeeded?"</span><span class="pun">,</span><span class="pln"> res</span><span class="pun">.</span><span class="pln">ok</span><span class="pun">);</span><span class="pln">
</span><span class="pun">},</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"Please enter a same-origin URL!"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p><code>no-cors</code>模式允许来自CDN的脚本、其他域的图片和其他一些跨域资源，但是首先有个前提条件，就是请求的method只能是"HEAD","GET"或者"POST"。此外，任何 ServiceWorkers 拦截了这些请求，它不能随意添加或者改写任何headers，除了<a href="https://fetch.spec.whatwg.org/#simple-header">这些</a>。第三，JavaScript不能访问Response中的任何属性，这保证了 ServiceWorkers 不会导致任何跨域下的安全问题而隐私信息泄漏。</p>
<p><code>cors</code>模式我们通常用作跨域请求来从第三方提供的API获取数据。这个模式遵守<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">CORS协议</a>。只有有限的<a href="https://fetch.spec.whatwg.org/#concept-filtered-response-cors">一些</a>headers被暴露给Response对象，但是body是可读的。例如，你可以获得一个Flickr的<a href="https://www.flickr.com/services/api/flickr.interestingness.getList.html">最感兴趣的照片</a>的清单：</p>
<pre class="prettyprint"><code class="lang-js"><span class="kwd">var</span><span class="pln"> u </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">URLSearchParams</span><span class="pun">();</span><span class="pln">
u</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="str">'method'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'flickr.interestingness.getList'</span><span class="pun">);</span><span class="pln">
u</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="str">'api_key'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'&lt;insert api key here&gt;'</span><span class="pun">);</span><span class="pln">
u</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="str">'format'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'json'</span><span class="pun">);</span><span class="pln">
u</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="str">'nojsoncallback'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'1'</span><span class="pun">);</span><span class="pln">

</span><span class="kwd">var</span><span class="pln"> apiCall </span><span class="pun">=</span><span class="pln"> fetch</span><span class="pun">(</span><span class="str">'https://api.flickr.com/services/rest?'</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> u</span><span class="pun">);</span><span class="pln">

apiCall</span><span class="pun">.</span><span class="pln">then</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">response</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> response</span><span class="pun">.</span><span class="pln">json</span><span class="pun">().</span><span class="pln">then</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">json</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// photo is a list of photos.</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> json</span><span class="pun">.</span><span class="pln">photos</span><span class="pun">.</span><span class="pln">photo</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">
</span><span class="pun">}).</span><span class="pln">then</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">photos</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  photos</span><span class="pun">.</span><span class="pln">forEach</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">photo</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">photo</span><span class="pun">.</span><span class="pln">title</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>你无法从Headers中读取"Date"属性，因为Flickr在Access-Control-Expose-Headers中设置了不允许读取它。</p>
<pre class="prettyprint"><code class="lang-js"><span class="pln">response</span><span class="pun">.</span><span class="pln">headers</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">"Date"</span><span class="pun">);</span><span class="pln"> </span><span class="com">// null</span></code></pre>
<p><code>credentials</code>枚举属性决定了cookies是否能跨域得到。这个属性与XHR的withCredentials标志相同，但是只有三个值，分别是"omit"（默认）,"same-origin"以及"include"。</p>
<p>Request对象也可以提供 caching hints 给用户代理。这个属性还在安全复审阶段。Firefox 提供了这个属性，但是它目前还不起作用。</p>
<p>Request还有两个只读的属性与ServiceWorks拦截有关。其中一个是referrer，表示Request的来源，可能为空。另外一个是context，是一个非常大的枚举集合定义了获得的资源的种类，它可能是<code>image</code>比如请求来自于img标签，可能是<code>worker</code>如果是一个worker脚本，等等。如果使用fetch()函数，这个值是<code>fetch</code>。</p>
<h2 id="response">Response</h2>
<p>Response实例通常在fetch()的回调中获得。但是它们也可以用JS构造，不过通常这招只用于ServiceWorkers。</p>
<p>Response中最常见的成员是status（一个整数默认值是200）和statusText（默认值是"OK"），对应HTTP请求的status和reason。还有一个"ok"属性，当status为2xx的时候它是true。</p>
<p>headers 属性是Response的Headers对象，它是只读的(with guard "response")，url属性是当前Response的来源URL。</p>
<p>Response 也有一个type属性，它的值可能是"basic","cors","default","error"或者"opaque。</p>
<ul>
<li>"basic": 正常的，同域的请求，包含所有的headers除开"Set-Cookie"和"Set-Cookie2"。</li>
<li>"cors": Response从一个合法的跨域请求获得，<a href="https://fetch.spec.whatwg.org/#concept-filtered-response-cors">一部分header和body</a>可读。</li>
<li>"error": 网络错误。Response的status是0，Headers是空的并且不可写。当Response是从Response.error()中得到时，就是这种类型。</li>
<li>"opaque": Response从"no-cors"请求了跨域资源。依靠Server端来做限制。</li>
</ul>
<p>"error"类型会导致fetch()函数的Promise被reject并回调出一个TypeError。</p>
<p>还有一些属性只在ServerWorker作用域下有效。以正确的方式
返回一个Response针对一个被ServiceWorkers拦截的Request，可以像下面这样写：</p>
<pre class="prettyprint"><code class="lang-js"><span class="pln">addEventListener</span><span class="pun">(</span><span class="str">'fetch'</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">event</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  event</span><span class="pun">.</span><span class="pln">respondWith</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Response</span><span class="pun">(</span><span class="str">"Response body"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    headers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"Content-Type"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"text/plain"</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>如你所见，Response有个接收两个可选参数的构造器。第一个参数是返回的body，第二个参数是一个json，设置status、statusText以及headers。</p>
<p>静态方法Response.error()简单返回一个错误的请求。类似的，Response.redirect(url, status)返回一个跳转URL的请求。</p>
<h3 id="-body">处理body</h3>
<p>无论Request还是Response都可能带着body。由于body可以是各种类型，比较复杂，所以前面我们故意先略过它，在这里单独拿出来讲解。</p>
<p>body可以是以下任何一种类型的实例：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">ArrayBuffer</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView">ArrayBufferView</a>(Uint8Array and friends)</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob">Blob</a>/<a href="https://developer.mozilla.org/en-US/docs/Web/API/File">File</a></li>
<li>字符串</li>
<li><a href="https://url.spec.whatwg.org/#interface-urlsearchparams">URLSearchParams</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData">FormData</a>——目前不被Gecko和Blink支持，Firefox预计在版本39和Fetch的其他部分一起推出。</li>
</ul>
<p>此外，Request和Response都为他们的body提供了以下方法，这些方法都返回一个Promise对象。</p>
<ul>
<li>arrayBuffer()</li>
<li>blob()</li>
<li>json()</li>
<li>text()</li>
<li>formData()</li>
</ul>
<p>在使用非文本的数据方面，Fetch API和XHR相比提供了极大的便利。</p>
<p>可以通过传body参数来设置Request的body：</p>
<pre class="prettyprint"><code class="lang-js"><span class="kwd">var</span><span class="pln"> form </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FormData</span><span class="pun">(</span><span class="pln">document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">'login-form'</span><span class="pun">));</span><span class="pln">
fetch</span><span class="pun">(</span><span class="str">"/login"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  method</span><span class="pun">:</span><span class="pln"> </span><span class="str">"POST"</span><span class="pun">,</span><span class="pln">
  body</span><span class="pun">:</span><span class="pln"> form
</span><span class="pun">})</span></code></pre>
<p>Response的第一个参数是body：</p>
<pre class="prettyprint"><code class="lang-js"><span class="kwd">var</span><span class="pln"> res </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Response</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">File</span><span class="pun">([</span><span class="str">"chunk"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"chunk"</span><span class="pun">],</span><span class="pln"> </span><span class="str">"archive.zip"</span><span class="pun">,</span><span class="pln">
                       </span><span class="pun">{</span><span class="pln"> type</span><span class="pun">:</span><span class="pln"> </span><span class="str">"application/zip"</span><span class="pln"> </span><span class="pun">}));</span></code></pre>
<p>Request和Response（通过fetch()方法）都能够<a href="https://fetch.spec.whatwg.org/#concept-bodyinit-extract">自动识别自己的content type</a>，Request还可以自动设置"Content-Type" header，如果开发者没有设置它的话。</p>
<h2 id="-">流和克隆</h2>
<p>非常重要的一点要说明，那就是Request和Response的body只能被读取一次！它们有一个属性叫bodyUsed，读取一次之后设置为true，就不能再读取了。</p>
<pre class="prettyprint"><code class="lang-js"><span class="kwd">var</span><span class="pln"> res </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Response</span><span class="pun">(</span><span class="str">"one time use"</span><span class="pun">);</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">res</span><span class="pun">.</span><span class="pln">bodyUsed</span><span class="pun">);</span><span class="pln"> </span><span class="com">// false</span><span class="pln">
res</span><span class="pun">.</span><span class="pln">text</span><span class="pun">().</span><span class="pln">then</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">v</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">res</span><span class="pun">.</span><span class="pln">bodyUsed</span><span class="pun">);</span><span class="pln"> </span><span class="com">// true</span><span class="pln">
</span><span class="pun">});</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">res</span><span class="pun">.</span><span class="pln">bodyUsed</span><span class="pun">);</span><span class="pln"> </span><span class="com">// true</span><span class="pln">

res</span><span class="pun">.</span><span class="pln">text</span><span class="pun">().</span><span class="kwd">catch</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">"Tried to read already consumed Response"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>这样设计的目的是为了之后兼容基于流的API，让应用一次消费data，这样就允许了JavaScript处理大文件例如视频，并且可以支持实时压缩和编辑。</p>
<p>有时候，我们希望多次访问body，例如，你可能想用即将支持的<a href="http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#cache-objects">Cache API</a>去缓存Request和Response，以便于可以离线使用，Cache要求body能被再次读取。</p>
<p>所以，我们该如何让body能经得起多次读取呢？API提供了一个clone()方法。调用这个方法可以得到一个克隆对象。不过要记得，clone()必须要在读取之前调用，也就是先clone()再读取。</p>
<pre class="prettyprint"><code class="lang-js"><span class="pln">addEventListener</span><span class="pun">(</span><span class="str">'fetch'</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">evt</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> sheep </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Response</span><span class="pun">(</span><span class="str">"Dolly"</span><span class="pun">);</span><span class="pln">
  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">sheep</span><span class="pun">.</span><span class="pln">bodyUsed</span><span class="pun">);</span><span class="pln"> </span><span class="com">// false</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> clone </span><span class="pun">=</span><span class="pln"> sheep</span><span class="pun">.</span><span class="pln">clone</span><span class="pun">();</span><span class="pln">
  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">clone</span><span class="pun">.</span><span class="pln">bodyUsed</span><span class="pun">);</span><span class="pln"> </span><span class="com">// false</span><span class="pln">

  clone</span><span class="pun">.</span><span class="pln">text</span><span class="pun">();</span><span class="pln">
  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">sheep</span><span class="pun">.</span><span class="pln">bodyUsed</span><span class="pun">);</span><span class="pln"> </span><span class="com">// false</span><span class="pln">
  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">clone</span><span class="pun">.</span><span class="pln">bodyUsed</span><span class="pun">);</span><span class="pln"> </span><span class="com">// true</span><span class="pln">

  evt</span><span class="pun">.</span><span class="pln">respondWith</span><span class="pun">(</span><span class="pln">cache</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">sheep</span><span class="pun">.</span><span class="pln">clone</span><span class="pun">()).</span><span class="pln">then</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> sheep</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<h2 id="-">未来的改进</h2>
<p>为了支持流，Fetch最终将提供可以中断执行读取资源的能力，并且提供可以得到读取进度的API。这些能力在XHR中有，但是想要实现成Promise-based的Fetch API有些麻烦。</p>
<p>你可以加入<a href="https://whatwg.org/mailing-list">WHATWG的邮件组</a>参与<a href="https://www.w3.org/Bugs/Public/buglist.cgi?product=WHATWG&amp;component=Fetch&amp;resolution=---">Fetch</a>和<a href="https://github.com/slightlyoff/ServiceWorker/issues">ServiceWorker</a>的讨论，为改进API贡献自己的力量。</p>
<p>为了创造更好的互联网而努力！</p>
<p>感谢 Andrea Marchesini, Anne van Kesteren 和 Ben
Kelly 感谢他们对规范和实现所做的努力.</p>
 <div id="wx-qrcode" class="wx_qrcode_box"><img src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/qrcode_for_gh_229345f1b408_258.jpg" alt="w3ctech微信" class="weixin_qrcode"><p>扫码关注w3ctech微信公众号</p></div></div></div> <div class="topic_comment_hd"> <h2>共收到7条回复</h2></div> <div class="topic_comment"> <div class="topic_answers_content"> <ul>   <li class="clearfix" id="comment-926"> <div class="topic_user"><img width="50" height="50" src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/a4946bff02a22c11dd0a2c6ee6938b21.jpg"></div> <div class="comment_content"> <p class="byline"><a href="http://www.w3ctech.com/user/1742">hheedat</a> <span class="time">2015-03-20 19:04</span></p> <div class="comment_content_text"> <p>赞！</p>
 </div> <div class="topic_comment_actions"> <span class="add_comment" data-nickname="hheedat">回复此楼 <i class="fa fa-share"></i></span></div></div>  </li><li class="clearfix" id="comment-970"> <div class="topic_user"><img width="50" height="50" src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/b17fb13c931ec5719e26600b7d81e70b.jpg"></div> <div class="comment_content"> <p class="byline"><a href="http://www.w3ctech.com/user/2272">袁源</a> <span class="time">2015-03-31 14:48</span></p> <div class="comment_content_text"> <p>这个API很撩人</p>
 </div> <div class="topic_comment_actions"> <span class="add_comment" data-nickname="袁源">回复此楼 <i class="fa fa-share"></i></span></div></div>  </li><li class="clearfix" id="comment-1444"> <div class="topic_user"><img width="50" height="50" src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/fe98883782822da7514ec04b6fc6cdda.jpg"></div> <div class="comment_content"> <p class="byline"><a href="http://www.w3ctech.com/user/7">裕波</a> <span class="time">2015-07-01 17:17</span></p> <div class="comment_content_text"> <p><a href="https://github.com/github/fetch">https://github.com/github/fetch</a>  github提供了fetch的兼容方案。也支持到IE9+</p>
 </div> <div class="topic_comment_actions"> <span class="add_comment" data-nickname="裕波">回复此楼 <i class="fa fa-share"></i></span></div></div>  </li><li class="clearfix" id="comment-2045"> <div class="topic_user"><img width="50" height="50" src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/c851fc0af01f9d19a443a72b80215f92.jpg"></div> <div class="comment_content"> <p class="byline"><a href="http://www.w3ctech.com/user/476">xcatliu</a> <span class="time">2015-10-26 17:32</span></p> <div class="comment_content_text"> <p>原文：</p>
<p>&gt; Some of these operations are only useful in ServiceWorkers, but they provide
a much nicer API to Headers.</p>
<p>译文：</p>
<p>&gt; 一些操作不仅仅对ServiceWorkers有用，本身也提供了更方便的操作Headers的API（相对于XMLHttpRequest来说——译者注）。</p>
<p>这儿是不是有点问题？应该为：</p>
<p>&gt; 虽然一些操作只能在 ServiceWorkers 中使用，但是它提供了更方便的操作 Headers 的 API（相对于XMLHttpRequest来说——译者注）。</p>
 </div> <div class="topic_comment_actions"> <span class="add_comment" data-nickname="xcatliu">回复此楼 <i class="fa fa-share"></i></span></div></div>  </li><li class="clearfix" id="comment-2046"> <div class="topic_user"><img width="50" height="50" src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/c851fc0af01f9d19a443a72b80215f92.jpg"></div> <div class="comment_content"> <p class="byline"><a href="http://www.w3ctech.com/user/476">xcatliu</a> <span class="time">2015-10-26 17:50</span></p> <div class="comment_content_text"> <p>MDN 中有篇文章引用了这篇文章的英文版本，所以翻译 MDN 的时候参考了这篇文章，请知悉：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></p>
 </div> <div class="topic_comment_actions"> <span class="add_comment" data-nickname="xcatliu">回复此楼 <i class="fa fa-share"></i></span></div></div>  </li><li class="clearfix" id="comment-2779"> <div class="topic_user"><img width="50" height="50" src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/08de5f0ec23b56cb60c04475db9a3e0f.jpg"></div> <div class="comment_content"> <p class="byline"><a href="http://www.w3ctech.com/user/141890">诺即诺离小情绪</a> <span class="time">2016-08-06 22:07</span></p> <div class="comment_content_text"> <p>写的很好</p>
 </div> <div class="topic_comment_actions"> <span class="add_comment" data-nickname="诺即诺离小情绪">回复此楼 <i class="fa fa-share"></i></span></div></div>  </li><li class="clearfix" id="comment-2786"> <div class="topic_user"><img width="50" height="50" src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/82e0df81f1e8a7f324805a4508d51acb.jpg"></div> <div class="comment_content"> <p class="byline"><a href="http://www.w3ctech.com/user/141911">dreawer</a> <span class="time">2016-08-12 13:26</span></p> <div class="comment_content_text"> <p>极乐网观光团来了！
个人专为IT技术人员搭建的问答平台——欢迎前来拍砖。 [嘻嘻] 
<a href="http://www.dreawer.com/home.html">http://www.dreawer.com/home.html</a></p>
<p>目前最火的领域是前端领域，欢迎一起交流！</p>
 </div> <div class="topic_comment_actions"> <span class="add_comment" data-nickname="dreawer">回复此楼 <i class="fa fa-share"></i></span></div></div>   </li></ul></div>   <div class="disclaimer"> <i class="fa fa-frown-o"></i> <p> 只有w3ctech成员才能发表和回复。 <br> 请 <a href="http://www.w3ctech.com/user/sign_in">登录</a> 或者 <a href="http://www.w3ctech.com/user/sign_up">注册</a> 后发表或回复！ </p></div>  </div></div> </section><script src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/jquery.qrcode.min.js"></script><script>var qrcodeUrl = "http://www.w3ctech.com/topic/" + 854;
    $("#weixin-qrcode").qrcode({
        "width": 100,
        "height": 100,
        "text": qrcodeUrl
});</script><footer id="ft"> <div class="ft_box"> <div class="footer clearfix"> <div class="footer_link"> <ul> <li>赞助商     </li><li><a href="http://meituan.com/">美团网</a>        </li><li><a href="http://www.75team.com/">奇舞团</a>    </li><li><a href="http://www.sina.com.cn/">新浪</a>    </li><li><a href="http://www.ctrip.com/">携程网</a>    </li><li><a href="http://tech.163.com/">网易科技</a>    </li><li><a href="http://www.qq.com/">腾讯</a>    </li><li><a href="http://www.thenetcircle.com/">The NetCircle</a>    </li><li><a href="http://www.taobao.com/">淘宝</a>    </li><li><a href="http://www.xunlei.com/">迅雷网络</a>    </li><li><a href="http://www.360.cn/">360</a>    </li><li><a href="http://www.dangdang.com/">当当网</a>                </li><li><a href="http://ued.yhd.com/">1号店</a>      </li><li><a href="http://fex.baidu.com/">百度FEX</a>          </li><li><a href="http://www.microsoft.com/china/ard/accelerator.aspx">微软云加速器</a>                </li><li><a href="https://gitcafe.com/">GitCafe</a>      </li><li><a href="http://qqfe.org/">WFE-腾讯网前端团队</a>                 </li></ul><ul> <li>合作伙伴         </li><li><a href="http://www.infoq.com/cn/">InfoQ</a>                        </li><li><a href="http://www.blueidea.com/">蓝色理想</a>    </li><li><a href="http://www.chinaw3c.org/">W3C中国总部</a>    </li><li><a href="http://www.webrebuild.org/">WebRebuild</a>    </li><li><a href="http://www.lamper.cn/">lamper</a>    </li><li><a href="http://www.w3schools.com/cn/">W3Schools中文站</a>    </li><li><a href="http://w3help.org/">W3Help</a>              </li><li><a href="http://mozilla.com.cn/">火狐社区</a>            </li><li><a href="http://www.teambition.com/">Teambition</a>                           </li></ul><ul> <li>友情链接   </li><li><a href="http://www.zaoduke.net/">前端De早读课</a>      </li><li><a href="http://www.html5dw.com/">HTML5梦工场</a>                                        </li><li><a href="http://www.qianduan.net/">前端观察</a>      </li><li><a href="http://simple-is-better.com/">python4cn</a>    </li><li><a href="http://www.thinksaas.cn/">ThinkSAAS</a>        </li><li><a href="http://www.alloyteam.com/">腾讯Web前端Alloy团队</a>    </li><li><a href="http://html5.360.cn/">HTML5基地</a>    </li><li><a href="http://cn.cocos2d-x.org/">Cocos引擎中文官网</a>      </li><li><a href="http://www.shiyanlou.com/">实验楼IT在线教育</a>    </li><li><a href="http://www.w3cplus.com/">W3cplus</a>      </li><li><a href="http://www.51h5.com/">火舞游戏</a>      </li><li><a href="http://ionichina.com/">ionichina 社区</a>    </li><li><a href="http://www.linuxstory.org/">Linux Story</a>    </li><li><a href="http://imweb.io/">imweb</a>    </li><li><a href="http://idesign.qq.com/">腾讯设计导航</a>    </li><li><a href="http://www.biaonimeia.com/">设计自动标注工具</a>    </li><li><a href="http://www.w3school.com.cn/">w3school中文站</a>    </li><li><a href="http://www.zcfy.cc/">前端翻译平台-众成翻译</a>   </li></ul></div> <div class="footer_about"> <p> w3ctech创立于2009年10月，是中国最大的前端技术社区。 <span><a href="http://www.w3ctech.com/about">了解更多</a></span> <img src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/qrcode_for_gh_229345f1b408_258.jpg" alt="w3ctech微信" width="150" class="weixin_qrcode"> </p></div></div> <div class="foot_sponsor"> <a href="https://portal.qiniu.com/signup?code=3lid1lelqhemm"><img src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/logo_QINIU.png" alt="七牛云存储"><em>由七牛提供存储</em></a> <a href="http://www.ucloud.cn/"><img src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/logo_Ucloud.png" alt="UCloud"><em>由UCloud提供云主机</em></a> <a href="http://thinkjs.org/"><img src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/logo_ThinkJs.png" alt="thinkjs"><em>由thinkjs强力驱动</em></a></div> <div class="footer_sub"> <p class="footer_copyright">© 2009 - 2016 w3ctech.</p> <p><a href="http://www.miitbeian.gov.cn/">京ICP备14023423号-2</a></p> <div class="list_social"> <a href="http://weibo.com/w3ctech" class="social_weibo">微博</a> <a href="http://www.w3ctech.com/" class="social_weixin">微信</a></div></div></div></footer> <script src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/w3ctech.js"></script> <script src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/marked.min.js"></script> <script src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/jweixin-1.0.0.js"></script> <script>$(document).ready(function(){$.when($(".callout pre").addClass(" prettyprint"),$(".comment_content_text pre").addClass(" prettyprint")).then(function(){prettyPrint()}),$("#preview-btn").click(function(){return $.when($("#preview-box").html(marked($("#topic_content").val()))).then(function(){$.when($(".callout pre").addClass(" prettyprint"),$(".comment_content_text pre").addClass(" prettyprint")).then(function(){prettyPrint()})}),!1})});var locationLink=location.href;document.write(unescape("%3Cscript src='http://api.wechat.w3ctech.com/js_sdk?url="+locationLink+"' type='text/javascript'%3E%3C/script%3E"))</script><script src="./【翻译】这个API很“迷人”——(新的Fetch API) - w3ctech - 中国最大的前端技术社区_files/js_sdk" type="text/javascript"></script> <script>var shareMessage={title:"w3ctech",desc:"w3ctech\u662f\u4e2d\u56fd\u6700\u5927\u7684\u524d\u7aef\u6280\u672f\u793e\u533a\u3002",link:location.href,imgUrl:"http://www.w3ctech.com/resource/img/w3ctech-120-logo.jpg",type:"link",dataUrl:"",success:function(){},cancel:function(){}};wx.ready(function(){shareMessage.title=document.title,wx.onMenuShareTimeline(shareMessage),wx.onMenuShareAppMessage(shareMessage)})</script></body></html>