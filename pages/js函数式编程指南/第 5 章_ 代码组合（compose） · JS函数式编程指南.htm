<!DOCTYPE html>
<!-- saved from url=(0076)https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html -->
<html lang="zh"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>第 5 章: 代码组合（compose） · JS函数式编程指南</title>
        
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        
        <meta name="description" content="">
        <meta name="generator" content="GitBook 3.1.1">
        <meta name="author" content="Linghao Li">
        
        
    
    <link rel="stylesheet" href="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/style.css">

    
            
                
                <link rel="stylesheet" href="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/plugin.css">
                
            
                
                <link rel="stylesheet" href="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/website.css">
                
            
                
                <link rel="stylesheet" href="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/search.css">
                
            
                
                <link rel="stylesheet" href="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/website(1).css">
                
            
        

    

    
        
    
        
    
        
    
        
    
        
    
        
    

        
    
    
    <meta name="HandheldFriendly" content="true">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <link rel="apple-touch-icon-precomposed" sizes="152x152" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/gitbook/images/apple-touch-icon-precomposed-152.png">
    <link rel="shortcut icon" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/gitbook/images/favicon.ico" type="image/x-icon">

    
    <link rel="next" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html">
    
    
    <link rel="prev" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html">
    

    </head>
    <body>
        
<div class="book without-animation with-summary font-size-2 font-family-1 is-loading">
    <div class="book-summary">
        
            
<div id="book-search-input" role="search">
    <input type="text" placeholder="Type to search">
</div>

            
                <nav role="navigation">
                


<ul class="summary">
    
    
    
        
        <li>
            <a href="https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese" target="_blank" class="custom-link">JS函数式编程指南</a>
        </li>
    
    

    
    <li class="divider"></li>
    

    
        
        
    
        <li class="chapter " data-level="1.1" data-path="./">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/">
            
                    
                    Introduction
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2" data-path="ch1.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html">
            
                    
                    第 1 章: 我们在做什么？
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.2.1" data-path="ch1.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html#介绍">
            
                    
                    介绍
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.2.2" data-path="ch1.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html#一个简单例子">
            
                    
                    一个简单例子
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.3" data-path="ch2.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch2.html">
            
                    
                    第 2 章: 一等公民的函数
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.3.1" data-path="ch2.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch2.html#快速概览">
            
                    
                    快速概览
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.3.2" data-path="ch2.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch2.html#为何钟爱一等公民">
            
                    
                    为何钟爱一等公民
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.4" data-path="ch3.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html">
            
                    
                    第 3 章: 纯函数的好处
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.4.1" data-path="ch3.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#再次强调“纯”">
            
                    
                    再次强调“纯”
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.4.2" data-path="ch3.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#副作用可能包括">
            
                    
                    副作用可能包括...
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.4.3" data-path="ch3.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#八年级数学">
            
                    
                    八年级数学
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.4.4" data-path="ch3.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#追求“纯”的理由">
            
                    
                    追求“纯”的理由
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.4.5" data-path="ch3.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#总结">
            
                    
                    总结
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.5" data-path="ch4.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html">
            
                    
                    第 4 章: 柯里化（curry）
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.5.1" data-path="ch4.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html#不可或缺的-curry">
            
                    
                    不可或缺的 curry
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.5.2" data-path="ch4.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html#不仅仅是双关语咖喱">
            
                    
                    不仅仅是双关语／咖喱
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.5.3" data-path="ch4.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html#总结">
            
                    
                    总结
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter active" data-level="1.6" data-path="ch5.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html">
            
                    
                    第 5 章: 代码组合（compose）
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter" data-level="1.6.1" data-path="ch5.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html#函数饲养">
            
                    
                    函数饲养
            
                </a>
            

            
        </li>
    
        <li class="chapter" data-level="1.6.2" data-path="ch5.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html#pointfree">
            
                    
                    pointfree
            
                </a>
            

            
        </li>
    
        <li class="chapter" data-level="1.6.3" data-path="ch5.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html#debug">
            
                    
                    debug
            
                </a>
            

            
        </li>
    
        <li class="chapter" data-level="1.6.4" data-path="ch5.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html#范畴学">
            
                    
                    范畴学
            
                </a>
            

            
        </li>
    
        <li class="chapter" data-level="1.6.5" data-path="ch5.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html#总结">
            
                    
                    总结
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.7" data-path="ch6.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch6.html">
            
                    
                    第 6章: 示例应用
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.7.1" data-path="ch6.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch6.html#声明式代码">
            
                    
                    声明式代码
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.7.2" data-path="ch6.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch6.html#一个函数式的-flickr">
            
                    
                    一个函数式的 flickr
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.7.3" data-path="ch6.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch6.html#有原则的重构">
            
                    
                    有原则的重构
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.7.4" data-path="ch6.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch6.html#总结">
            
                    
                    总结
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.8" data-path="ch7.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch7.html">
            
                    
                    第 7 章: Hindley-Milner 类型签名
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.8.1" data-path="ch7.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch7.html#初识类型">
            
                    
                    初识类型
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.8.2" data-path="ch7.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch7.html#神秘的传奇故事">
            
                    
                    神秘的传奇故事
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.8.3" data-path="ch7.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch7.html#缩小可能性范围">
            
                    
                    缩小可能性范围
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.8.4" data-path="ch7.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch7.html#自由定理">
            
                    
                    自由定理
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.8.5" data-path="ch7.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch7.html#总结">
            
                    
                    总结
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.9" data-path="ch8.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch8.html">
            
                    
                    第 8 章: 特百惠
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.9.1" data-path="ch8.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch8.html#强大的容器">
            
                    
                    强大的容器
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.9.2" data-path="ch8.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch8.html#第一个-functor">
            
                    
                    第一个 functor
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.9.3" data-path="ch8.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch8.html#薛定谔的-maybe">
            
                    
                    薛定谔的 Maybe
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.9.4" data-path="ch8.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch8.html#“纯”错误处理">
            
                    
                    “纯”错误处理
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.9.5" data-path="ch8.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch8.html#王老先生有作用">
            
                    
                    王老先生有作用...
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.9.6" data-path="ch8.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch8.html#异步任务">
            
                    
                    异步任务
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.9.7" data-path="ch8.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch8.html#一点理论">
            
                    
                    一点理论
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.9.8" data-path="ch8.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch8.html#总结">
            
                    
                    总结
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.10" data-path="ch9.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch9.html">
            
                    
                    第 9 章: Monad
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.10.1" data-path="ch9.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch9.html#pointed-functor">
            
                    
                    pointed functor
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.10.2" data-path="ch9.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch9.html#混合比喻">
            
                    
                    混合比喻
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.10.3" data-path="ch9.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch9.html#chain-函数">
            
                    
                    chain 函数
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.10.4" data-path="ch9.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch9.html#理论">
            
                    
                    理论
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.10.5" data-path="ch9.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch9.html#总结">
            
                    
                    总结
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    
        <li class="chapter " data-level="1.11" data-path="ch10.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch10.html">
            
                    
                    第 10 章: Applicative Functor
            
                </a>
            

            
            <ul class="articles">
                
    
        <li class="chapter " data-level="1.11.1" data-path="ch10.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch10.html#应用-applicative-functor">
            
                    
                    应用 applicative functor
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.11.2" data-path="ch10.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch10.html#瓶中之船">
            
                    
                    瓶中之船
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.11.3" data-path="ch10.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch10.html#协调于激励">
            
                    
                    协调于激励
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.11.4" data-path="ch10.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch10.html#lift">
            
                    
                    lift
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.11.5" data-path="ch10.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch10.html#免费开瓶器">
            
                    
                    免费开瓶器
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.11.6" data-path="ch10.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch10.html#定律">
            
                    
                    定律
            
                </a>
            

            
        </li>
    
        <li class="chapter " data-level="1.11.7" data-path="ch10.html">
            
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch10.html#总结">
            
                    
                    总结
            
                </a>
            

            
        </li>
    

            </ul>
            
        </li>
    

    

    <li class="divider"></li>

    <li>
        <a href="https://www.gitbook.com/" target="blank" class="gitbook-link">
            Published with GitBook
        </a>
    </li>
</ul>


                </nav>
            
        
    </div>

    <div class="book-body">
        
            <div class="body-inner">
                
                    

<div class="book-header" role="navigation">
    

    <!-- Title -->
    <a class="btn pull-left js-toolbar-action" aria-label="" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html#"><i class="fa fa-align-justify"></i></a><div class="dropdown pull-right  js-toolbar-action"><a class="btn toggle-dropdown" aria-label="Share" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html#"><i class="fa fa-share-alt"></i></a><div class="dropdown-menu dropdown-left"><div class="dropdown-caret"><span class="caret-outer"></span><span class="caret-inner"></span></div><div class="buttons"><button class="button size-5 ">Facebook</button><button class="button size-5 ">Google+</button><button class="button size-5 ">Twitter</button><button class="button size-5 ">Weibo</button><button class="button size-5 ">Instapaper</button></div></div></div><a class="btn pull-right js-toolbar-action" aria-label="" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html#"><i class="fa fa-facebook"></i></a><a class="btn pull-right js-toolbar-action" aria-label="" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html#"><i class="fa fa-twitter"></i></a><div class="dropdown pull-left font-settings js-toolbar-action"><a class="btn toggle-dropdown" aria-label="Font Settings" href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html#"><i class="fa fa-font"></i></a><div class="dropdown-menu dropdown-right"><div class="dropdown-caret"><span class="caret-outer"></span><span class="caret-inner"></span></div><div class="buttons"><button class="button size-2 font-reduce">A</button><button class="button size-2 font-enlarge">A</button></div><div class="buttons"><button class="button size-2 ">Serif</button><button class="button size-2 ">Sans</button></div><div class="buttons"><button class="button size-3 ">White</button><button class="button size-3 ">Sepia</button><button class="button size-3 ">Night</button></div></div></div><h1>
        <i class="fa fa-circle-o-notch fa-spin"></i>
        <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/">第 5 章: 代码组合（compose）</a>
    </h1>
</div>




                    <div class="page-wrapper" tabindex="-1" role="main">
                        <div class="page-inner">
                            
<div id="book-search-results">
    <div class="search-noresults">
    
                                <section class="normal markdown-section">
                                
                                <h1 id="第-5-章-代码组合（compose）">第 5 章: 代码组合（compose）</h1>
<h2 id="函数饲养">函数饲养</h2>
<p>这就是 <code>组合</code>（compose，以下将称之为组合）：</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> compose = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">f,g</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>{
    <span class="hljs-keyword">return</span> f(g(x));
  };
};
</code></pre>
<p><code>f</code> 和 <code>g</code> 都是函数，<code>x</code> 是在它们之间通过“管道”传输的值。</p>
<p><code>组合</code>看起来像是在饲养函数。你就是饲养员，选择两个有特点又遭你喜欢的函数，让它们结合，产下一个崭新的函数。组合的用法如下：</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> toUpperCase = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>{ <span class="hljs-keyword">return</span> x.toUpperCase(); };
<span class="hljs-keyword">var</span> exclaim = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>{ <span class="hljs-keyword">return</span> x + <span class="hljs-string">'!'</span>; };
<span class="hljs-keyword">var</span> shout = compose(exclaim, toUpperCase);

shout(<span class="hljs-string">"send in the clowns"</span>);
<span class="hljs-comment">//=&gt; "SEND IN THE CLOWNS!"</span>
</code></pre>
<p>两个函数组合之后返回了一个新函数是完全讲得通的：组合某种类型（本例中是函数）的两个元素本就该生成一个该类型的新元素。把两个乐高积木组合起来绝不可能得到一个林肯积木。所以这是有道理的，我们将在适当的时候探讨这方面的一些底层理论。</p>
<p>在 <code>compose</code> 的定义中，<code>g</code> 将先于 <code>f</code> 执行，因此就创建了一个从右到左的数据流。这样做的可读性远远高于嵌套一大堆的函数调用，如果不用组合，<code>shout</code> 函数将会是这样的：</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> shout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>{
  <span class="hljs-keyword">return</span> exclaim(toUpperCase(x));
};
</code></pre>
<p>让代码从右向左运行，而不是由内而外运行，我觉得可以称之为“左倾”（吁——）。我们来看一个顺序很重要的例子：</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> head = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>{ <span class="hljs-keyword">return</span> x[<span class="hljs-number">0</span>]; };
<span class="hljs-keyword">var</span> reverse = reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">acc, x</span>)</span>{ <span class="hljs-keyword">return</span> [x].concat(acc); }, []);
<span class="hljs-keyword">var</span> last = compose(head, reverse);

last([<span class="hljs-string">'jumpkick'</span>, <span class="hljs-string">'roundhouse'</span>, <span class="hljs-string">'uppercut'</span>]);
<span class="hljs-comment">//=&gt; 'uppercut'</span>
</code></pre>
<p><code>reverse</code> 反转列表，<code>head</code> 取列表中的第一个元素；所以结果就是得到了一个 <code>last</code> 函数（译者注：即取列表的最后一个元素），虽然它性能不高。这个组合中函数的执行顺序应该是显而易见的。尽管我们可以定义一个从左向右的版本，但是从右向左执行更加能够反映数学上的含义——是的，组合的概念直接来自于数学课本。实际上，现在是时候去看看所有的组合都有的一个特性了。</p>
<pre><code class="lang-js"><span class="hljs-comment">// 结合律（associativity）</span>
<span class="hljs-keyword">var</span> associative = compose(f, compose(g, h)) == compose(compose(f, g), h);
<span class="hljs-comment">// true</span>
</code></pre>
<p>这个特性就是结合律，符合结合律意味着不管你是把 <code>g</code> 和 <code>h</code> 分到一组，还是把 <code>f</code> 和 <code>g</code> 分到一组都不重要。所以，如果我们想把字符串变为大写，可以这么写：</p>
<pre><code class="lang-js">compose(toUpperCase, compose(head, reverse));

<span class="hljs-comment">// 或者</span>
compose(compose(toUpperCase, head), reverse);
</code></pre>
<p>因为如何为 <code>compose</code> 的调用分组不重要，所以结果都是一样的。这也让我们有能力写一个可变的组合（variadic compose），用法如下：</p>
<pre><code class="lang-js"><span class="hljs-comment">// 前面的例子中我们必须要写两个组合才行，但既然组合是符合结合律的，我们就可以只写一个，</span>
<span class="hljs-comment">// 而且想传给它多少个函数就传给它多少个，然后让它自己决定如何分组。</span>

<span class="hljs-keyword">var</span> lastUpper = compose(toUpperCase, head, reverse);

lastUpper([<span class="hljs-string">'jumpkick'</span>, <span class="hljs-string">'roundhouse'</span>, <span class="hljs-string">'uppercut'</span>]);
<span class="hljs-comment">//=&gt; 'UPPERCUT'</span>


<span class="hljs-keyword">var</span> loudLastUpper = compose(exclaim, toUpperCase, head, reverse)

loudLastUpper([<span class="hljs-string">'jumpkick'</span>, <span class="hljs-string">'roundhouse'</span>, <span class="hljs-string">'uppercut'</span>]);
<span class="hljs-comment">//=&gt; 'UPPERCUT!'</span>
</code></pre>
<p>运用结合律能为我们带来强大的灵活性，还有对执行结果不会出现意外的那种平和心态。至于稍微复杂些的可变组合，也都包含在本书的 <code>support</code> 库里了，而且你也可以在类似 <a href="https://lodash.com/" target="_blank">lodash</a>、<a href="http://underscorejs.org/" target="_blank">underscore</a> 以及 <a href="http://ramdajs.com/" target="_blank">ramda</a> 这样的类库中找到它们的常规定义。</p>
<p>结合律的一大好处是任何一个函数分组都可以被拆开来，然后再以它们自己的组合方式打包在一起。让我们来重构重构前面的例子：</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> loudLastUpper = compose(exclaim, toUpperCase, head, reverse);

<span class="hljs-comment">// 或</span>
<span class="hljs-keyword">var</span> last = compose(head, reverse);
<span class="hljs-keyword">var</span> loudLastUpper = compose(exclaim, toUpperCase, last);

<span class="hljs-comment">// 或</span>
<span class="hljs-keyword">var</span> last = compose(head, reverse);
<span class="hljs-keyword">var</span> angry = compose(exclaim, toUpperCase);
<span class="hljs-keyword">var</span> loudLastUpper = compose(angry, last);

<span class="hljs-comment">// 更多变种...</span>
</code></pre>
<p>关于如何组合，并没有标准的答案——我们只是以自己喜欢的方式搭乐高积木罢了。通常来说，最佳实践是让组合可重用，就像 <code>last</code> 和 <code>angry</code> 那样。如果熟悉 Fowler 的《<a href="http://martinfowler.com/books/refactoring.html" target="_blank">重构</a>》一书的话，你可能会认识到这个过程叫做 “<a href="http://refactoring.com/catalog/extractMethod.html" target="_blank">extract method</a>”——只不过不需要关心对象的状态。</p>
<h2 id="pointfree">pointfree</h2>
<p>pointfree 模式指的是，永远不必说出你的数据。咳咳对不起（译者注：此处原文是“Pointfree style means never having to say your data”，源自 1970 年的电影 <em>Love Story</em> 里的一句著名台词“Love means never having to say you're sorry”。紧接着作者又说了一句“Excuse me”，大概是一种幽默）。它的意思是说，函数无须提及将要操作的数据是什么样的。一等公民的函数、柯里化（curry）以及组合协作起来非常有助于实现这种模式。</p>
<pre><code class="lang-js"><span class="hljs-comment">// 非 pointfree，因为提到了数据：word</span>
<span class="hljs-keyword">var</span> snakeCase = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">word</span>) </span>{
  <span class="hljs-keyword">return</span> word.toLowerCase().replace(<span class="hljs-regexp">/\s+/ig</span>, <span class="hljs-string">'_'</span>);
};

<span class="hljs-comment">// pointfree</span>
<span class="hljs-keyword">var</span> snakeCase = compose(replace(<span class="hljs-regexp">/\s+/ig</span>, <span class="hljs-string">'_'</span>), toLowerCase);
</code></pre>
<p>看到 <code>replace</code> 是如何被局部调用的了么？这里所做的事情就是通过管道把数据在接受单个参数的函数间传递。利用 curry，我们能够做到让每个函数都先接收数据，然后操作数据，最后再把数据传递到下一个函数那里去。另外注意在 pointfree 版本中，不需要 <code>word</code> 参数就能构造函数；而在非 pointfree 的版本中，必须要有 <code>word</code> 才能进行进行一切操作。</p>
<p>我们再来看一个例子。</p>
<pre><code class="lang-js"><span class="hljs-comment">// 非 pointfree，因为提到了数据：name</span>
<span class="hljs-keyword">var</span> initials = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>{
  <span class="hljs-keyword">return</span> name.split(<span class="hljs-string">' '</span>).map(compose(toUpperCase, head)).join(<span class="hljs-string">'. '</span>);
};

<span class="hljs-comment">// pointfree</span>
<span class="hljs-keyword">var</span> initials = compose(join(<span class="hljs-string">'. '</span>), map(compose(toUpperCase, head)), split(<span class="hljs-string">' '</span>));

initials(<span class="hljs-string">"hunter stockton thompson"</span>);
<span class="hljs-comment">// 'H. S. T'</span>
</code></pre>
<p>另外，pointfree 模式能够帮助我们减少不必要的命名，让代码保持简洁和通用。对函数式代码来说，pointfree 是非常好的石蕊试验，因为它能告诉我们一个函数是否是接受输入返回输出的小函数。比如，while 循环是不能组合的。不过你也要警惕，pointfree 就像是一把双刃剑，有时候也能混淆视听。并非所有的函数式代码都是 pointfree 的，不过这没关系。可以使用它的时候就使用，不能使用的时候就用普通函数。</p>
<h2 id="debug">debug</h2>
<p>组合的一个常见错误是，在没有局部调用之前，就组合类似 <code>map</code> 这样接受两个参数的函数。</p>
<pre><code class="lang-js"><span class="hljs-comment">// 错误做法：我们传给了 `angry` 一个数组，根本不知道最后传给 `map` 的是什么东西。</span>
<span class="hljs-keyword">var</span> latin = compose(map, angry, reverse);

latin([<span class="hljs-string">"frog"</span>, <span class="hljs-string">"eyes"</span>]);
<span class="hljs-comment">// error</span>


<span class="hljs-comment">// 正确做法：每个函数都接受一个实际参数。</span>
<span class="hljs-keyword">var</span> latin = compose(map(angry), reverse);

latin([<span class="hljs-string">"frog"</span>, <span class="hljs-string">"eyes"</span>]);
<span class="hljs-comment">// ["EYES!", "FROG!"])</span>
</code></pre>
<p>如果在 debug 组合的时候遇到了困难，那么可以使用下面这个实用的，但是不纯的 <code>trace</code> 函数来追踪代码的执行情况。</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> trace = curry(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">tag, x</span>)</span>{
  <span class="hljs-built_in">console</span>.log(tag, x);
  <span class="hljs-keyword">return</span> x;
});

<span class="hljs-keyword">var</span> dasherize = compose(join(<span class="hljs-string">'-'</span>), toLower, split(<span class="hljs-string">' '</span>), replace(<span class="hljs-regexp">/\s{2,}/ig</span>, <span class="hljs-string">' '</span>));

dasherize(<span class="hljs-string">'The world is a vampire'</span>);
<span class="hljs-comment">// TypeError: Cannot read property 'apply' of undefined</span>
</code></pre>
<p>这里报错了，来 <code>trace</code> 下：</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> dasherize = compose(join(<span class="hljs-string">'-'</span>), toLower, trace(<span class="hljs-string">"after split"</span>), split(<span class="hljs-string">' '</span>), replace(<span class="hljs-regexp">/\s{2,}/ig</span>, <span class="hljs-string">' '</span>));
<span class="hljs-comment">// after split [ 'The', 'world', 'is', 'a', 'vampire' ]</span>
</code></pre>
<p>啊！<code>toLower</code> 的参数是一个数组，所以需要先用 <code>map</code> 调用一下它。</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> dasherize = compose(join(<span class="hljs-string">'-'</span>), map(toLower), split(<span class="hljs-string">' '</span>), replace(<span class="hljs-regexp">/\s{2,}/ig</span>, <span class="hljs-string">' '</span>));

dasherize(<span class="hljs-string">'The world is a vampire'</span>);

<span class="hljs-comment">// 'the-world-is-a-vampire'</span>
</code></pre>
<p><code>trace</code> 函数允许我们在某个特定的点观察数据以便 debug。像 haskell 和 purescript 之类的语言出于开发的方便，也都提供了类似的函数。</p>
<p>组合将成为我们构造程序的工具，而且幸运的是，它背后是有一个强大的理论做支撑的。让我们来研究研究这个理论。</p>
<h2 id="范畴学">范畴学</h2>
<p>范畴学（category theory）是数学中的一个抽象分支，能够形式化诸如集合论（set theory）、类型论（type theory）、群论（group theory）以及逻辑学（logic）等数学分支中的一些概念。范畴学主要处理对象（object）、态射（morphism）和变化式（transformation），而这些概念跟编程的联系非常紧密。下图是一些相同的概念分别在不同理论下的形式：</p>
<p><img src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/cat_theory.png"></p>
<p>抱歉，我没有任何要吓唬你的意思。我并不假设你对这些概念都了如指掌，我只是想让你明白这里面有多少重复的内容，让你知道为何范畴学要统一这些概念。</p>
<p>在范畴学中，有一个概念叫做...范畴。有着以下这些组件（component）的搜集（collection）就构成了一个范畴：</p>
<ul>
<li>对象的搜集</li>
<li>态射的搜集</li>
<li>态射的组合</li>
<li>identity 这个独特的态射</li>
</ul>
<p>范畴学抽象到足以模拟任何事物，不过目前我们最关心的还是类型和函数，所以让我们把范畴学运用到它们身上看看。</p>
<p><strong>对象的搜集</strong></p>
<p>对象就是数据类型，例如 <code>String</code>、<code>Boolean</code>、<code>Number</code> 和 <code>Object</code> 等等。通常我们把数据类型视作所有可能的值的一个集合（set）。像 <code>Boolean</code> 就可以看作是 <code>[true, false]</code> 的集合，<code>Number</code> 可以是所有实数的一个集合。把类型当作集合对待是有好处的，因为我们可以利用集合论（set theory）处理类型。</p>
<p><strong>态射的搜集</strong></p>
<p>态射是标准的、普通的纯函数。</p>
<p><strong>态射的组合</strong></p>
<p>你可能猜到了，这就是本章介绍的新玩意儿——<code>组合</code>。我们已经讨论过 <code>compose</code> 函数是符合结合律的，这并非巧合，结合律是在范畴学中对任何组合都适用的一个特性。</p>
<p>这张图展示了什么是组合：</p>
<p><img src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/cat_comp1.png">
<img src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/cat_comp2.png"></p>
<p>这里有一个具体的例子：</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> g = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>{ <span class="hljs-keyword">return</span> x.length; };
<span class="hljs-keyword">var</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>{ <span class="hljs-keyword">return</span> x === <span class="hljs-number">4</span>; };
<span class="hljs-keyword">var</span> isFourLetterWord = compose(f, g);
</code></pre>
<p><strong>identity 这个独特的态射</strong></p>
<p>让我们介绍一个名为 <code>id</code> 的实用函数。这个函数接受随便什么输入然后原封不动地返回它：</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> id = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>{ <span class="hljs-keyword">return</span> x; };
</code></pre>
<p>你可能会问“这到底哪里有用了？”。别急，我们会在随后的章节中拓展这个函数的，暂时先把它当作一个可以替代给定值的函数——一个假装自己是普通数据的函数。</p>
<p><code>id</code> 函数跟组合一起使用简直完美。下面这个特性对所有的一元函数（unary function）（一元函数：只接受一个参数的函数） <code>f</code> 都成立：</p>
<pre><code class="lang-js"><span class="hljs-comment">// identity</span>
compose(id, f) == compose(f, id) == f;
<span class="hljs-comment">// true</span>
</code></pre>
<p>嘿，这就是实数的单位元（identity property）嘛！如果这还不够清楚直白，别着急，慢慢理解它的无用性。很快我们就会到处使用 <code>id</code> 了，不过暂时我们还是把当作一个替代给定值的函数。这对写 pointfree 的代码非常有用。</p>
<p>好了，以上就是类型和函数的范畴。不过如果你是第一次听说这些概念，我估计你还是有些迷糊，不知道范畴到底是什么，为什么有用。没关系，本书全书都在借助这些知识编写示例代码。至于现在，就在本章，本行文字中，你至少可以认为它向我们提供了有关组合的知识——比如结合律和单位律。</p>
<p>除了类型和函数，还有什么范畴呢？还有很多，比如我们可以定义一个有向图（directed graph），以节点为对象，以边为态射，以路径连接为组合。还可以定义一个实数类型（Number），以所有的实数对象，以 <code>&gt;=</code> 为态射（实际上任何偏序（partial order）或全序（total order）都可以成为一个范畴）。范畴的总数是无限的，但是要达到本书的目的，我们只需要关心上面定义的范畴就好了。至此我们已经大致浏览了一些表面的东西，必须要继续后面的内容了。</p>
<h2 id="总结">总结</h2>
<p>组合像一系列管道那样把不同的函数联系在一起，数据就可以也必须在其中流动——毕竟纯函数就是输入对输出，所以打破这个链条就是不尊重输出，就会让我们的应用一无是处。</p>
<p>我们认为组合是高于其他所有原则的设计原则，这是因为组合让我们的代码简单而富有可读性。另外范畴学将在应用架构、模拟副作用和保证正确性方面扮演重要角色。</p>
<p>现在我们已经有足够的知识去进行一些实际的练习了，让我们来编写一个示例应用。</p>
<p><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch6.html">第 6 章: 示例应用</a></p>
<h2 id="练习">练习</h2>
<pre><code class="lang-js"><span class="hljs-built_in">require</span>(<span class="hljs-string">'../../support'</span>);
<span class="hljs-keyword">var</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">'ramda'</span>);
<span class="hljs-keyword">var</span> accounting = <span class="hljs-built_in">require</span>(<span class="hljs-string">'accounting'</span>);

<span class="hljs-comment">// 示例数据</span>
<span class="hljs-keyword">var</span> CARS = [
    {name: <span class="hljs-string">"Ferrari FF"</span>, horsepower: <span class="hljs-number">660</span>, dollar_value: <span class="hljs-number">700000</span>, in_stock: <span class="hljs-literal">true</span>},
    {name: <span class="hljs-string">"Spyker C12 Zagato"</span>, horsepower: <span class="hljs-number">650</span>, dollar_value: <span class="hljs-number">648000</span>, in_stock: <span class="hljs-literal">false</span>},
    {name: <span class="hljs-string">"Jaguar XKR-S"</span>, horsepower: <span class="hljs-number">550</span>, dollar_value: <span class="hljs-number">132000</span>, in_stock: <span class="hljs-literal">false</span>},
    {name: <span class="hljs-string">"Audi R8"</span>, horsepower: <span class="hljs-number">525</span>, dollar_value: <span class="hljs-number">114200</span>, in_stock: <span class="hljs-literal">false</span>},
    {name: <span class="hljs-string">"Aston Martin One-77"</span>, horsepower: <span class="hljs-number">750</span>, dollar_value: <span class="hljs-number">1850000</span>, in_stock: <span class="hljs-literal">true</span>},
    {name: <span class="hljs-string">"Pagani Huayra"</span>, horsepower: <span class="hljs-number">700</span>, dollar_value: <span class="hljs-number">1300000</span>, in_stock: <span class="hljs-literal">false</span>}
  ];

<span class="hljs-comment">// 练习 1:</span>
<span class="hljs-comment">// ============</span>
<span class="hljs-comment">// 使用 _.compose() 重写下面这个函数。提示：_.prop() 是 curry 函数</span>
<span class="hljs-keyword">var</span> isLastInStock = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">cars</span>) </span>{
  <span class="hljs-keyword">var</span> last_car = _.last(cars);
  <span class="hljs-keyword">return</span> _.prop(<span class="hljs-string">'in_stock'</span>, last_car);
};

<span class="hljs-comment">// 练习 2:</span>
<span class="hljs-comment">// ============</span>
<span class="hljs-comment">// 使用 _.compose()、_.prop() 和 _.head() 获取第一个 car 的 name</span>
<span class="hljs-keyword">var</span> nameOfFirstCar = <span class="hljs-literal">undefined</span>;


<span class="hljs-comment">// 练习 3:</span>
<span class="hljs-comment">// ============</span>
<span class="hljs-comment">// 使用帮助函数 _average 重构 averageDollarValue 使之成为一个组合</span>
<span class="hljs-keyword">var</span> _average = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">xs</span>) </span>{ <span class="hljs-keyword">return</span> reduce(add, <span class="hljs-number">0</span>, xs) / xs.length; }; <span class="hljs-comment">// &lt;- 无须改动</span>

<span class="hljs-keyword">var</span> averageDollarValue = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">cars</span>) </span>{
  <span class="hljs-keyword">var</span> dollar_values = map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>{ <span class="hljs-keyword">return</span> c.dollar_value; }, cars);
  <span class="hljs-keyword">return</span> _average(dollar_values);
};


<span class="hljs-comment">// 练习 4:</span>
<span class="hljs-comment">// ============</span>
<span class="hljs-comment">// 使用 compose 写一个 sanitizeNames() 函数，返回一个下划线连接的小写字符串：例如：sanitizeNames(["Hello World"]) //=&gt; ["hello_world"]。</span>

<span class="hljs-keyword">var</span> _underscore = replace(<span class="hljs-regexp">/\W+/g</span>, <span class="hljs-string">'_'</span>); <span class="hljs-comment">//&lt;-- 无须改动，并在 sanitizeNames 中使用它</span>

<span class="hljs-keyword">var</span> sanitizeNames = <span class="hljs-literal">undefined</span>;


<span class="hljs-comment">// 彩蛋 1:</span>
<span class="hljs-comment">// ============</span>
<span class="hljs-comment">// 使用 compose 重构 availablePrices</span>

<span class="hljs-keyword">var</span> availablePrices = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">cars</span>) </span>{
  <span class="hljs-keyword">var</span> available_cars = _.filter(_.prop(<span class="hljs-string">'in_stock'</span>), cars);
  <span class="hljs-keyword">return</span> available_cars.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>{
    <span class="hljs-keyword">return</span> accounting.formatMoney(x.dollar_value);
  }).join(<span class="hljs-string">', '</span>);
};


<span class="hljs-comment">// 彩蛋 2:</span>
<span class="hljs-comment">// ============</span>
<span class="hljs-comment">// 重构使之成为 pointfree 函数。提示：可以使用 _.flip()</span>

<span class="hljs-keyword">var</span> fastestCar = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">cars</span>) </span>{
  <span class="hljs-keyword">var</span> sorted = _.sortBy(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">car</span>)</span>{ <span class="hljs-keyword">return</span> car.horsepower }, cars);
  <span class="hljs-keyword">var</span> fastest = _.last(sorted);
  <span class="hljs-keyword">return</span> fastest.name + <span class="hljs-string">' is the fastest'</span>;
};
</code></pre>

                                
                                </section>
                            
    </div>
    <div class="search-results">
        <div class="has-results">
            
            <h1 class="search-results-title"><span class="search-results-count"></span> results matching "<span class="search-query"></span>"</h1>
            <ul class="search-results-list"></ul>
            
        </div>
        <div class="no-results">
            
            <h1 class="search-results-title">No results matching "<span class="search-query"></span>"</h1>
            
        </div>
    </div>
</div>

                        </div>
                    </div>
                
            </div>

            
                
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html#总结" class="navigation navigation-prev " aria-label="Previous page: 总结">
                    <i class="fa fa-angle-left"></i>
                </a>
                
                
                <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html#函数饲养" class="navigation navigation-next " aria-label="Next page: 函数饲养" style="margin-right: 15px;">
                    <i class="fa fa-angle-right"></i>
                </a>
                
            
        
    </div>

    <script>
        var gitbook = gitbook || [];
        gitbook.push(function() {
            gitbook.page.hasChanged({"page":{"title":"第 5 章: 代码组合（compose）","level":"1.6","depth":1,"next":{"title":"函数饲养","level":"1.6.1","depth":2,"anchor":"#函数饲养","path":"ch5.md","ref":"ch5.md#函数饲养","articles":[]},"previous":{"title":"总结","level":"1.5.3","depth":2,"anchor":"#总结","path":"ch4.md","ref":"ch4.md#总结","articles":[]},"dir":"ltr"},"config":{"plugins":["comment"],"styles":{"website":"styles/website.css","pdf":"styles/pdf.css","epub":"styles/epub.css","mobi":"styles/mobi.css","ebook":"styles/ebook.css","print":"styles/print.css"},"pluginsConfig":{"comment":{"highlightCommented":true},"highlight":{},"search":{},"lunr":{"maxIndexSize":1000000},"sharing":{"facebook":true,"twitter":true,"google":false,"weibo":false,"instapaper":false,"vk":false,"all":["facebook","google","twitter","weibo","instapaper"]},"fontsettings":{"theme":"white","family":"sans","size":2},"theme-default":{"styles":{"website":"styles/website.css","pdf":"styles/pdf.css","epub":"styles/epub.css","mobi":"styles/mobi.css","ebook":"styles/ebook.css","print":"styles/print.css"},"showLevel":false}},"github":"llh911001/mostly-adequate-guide-chinese","theme":"default","author":"Linghao Li","pdf":{"pageNumbers":true,"fontSize":16,"fontFamily":"Arial","paperSize":"a4","chapterMark":"pagebreak","pageBreaksBefore":"/","margin":{"right":62,"left":62,"top":56,"bottom":56}},"structure":{"langs":"LANGS.md","readme":"README.md","glossary":"GLOSSARY.md","summary":"SUMMARY.md"},"variables":{},"title":"JS函数式编程指南","language":"zh","links":{"sidebar":{"JS函数式编程指南":"https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese"},"gitbook":true},"gitbook":"*","description":"Mostly Adequate Guide 中文版"},"file":{"path":"ch5.md","mtime":"2016-09-19T03:35:00.000Z","type":"markdown"},"gitbook":{"version":"3.1.1","time":"2016-09-19T03:34:10.921Z"},"basePath":".","book":{"language":""}});
        });
    </script>
</div>

        
    <script src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/gitbook.js"></script>
    <script src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/theme.js"></script>
    
        
        <script src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/plugin.js"></script>
        
    
        
        <script src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/search-engine.js"></script>
        
    
        
        <script src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/search.js"></script>
        
    
        
        <script src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/lunr.min.js"></script>
        
    
        
        <script src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/search-lunr.js"></script>
        
    
        
        <script src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/buttons.js"></script>
        
    
        
        <script src="./第 5 章_ 代码组合（compose） · JS函数式编程指南_files/fontsettings.js"></script>
        
    

    


</body></html>